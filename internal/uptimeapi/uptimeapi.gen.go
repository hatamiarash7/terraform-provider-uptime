// Package uptimeapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package uptimeapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for CheckMaintenanceScheduleType.
const (
	CheckMaintenanceScheduleTypeMONTHLY CheckMaintenanceScheduleType = "MONTHLY"
	CheckMaintenanceScheduleTypeONCE    CheckMaintenanceScheduleType = "ONCE"
	CheckMaintenanceScheduleTypeWEEKLY  CheckMaintenanceScheduleType = "WEEKLY"
)

// Defines values for CheckMaintenanceState.
const (
	CheckMaintenanceStateACTIVE     CheckMaintenanceState = "ACTIVE"
	CheckMaintenanceStateSCHEDULED  CheckMaintenanceState = "SCHEDULED"
	CheckMaintenanceStateSUPPRESSED CheckMaintenanceState = "SUPPRESSED"
)

// Defines values for ChecksMspDnsRecordType.
const (
	ChecksMspDnsRecordTypeA     ChecksMspDnsRecordType = "A"
	ChecksMspDnsRecordTypeAAAA  ChecksMspDnsRecordType = "AAAA"
	ChecksMspDnsRecordTypeANY   ChecksMspDnsRecordType = "ANY"
	ChecksMspDnsRecordTypeCNAME ChecksMspDnsRecordType = "CNAME"
	ChecksMspDnsRecordTypeMX    ChecksMspDnsRecordType = "MX"
	ChecksMspDnsRecordTypeNS    ChecksMspDnsRecordType = "NS"
	ChecksMspDnsRecordTypePTR   ChecksMspDnsRecordType = "PTR"
	ChecksMspDnsRecordTypeSOA   ChecksMspDnsRecordType = "SOA"
	ChecksMspDnsRecordTypeTXT   ChecksMspDnsRecordType = "TXT"
)

// Defines values for ChecksMspEncryption.
const (
	ChecksMspEncryptionEmpty  ChecksMspEncryption = ""
	ChecksMspEncryptionSSLTLS ChecksMspEncryption = "SSL_TLS"
)

// Defines values for ChecksMspExpectStringType.
const (
	ChecksMspExpectStringTypeINVERSEREGEX ChecksMspExpectStringType = "INVERSE_REGEX"
	ChecksMspExpectStringTypeREGEX        ChecksMspExpectStringType = "REGEX"
	ChecksMspExpectStringTypeSTRING       ChecksMspExpectStringType = "STRING"
)

// Defines values for ChecksMspProtocol.
const (
	ChecksMspProtocolFtp  ChecksMspProtocol = "ftp"
	ChecksMspProtocolHttp ChecksMspProtocol = "http"
	ChecksMspProtocolImap ChecksMspProtocol = "imap"
	ChecksMspProtocolIrc  ChecksMspProtocol = "irc"
	ChecksMspProtocolLdap ChecksMspProtocol = "ldap"
	ChecksMspProtocolPop3 ChecksMspProtocol = "pop3"
	ChecksMspProtocolSmtp ChecksMspProtocol = "smtp"
	ChecksMspProtocolXmpp ChecksMspProtocol = "xmpp"
)

// Defines values for ChecksMspUseIpVersion.
const (
	ChecksMspUseIpVersionEmpty ChecksMspUseIpVersion = ""
	ChecksMspUseIpVersionIPV4  ChecksMspUseIpVersion = "IPV4"
	ChecksMspUseIpVersionIPV6  ChecksMspUseIpVersion = "IPV6"
)

// Defines values for ChecksAPIMspUseIpVersion.
const (
	ChecksAPIMspUseIpVersionEmpty ChecksAPIMspUseIpVersion = ""
	ChecksAPIMspUseIpVersionIPV4  ChecksAPIMspUseIpVersion = "IPV4"
	ChecksAPIMspUseIpVersionIPV6  ChecksAPIMspUseIpVersion = "IPV6"
)

// Defines values for ChecksBulkUpdateFieldsMspDnsRecordType.
const (
	ChecksBulkUpdateFieldsMspDnsRecordTypeA     ChecksBulkUpdateFieldsMspDnsRecordType = "A"
	ChecksBulkUpdateFieldsMspDnsRecordTypeAAAA  ChecksBulkUpdateFieldsMspDnsRecordType = "AAAA"
	ChecksBulkUpdateFieldsMspDnsRecordTypeANY   ChecksBulkUpdateFieldsMspDnsRecordType = "ANY"
	ChecksBulkUpdateFieldsMspDnsRecordTypeCNAME ChecksBulkUpdateFieldsMspDnsRecordType = "CNAME"
	ChecksBulkUpdateFieldsMspDnsRecordTypeMX    ChecksBulkUpdateFieldsMspDnsRecordType = "MX"
	ChecksBulkUpdateFieldsMspDnsRecordTypeNS    ChecksBulkUpdateFieldsMspDnsRecordType = "NS"
	ChecksBulkUpdateFieldsMspDnsRecordTypePTR   ChecksBulkUpdateFieldsMspDnsRecordType = "PTR"
	ChecksBulkUpdateFieldsMspDnsRecordTypeSOA   ChecksBulkUpdateFieldsMspDnsRecordType = "SOA"
	ChecksBulkUpdateFieldsMspDnsRecordTypeTXT   ChecksBulkUpdateFieldsMspDnsRecordType = "TXT"
)

// Defines values for ChecksBulkUpdateFieldsMspEncryption.
const (
	ChecksBulkUpdateFieldsMspEncryptionEmpty  ChecksBulkUpdateFieldsMspEncryption = ""
	ChecksBulkUpdateFieldsMspEncryptionSSLTLS ChecksBulkUpdateFieldsMspEncryption = "SSL_TLS"
)

// Defines values for ChecksBulkUpdateFieldsMspExpectStringType.
const (
	ChecksBulkUpdateFieldsMspExpectStringTypeINVERSEREGEX ChecksBulkUpdateFieldsMspExpectStringType = "INVERSE_REGEX"
	ChecksBulkUpdateFieldsMspExpectStringTypeREGEX        ChecksBulkUpdateFieldsMspExpectStringType = "REGEX"
	ChecksBulkUpdateFieldsMspExpectStringTypeSTRING       ChecksBulkUpdateFieldsMspExpectStringType = "STRING"
)

// Defines values for ChecksBulkUpdateFieldsMspProtocol.
const (
	ChecksBulkUpdateFieldsMspProtocolFtp  ChecksBulkUpdateFieldsMspProtocol = "ftp"
	ChecksBulkUpdateFieldsMspProtocolHttp ChecksBulkUpdateFieldsMspProtocol = "http"
	ChecksBulkUpdateFieldsMspProtocolImap ChecksBulkUpdateFieldsMspProtocol = "imap"
	ChecksBulkUpdateFieldsMspProtocolIrc  ChecksBulkUpdateFieldsMspProtocol = "irc"
	ChecksBulkUpdateFieldsMspProtocolLdap ChecksBulkUpdateFieldsMspProtocol = "ldap"
	ChecksBulkUpdateFieldsMspProtocolPop3 ChecksBulkUpdateFieldsMspProtocol = "pop3"
	ChecksBulkUpdateFieldsMspProtocolSmtp ChecksBulkUpdateFieldsMspProtocol = "smtp"
	ChecksBulkUpdateFieldsMspProtocolXmpp ChecksBulkUpdateFieldsMspProtocol = "xmpp"
)

// Defines values for ChecksBulkUpdateFieldsMspUseIpVersion.
const (
	ChecksBulkUpdateFieldsMspUseIpVersionEmpty ChecksBulkUpdateFieldsMspUseIpVersion = ""
	ChecksBulkUpdateFieldsMspUseIpVersionIPV4  ChecksBulkUpdateFieldsMspUseIpVersion = "IPV4"
	ChecksBulkUpdateFieldsMspUseIpVersionIPV6  ChecksBulkUpdateFieldsMspUseIpVersion = "IPV6"
)

// Defines values for ChecksBulkUpdateMaintenanceFieldsScheduleType.
const (
	ChecksBulkUpdateMaintenanceFieldsScheduleTypeMONTHLY ChecksBulkUpdateMaintenanceFieldsScheduleType = "MONTHLY"
	ChecksBulkUpdateMaintenanceFieldsScheduleTypeONCE    ChecksBulkUpdateMaintenanceFieldsScheduleType = "ONCE"
	ChecksBulkUpdateMaintenanceFieldsScheduleTypeWEEKLY  ChecksBulkUpdateMaintenanceFieldsScheduleType = "WEEKLY"
)

// Defines values for ChecksBulkUpdateMaintenanceFieldsState.
const (
	ChecksBulkUpdateMaintenanceFieldsStateACTIVE     ChecksBulkUpdateMaintenanceFieldsState = "ACTIVE"
	ChecksBulkUpdateMaintenanceFieldsStateSCHEDULED  ChecksBulkUpdateMaintenanceFieldsState = "SCHEDULED"
	ChecksBulkUpdateMaintenanceFieldsStateSUPPRESSED ChecksBulkUpdateMaintenanceFieldsState = "SUPPRESSED"
)

// Defines values for ChecksDNSMspDnsRecordType.
const (
	ChecksDNSMspDnsRecordTypeA     ChecksDNSMspDnsRecordType = "A"
	ChecksDNSMspDnsRecordTypeAAAA  ChecksDNSMspDnsRecordType = "AAAA"
	ChecksDNSMspDnsRecordTypeANY   ChecksDNSMspDnsRecordType = "ANY"
	ChecksDNSMspDnsRecordTypeCNAME ChecksDNSMspDnsRecordType = "CNAME"
	ChecksDNSMspDnsRecordTypeMX    ChecksDNSMspDnsRecordType = "MX"
	ChecksDNSMspDnsRecordTypeNS    ChecksDNSMspDnsRecordType = "NS"
	ChecksDNSMspDnsRecordTypePTR   ChecksDNSMspDnsRecordType = "PTR"
	ChecksDNSMspDnsRecordTypeSOA   ChecksDNSMspDnsRecordType = "SOA"
	ChecksDNSMspDnsRecordTypeTXT   ChecksDNSMspDnsRecordType = "TXT"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupCheckDownCondition.
const (
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionALL           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ALL"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionANY           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ANY"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIFTYPCT      ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIFTY_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIVE          ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIVE"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFIVEPCT       ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FIVE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionFOUR          ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "FOUR"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionONEPCT        ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "ONE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTEN           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TEN"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTENPCT        ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TEN_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTHREE         ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "THREE"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTHREEPCT      ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "THREE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTWENTYFIVEPCT ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TWENTYFIVE_PCT"
	ChecksGROUPGroupcheckconfigGroupCheckDownConditionTWO           ChecksGROUPGroupcheckconfigGroupCheckDownCondition = "TWO"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode.
const (
	ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationModeAVERAGE ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode = "AVERAGE"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationModeCOPY    ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode = "COPY"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationModeNONE    ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode = "NONE"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType.
const (
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeAPI         ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "API"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeHEARTBEAT   ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "HEARTBEAT"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeHTTP        ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "HTTP"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeICMP        ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "ICMP"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeTRANSACTION ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "TRANSACTION"
	ChecksGROUPGroupcheckconfigGroupResponseTimeCheckTypeWEBHOOK     ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType = "WEBHOOK"
)

// Defines values for ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation.
const (
	ChecksGROUPGroupcheckconfigGroupUptimePercentCalculationAVERAGE      ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation = "AVERAGE"
	ChecksGROUPGroupcheckconfigGroupUptimePercentCalculationUPDOWNSTATES ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation = "UP_DOWN_STATES"
)

// Defines values for ChecksHTTPMspEncryption.
const (
	ChecksHTTPMspEncryptionEmpty  ChecksHTTPMspEncryption = ""
	ChecksHTTPMspEncryptionSSLTLS ChecksHTTPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksHTTPMspExpectStringType.
const (
	INVERSEREGEX ChecksHTTPMspExpectStringType = "INVERSE_REGEX"
	REGEX        ChecksHTTPMspExpectStringType = "REGEX"
	STRING       ChecksHTTPMspExpectStringType = "STRING"
)

// Defines values for ChecksHTTPMspUseIpVersion.
const (
	ChecksHTTPMspUseIpVersionEmpty ChecksHTTPMspUseIpVersion = ""
	ChecksHTTPMspUseIpVersionIPV4  ChecksHTTPMspUseIpVersion = "IPV4"
	ChecksHTTPMspUseIpVersionIPV6  ChecksHTTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksICMPMspUseIpVersion.
const (
	ChecksICMPMspUseIpVersionEmpty ChecksICMPMspUseIpVersion = ""
	ChecksICMPMspUseIpVersionIPV4  ChecksICMPMspUseIpVersion = "IPV4"
	ChecksICMPMspUseIpVersionIPV6  ChecksICMPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksIMAPMspEncryption.
const (
	ChecksIMAPMspEncryptionEmpty  ChecksIMAPMspEncryption = ""
	ChecksIMAPMspEncryptionSSLTLS ChecksIMAPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksIMAPMspUseIpVersion.
const (
	ChecksIMAPMspUseIpVersionEmpty ChecksIMAPMspUseIpVersion = ""
	ChecksIMAPMspUseIpVersionIPV4  ChecksIMAPMspUseIpVersion = "IPV4"
	ChecksIMAPMspUseIpVersionIPV6  ChecksIMAPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksNTPMspUseIpVersion.
const (
	ChecksNTPMspUseIpVersionEmpty ChecksNTPMspUseIpVersion = ""
	ChecksNTPMspUseIpVersionIPV4  ChecksNTPMspUseIpVersion = "IPV4"
	ChecksNTPMspUseIpVersionIPV6  ChecksNTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksPOPMspEncryption.
const (
	ChecksPOPMspEncryptionEmpty  ChecksPOPMspEncryption = ""
	ChecksPOPMspEncryptionSSLTLS ChecksPOPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksPOPMspUseIpVersion.
const (
	ChecksPOPMspUseIpVersionEmpty ChecksPOPMspUseIpVersion = ""
	ChecksPOPMspUseIpVersionIPV4  ChecksPOPMspUseIpVersion = "IPV4"
	ChecksPOPMspUseIpVersionIPV6  ChecksPOPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSMTPMspEncryption.
const (
	ChecksSMTPMspEncryptionEmpty  ChecksSMTPMspEncryption = ""
	ChecksSMTPMspEncryptionSSLTLS ChecksSMTPMspEncryption = "SSL_TLS"
)

// Defines values for ChecksSMTPMspUseIpVersion.
const (
	ChecksSMTPMspUseIpVersionEmpty ChecksSMTPMspUseIpVersion = ""
	ChecksSMTPMspUseIpVersionIPV4  ChecksSMTPMspUseIpVersion = "IPV4"
	ChecksSMTPMspUseIpVersionIPV6  ChecksSMTPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSSHMspUseIpVersion.
const (
	ChecksSSHMspUseIpVersionEmpty ChecksSSHMspUseIpVersion = ""
	ChecksSSHMspUseIpVersionIPV4  ChecksSSHMspUseIpVersion = "IPV4"
	ChecksSSHMspUseIpVersionIPV6  ChecksSSHMspUseIpVersion = "IPV6"
)

// Defines values for ChecksSSLCERTMspProtocol.
const (
	Ftp  ChecksSSLCERTMspProtocol = "ftp"
	Http ChecksSSLCERTMspProtocol = "http"
	Imap ChecksSSLCERTMspProtocol = "imap"
	Irc  ChecksSSLCERTMspProtocol = "irc"
	Ldap ChecksSSLCERTMspProtocol = "ldap"
	Pop3 ChecksSSLCERTMspProtocol = "pop3"
	Smtp ChecksSSLCERTMspProtocol = "smtp"
	Xmpp ChecksSSLCERTMspProtocol = "xmpp"
)

// Defines values for ChecksTCPMspUseIpVersion.
const (
	ChecksTCPMspUseIpVersionEmpty ChecksTCPMspUseIpVersion = ""
	ChecksTCPMspUseIpVersionIPV4  ChecksTCPMspUseIpVersion = "IPV4"
	ChecksTCPMspUseIpVersionIPV6  ChecksTCPMspUseIpVersion = "IPV6"
)

// Defines values for ChecksUDPMspUseIpVersion.
const (
	ChecksUDPMspUseIpVersionEmpty ChecksUDPMspUseIpVersion = ""
	ChecksUDPMspUseIpVersionIPV4  ChecksUDPMspUseIpVersion = "IPV4"
	ChecksUDPMspUseIpVersionIPV6  ChecksUDPMspUseIpVersion = "IPV6"
)

// Defines values for ComponentAutoSetStatus.
const (
	ComponentAutoSetStatusDegradedPerformance ComponentAutoSetStatus = "degraded-performance"
	ComponentAutoSetStatusMajorOutage         ComponentAutoSetStatus = "major-outage"
	ComponentAutoSetStatusPartialOutage       ComponentAutoSetStatus = "partial-outage"
	ComponentAutoSetStatusUnderMaintenance    ComponentAutoSetStatus = "under-maintenance"
)

// Defines values for ComponentStatus.
const (
	ComponentStatusDegradedPerformance ComponentStatus = "degraded-performance"
	ComponentStatusMajorOutage         ComponentStatus = "major-outage"
	ComponentStatusOperational         ComponentStatus = "operational"
	ComponentStatusPartialOutage       ComponentStatus = "partial-outage"
	ComponentStatusUnderMaintenance    ComponentStatus = "under-maintenance"
)

// Defines values for ContactGroupOnCallScheduleScheduleType.
const (
	ContactGroupOnCallScheduleScheduleTypeMONTHLY ContactGroupOnCallScheduleScheduleType = "MONTHLY"
	ContactGroupOnCallScheduleScheduleTypeONCE    ContactGroupOnCallScheduleScheduleType = "ONCE"
	ContactGroupOnCallScheduleScheduleTypeWEEKLY  ContactGroupOnCallScheduleScheduleType = "WEEKLY"
)

// Defines values for ContactGroupOnCallScheduleState.
const (
	ACTIVE     ContactGroupOnCallScheduleState = "ACTIVE"
	SCHEDULED  ContactGroupOnCallScheduleState = "SCHEDULED"
	SUPPRESSED ContactGroupOnCallScheduleState = "SUPPRESSED"
)

// Defines values for DashboardAlertsNumToShow.
const (
	DashboardAlertsNumToShowN10 DashboardAlertsNumToShow = 10
	DashboardAlertsNumToShowN15 DashboardAlertsNumToShow = 15
	DashboardAlertsNumToShowN5  DashboardAlertsNumToShow = 5
)

// Defines values for DashboardServicesNumToShow.
const (
	DashboardServicesNumToShowN12 DashboardServicesNumToShow = 12
	DashboardServicesNumToShowN16 DashboardServicesNumToShow = 16
	DashboardServicesNumToShowN20 DashboardServicesNumToShow = 20
	DashboardServicesNumToShowN4  DashboardServicesNumToShow = 4
	DashboardServicesNumToShowN8  DashboardServicesNumToShow = 8
)

// Defines values for DashboardServicesPrimarySort.
const (
	DashboardServicesPrimarySortCachedOrdering             DashboardServicesPrimarySort = "cached_ordering"
	DashboardServicesPrimarySortDeviceAddress              DashboardServicesPrimarySort = "device__address"
	DashboardServicesPrimarySortIsPausedcachedStateIsUp    DashboardServicesPrimarySort = "is_paused,cached_state_is_up"
	DashboardServicesPrimarySortMinusCachedLastDownAlertAt DashboardServicesPrimarySort = "-cached_last_down_alert_at"
	DashboardServicesPrimarySortMinusCachedResponseTime    DashboardServicesPrimarySort = "-cached_response_time"
	DashboardServicesPrimarySortMinusCreatedAt             DashboardServicesPrimarySort = "-created_at"
)

// Defines values for DashboardServicesSecondarySort.
const (
	DashboardServicesSecondarySortCachedOrdering             DashboardServicesSecondarySort = "cached_ordering"
	DashboardServicesSecondarySortDeviceAddress              DashboardServicesSecondarySort = "device__address"
	DashboardServicesSecondarySortIsPausedcachedStateIsUp    DashboardServicesSecondarySort = "is_paused,cached_state_is_up"
	DashboardServicesSecondarySortMinusCachedLastDownAlertAt DashboardServicesSecondarySort = "-cached_last_down_alert_at"
	DashboardServicesSecondarySortMinusCachedResponseTime    DashboardServicesSecondarySort = "-cached_response_time"
	DashboardServicesSecondarySortMinusCreatedAt             DashboardServicesSecondarySort = "-created_at"
)

// Defines values for IncidentAffectedComponentsStatus.
const (
	IncidentAffectedComponentsStatusDegradedPerformance IncidentAffectedComponentsStatus = "degraded-performance"
	IncidentAffectedComponentsStatusMajorOutage         IncidentAffectedComponentsStatus = "major-outage"
	IncidentAffectedComponentsStatusPartialOutage       IncidentAffectedComponentsStatus = "partial-outage"
	IncidentAffectedComponentsStatusUnderMaintenance    IncidentAffectedComponentsStatus = "under-maintenance"
)

// Defines values for IncidentIncidentType.
const (
	IncidentIncidentTypeINCIDENT             IncidentIncidentType = "INCIDENT"
	IncidentIncidentTypeSCHEDULEDMAINTENANCE IncidentIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for IncidentUpdatesIncidentState.
const (
	IncidentUpdatesIncidentStateIdentified    IncidentUpdatesIncidentState = "identified"
	IncidentUpdatesIncidentStateInvestigating IncidentUpdatesIncidentState = "investigating"
	IncidentUpdatesIncidentStateMaintenance   IncidentUpdatesIncidentState = "maintenance"
	IncidentUpdatesIncidentStateMonitoring    IncidentUpdatesIncidentState = "monitoring"
	IncidentUpdatesIncidentStateNotification  IncidentUpdatesIncidentState = "notification"
	IncidentUpdatesIncidentStateResolved      IncidentUpdatesIncidentState = "resolved"
)

// Defines values for IntegrationDatadogRegion.
const (
	EU IntegrationDatadogRegion = "EU"
	US IntegrationDatadogRegion = "US"
)

// Defines values for IntegrationPushoverPriority.
const (
	Minus1 IntegrationPushoverPriority = -1
	Minus2 IntegrationPushoverPriority = -2
	N0     IntegrationPushoverPriority = 0
	N1     IntegrationPushoverPriority = 1
	N2     IntegrationPushoverPriority = 2
)

// Defines values for SLAReportDefaultDateRange.
const (
	LAST30D   SLAReportDefaultDateRange = "LAST_30D"
	LAST7D    SLAReportDefaultDateRange = "LAST_7D"
	LASTMONTH SLAReportDefaultDateRange = "LAST_MONTH"
	LASTWEEK  SLAReportDefaultDateRange = "LAST_WEEK"
	THISMONTH SLAReportDefaultDateRange = "THIS_MONTH"
	THISWEEK  SLAReportDefaultDateRange = "THIS_WEEK"
	TODAY     SLAReportDefaultDateRange = "TODAY"
	YESTERDAY SLAReportDefaultDateRange = "YESTERDAY"
)

// Defines values for SLAReportResponseTimeSectionSort.
const (
	SLAReportResponseTimeSectionSortBYRESPONSETIME SLAReportResponseTimeSectionSort = "BY_RESPONSE_TIME"
	SLAReportResponseTimeSectionSortBYSLA          SLAReportResponseTimeSectionSort = "BY_SLA"
)

// Defines values for SLAReportUptimeSectionSort.
const (
	SLAReportUptimeSectionSortBYSLA    SLAReportUptimeSectionSort = "BY_SLA"
	SLAReportUptimeSectionSortBYUPTIME SLAReportUptimeSectionSort = "BY_UPTIME"
)

// Defines values for SLAReportStatsOutput.
const (
	SLAReportStatsOutputJson SLAReportStatsOutput = "json"
	SLAReportStatsOutputPdf  SLAReportStatsOutput = "pdf"
	SLAReportStatsOutputXls  SLAReportStatsOutput = "xls"
)

// Defines values for ScheduledReportAtTime.
const (
	ScheduledReportAtTimeN0  ScheduledReportAtTime = 0
	ScheduledReportAtTimeN1  ScheduledReportAtTime = 1
	ScheduledReportAtTimeN10 ScheduledReportAtTime = 10
	ScheduledReportAtTimeN11 ScheduledReportAtTime = 11
	ScheduledReportAtTimeN12 ScheduledReportAtTime = 12
	ScheduledReportAtTimeN13 ScheduledReportAtTime = 13
	ScheduledReportAtTimeN14 ScheduledReportAtTime = 14
	ScheduledReportAtTimeN15 ScheduledReportAtTime = 15
	ScheduledReportAtTimeN16 ScheduledReportAtTime = 16
	ScheduledReportAtTimeN17 ScheduledReportAtTime = 17
	ScheduledReportAtTimeN18 ScheduledReportAtTime = 18
	ScheduledReportAtTimeN19 ScheduledReportAtTime = 19
	ScheduledReportAtTimeN2  ScheduledReportAtTime = 2
	ScheduledReportAtTimeN20 ScheduledReportAtTime = 20
	ScheduledReportAtTimeN21 ScheduledReportAtTime = 21
	ScheduledReportAtTimeN22 ScheduledReportAtTime = 22
	ScheduledReportAtTimeN23 ScheduledReportAtTime = 23
	ScheduledReportAtTimeN3  ScheduledReportAtTime = 3
	ScheduledReportAtTimeN4  ScheduledReportAtTime = 4
	ScheduledReportAtTimeN5  ScheduledReportAtTime = 5
	ScheduledReportAtTimeN6  ScheduledReportAtTime = 6
	ScheduledReportAtTimeN7  ScheduledReportAtTime = 7
	ScheduledReportAtTimeN8  ScheduledReportAtTime = 8
	ScheduledReportAtTimeN9  ScheduledReportAtTime = 9
)

// Defines values for ScheduledReportFileType.
const (
	PDF ScheduledReportFileType = "PDF"
	XLS ScheduledReportFileType = "XLS"
)

// Defines values for ScheduledReportOnWeekday.
const (
	ScheduledReportOnWeekdayN1 ScheduledReportOnWeekday = 1
	ScheduledReportOnWeekdayN2 ScheduledReportOnWeekday = 2
	ScheduledReportOnWeekdayN3 ScheduledReportOnWeekday = 3
	ScheduledReportOnWeekdayN4 ScheduledReportOnWeekday = 4
	ScheduledReportOnWeekdayN5 ScheduledReportOnWeekday = 5
	ScheduledReportOnWeekdayN6 ScheduledReportOnWeekday = 6
	ScheduledReportOnWeekdayN7 ScheduledReportOnWeekday = 7
)

// Defines values for ScheduledReportRecurrence.
const (
	ScheduledReportRecurrenceDAILY     ScheduledReportRecurrence = "DAILY"
	ScheduledReportRecurrenceMONTHLY   ScheduledReportRecurrence = "MONTHLY"
	ScheduledReportRecurrenceQUARTERLY ScheduledReportRecurrence = "QUARTERLY"
	ScheduledReportRecurrenceWEEKLY    ScheduledReportRecurrence = "WEEKLY"
	ScheduledReportRecurrenceYEARLY    ScheduledReportRecurrence = "YEARLY"
)

// Defines values for StatusPagePageType.
const (
	StatusPagePageTypeINTERNAL  StatusPagePageType = "INTERNAL"
	StatusPagePageTypePUBLIC    StatusPagePageType = "PUBLIC"
	StatusPagePageTypePUBLICSLA StatusPagePageType = "PUBLIC_SLA"
)

// Defines values for StatusPageUptimeCalculationType.
const (
	StatusPageUptimeCalculationTypeBYCHECKS    StatusPageUptimeCalculationType = "BY_CHECKS"
	StatusPageUptimeCalculationTypeBYINCIDENTS StatusPageUptimeCalculationType = "BY_INCIDENTS"
)

// Defines values for StatusPageVisibilityLevel.
const (
	StatusPageVisibilityLevelEXTERNALUSERS StatusPageVisibilityLevel = "EXTERNAL_USERS"
	StatusPageVisibilityLevelPUBLIC        StatusPageVisibilityLevel = "PUBLIC"
	StatusPageVisibilityLevelUPTIMEUSERS   StatusPageVisibilityLevel = "UPTIME_USERS"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus.
const (
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusDegradedPerformance StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusMajorOutage         StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "major-outage"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusPartialOutage       StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "partial-outage"
	StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatusUnderMaintenance    StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsIncidentType.
const (
	StatusPageCurrentStatusActiveIncidentsIncidentTypeINCIDENT             StatusPageCurrentStatusActiveIncidentsIncidentType = "INCIDENT"
	StatusPageCurrentStatusActiveIncidentsIncidentTypeSCHEDULEDMAINTENANCE StatusPageCurrentStatusActiveIncidentsIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState.
const (
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateIdentified    StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "identified"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateInvestigating StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "investigating"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateMaintenance   StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "maintenance"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateMonitoring    StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "monitoring"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateNotification  StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "notification"
	StatusPageCurrentStatusActiveIncidentsUpdatesIncidentStateResolved      StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageCurrentStatusComponentsAutoSetStatus.
const (
	StatusPageCurrentStatusComponentsAutoSetStatusDegradedPerformance StatusPageCurrentStatusComponentsAutoSetStatus = "degraded-performance"
	StatusPageCurrentStatusComponentsAutoSetStatusMajorOutage         StatusPageCurrentStatusComponentsAutoSetStatus = "major-outage"
	StatusPageCurrentStatusComponentsAutoSetStatusPartialOutage       StatusPageCurrentStatusComponentsAutoSetStatus = "partial-outage"
	StatusPageCurrentStatusComponentsAutoSetStatusUnderMaintenance    StatusPageCurrentStatusComponentsAutoSetStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusComponentsStatus.
const (
	StatusPageCurrentStatusComponentsStatusDegradedPerformance StatusPageCurrentStatusComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusComponentsStatusMajorOutage         StatusPageCurrentStatusComponentsStatus = "major-outage"
	StatusPageCurrentStatusComponentsStatusOperational         StatusPageCurrentStatusComponentsStatus = "operational"
	StatusPageCurrentStatusComponentsStatusPartialOutage       StatusPageCurrentStatusComponentsStatus = "partial-outage"
	StatusPageCurrentStatusComponentsStatusUnderMaintenance    StatusPageCurrentStatusComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusPageType.
const (
	StatusPageCurrentStatusPageTypeINTERNAL  StatusPageCurrentStatusPageType = "INTERNAL"
	StatusPageCurrentStatusPageTypePUBLIC    StatusPageCurrentStatusPageType = "PUBLIC"
	StatusPageCurrentStatusPageTypePUBLICSLA StatusPageCurrentStatusPageType = "PUBLIC_SLA"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus.
const (
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusDegradedPerformance StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "degraded-performance"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusMajorOutage         StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "major-outage"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusPartialOutage       StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "partial-outage"
	StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatusUnderMaintenance    StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceIncidentType.
const (
	StatusPageCurrentStatusUpcomingMaintenanceIncidentTypeINCIDENT             StatusPageCurrentStatusUpcomingMaintenanceIncidentType = "INCIDENT"
	StatusPageCurrentStatusUpcomingMaintenanceIncidentTypeSCHEDULEDMAINTENANCE StatusPageCurrentStatusUpcomingMaintenanceIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState.
const (
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateIdentified    StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "identified"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateInvestigating StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "investigating"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateMaintenance   StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "maintenance"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateMonitoring    StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "monitoring"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateNotification  StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "notification"
	StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentStateResolved      StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageCurrentStatusVisibilityLevel.
const (
	StatusPageCurrentStatusVisibilityLevelEXTERNALUSERS StatusPageCurrentStatusVisibilityLevel = "EXTERNAL_USERS"
	StatusPageCurrentStatusVisibilityLevelPUBLIC        StatusPageCurrentStatusVisibilityLevel = "PUBLIC"
	StatusPageCurrentStatusVisibilityLevelUPTIMEUSERS   StatusPageCurrentStatusVisibilityLevel = "UPTIME_USERS"
)

// Defines values for StatusPageHistoryPageType.
const (
	StatusPageHistoryPageTypeINTERNAL  StatusPageHistoryPageType = "INTERNAL"
	StatusPageHistoryPageTypePUBLIC    StatusPageHistoryPageType = "PUBLIC"
	StatusPageHistoryPageTypePUBLICSLA StatusPageHistoryPageType = "PUBLIC_SLA"
)

// Defines values for StatusPageHistoryPastIncidentsAffectedComponentsStatus.
const (
	StatusPageHistoryPastIncidentsAffectedComponentsStatusDegradedPerformance StatusPageHistoryPastIncidentsAffectedComponentsStatus = "degraded-performance"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusMajorOutage         StatusPageHistoryPastIncidentsAffectedComponentsStatus = "major-outage"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusPartialOutage       StatusPageHistoryPastIncidentsAffectedComponentsStatus = "partial-outage"
	StatusPageHistoryPastIncidentsAffectedComponentsStatusUnderMaintenance    StatusPageHistoryPastIncidentsAffectedComponentsStatus = "under-maintenance"
)

// Defines values for StatusPageHistoryPastIncidentsIncidentType.
const (
	StatusPageHistoryPastIncidentsIncidentTypeINCIDENT             StatusPageHistoryPastIncidentsIncidentType = "INCIDENT"
	StatusPageHistoryPastIncidentsIncidentTypeSCHEDULEDMAINTENANCE StatusPageHistoryPastIncidentsIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for StatusPageHistoryPastIncidentsUpdatesIncidentState.
const (
	StatusPageHistoryPastIncidentsUpdatesIncidentStateIdentified    StatusPageHistoryPastIncidentsUpdatesIncidentState = "identified"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateInvestigating StatusPageHistoryPastIncidentsUpdatesIncidentState = "investigating"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateMaintenance   StatusPageHistoryPastIncidentsUpdatesIncidentState = "maintenance"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateMonitoring    StatusPageHistoryPastIncidentsUpdatesIncidentState = "monitoring"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateNotification  StatusPageHistoryPastIncidentsUpdatesIncidentState = "notification"
	StatusPageHistoryPastIncidentsUpdatesIncidentStateResolved      StatusPageHistoryPastIncidentsUpdatesIncidentState = "resolved"
)

// Defines values for StatusPageHistoryUptimeCalculationType.
const (
	StatusPageHistoryUptimeCalculationTypeBYCHECKS    StatusPageHistoryUptimeCalculationType = "BY_CHECKS"
	StatusPageHistoryUptimeCalculationTypeBYINCIDENTS StatusPageHistoryUptimeCalculationType = "BY_INCIDENTS"
)

// Defines values for StatusPageHistoryVisibilityLevel.
const (
	StatusPageHistoryVisibilityLevelEXTERNALUSERS StatusPageHistoryVisibilityLevel = "EXTERNAL_USERS"
	StatusPageHistoryVisibilityLevelPUBLIC        StatusPageHistoryVisibilityLevel = "PUBLIC"
	StatusPageHistoryVisibilityLevelUPTIMEUSERS   StatusPageHistoryVisibilityLevel = "UPTIME_USERS"
)

// Defines values for UserAccessLevel.
const (
	UserAccessLevelN10READ  UserAccessLevel = "10-READ"
	UserAccessLevelN30WRITE UserAccessLevel = "30-WRITE"
	UserAccessLevelN50ADMIN UserAccessLevel = "50-ADMIN"
)

// Defines values for UserAccountTimezone.
const (
	AfricaAbidjan               UserAccountTimezone = "Africa/Abidjan"
	AfricaAccra                 UserAccountTimezone = "Africa/Accra"
	AfricaAddisAbaba            UserAccountTimezone = "Africa/Addis_Ababa"
	AfricaAlgiers               UserAccountTimezone = "Africa/Algiers"
	AfricaAsmara                UserAccountTimezone = "Africa/Asmara"
	AfricaBamako                UserAccountTimezone = "Africa/Bamako"
	AfricaBangui                UserAccountTimezone = "Africa/Bangui"
	AfricaBanjul                UserAccountTimezone = "Africa/Banjul"
	AfricaBissau                UserAccountTimezone = "Africa/Bissau"
	AfricaBlantyre              UserAccountTimezone = "Africa/Blantyre"
	AfricaBrazzaville           UserAccountTimezone = "Africa/Brazzaville"
	AfricaBujumbura             UserAccountTimezone = "Africa/Bujumbura"
	AfricaCairo                 UserAccountTimezone = "Africa/Cairo"
	AfricaCasablanca            UserAccountTimezone = "Africa/Casablanca"
	AfricaCeuta                 UserAccountTimezone = "Africa/Ceuta"
	AfricaConakry               UserAccountTimezone = "Africa/Conakry"
	AfricaDakar                 UserAccountTimezone = "Africa/Dakar"
	AfricaDarEsSalaam           UserAccountTimezone = "Africa/Dar_es_Salaam"
	AfricaDjibouti              UserAccountTimezone = "Africa/Djibouti"
	AfricaDouala                UserAccountTimezone = "Africa/Douala"
	AfricaElAaiun               UserAccountTimezone = "Africa/El_Aaiun"
	AfricaFreetown              UserAccountTimezone = "Africa/Freetown"
	AfricaGaborone              UserAccountTimezone = "Africa/Gaborone"
	AfricaHarare                UserAccountTimezone = "Africa/Harare"
	AfricaJohannesburg          UserAccountTimezone = "Africa/Johannesburg"
	AfricaJuba                  UserAccountTimezone = "Africa/Juba"
	AfricaKampala               UserAccountTimezone = "Africa/Kampala"
	AfricaKhartoum              UserAccountTimezone = "Africa/Khartoum"
	AfricaKigali                UserAccountTimezone = "Africa/Kigali"
	AfricaKinshasa              UserAccountTimezone = "Africa/Kinshasa"
	AfricaLagos                 UserAccountTimezone = "Africa/Lagos"
	AfricaLibreville            UserAccountTimezone = "Africa/Libreville"
	AfricaLome                  UserAccountTimezone = "Africa/Lome"
	AfricaLuanda                UserAccountTimezone = "Africa/Luanda"
	AfricaLubumbashi            UserAccountTimezone = "Africa/Lubumbashi"
	AfricaLusaka                UserAccountTimezone = "Africa/Lusaka"
	AfricaMalabo                UserAccountTimezone = "Africa/Malabo"
	AfricaMaputo                UserAccountTimezone = "Africa/Maputo"
	AfricaMaseru                UserAccountTimezone = "Africa/Maseru"
	AfricaMbabane               UserAccountTimezone = "Africa/Mbabane"
	AfricaMogadishu             UserAccountTimezone = "Africa/Mogadishu"
	AfricaMonrovia              UserAccountTimezone = "Africa/Monrovia"
	AfricaNairobi               UserAccountTimezone = "Africa/Nairobi"
	AfricaNdjamena              UserAccountTimezone = "Africa/Ndjamena"
	AfricaNiamey                UserAccountTimezone = "Africa/Niamey"
	AfricaNouakchott            UserAccountTimezone = "Africa/Nouakchott"
	AfricaOuagadougou           UserAccountTimezone = "Africa/Ouagadougou"
	AfricaPortoNovo             UserAccountTimezone = "Africa/Porto-Novo"
	AfricaSaoTome               UserAccountTimezone = "Africa/Sao_Tome"
	AfricaTripoli               UserAccountTimezone = "Africa/Tripoli"
	AfricaTunis                 UserAccountTimezone = "Africa/Tunis"
	AfricaWindhoek              UserAccountTimezone = "Africa/Windhoek"
	AmericaAdak                 UserAccountTimezone = "America/Adak"
	AmericaAnchorage            UserAccountTimezone = "America/Anchorage"
	AmericaAnguilla             UserAccountTimezone = "America/Anguilla"
	AmericaAntigua              UserAccountTimezone = "America/Antigua"
	AmericaAraguaina            UserAccountTimezone = "America/Araguaina"
	AmericaArgentinaBuenosAires UserAccountTimezone = "America/Argentina/Buenos_Aires"
	AmericaArgentinaCatamarca   UserAccountTimezone = "America/Argentina/Catamarca"
	AmericaArgentinaCordoba     UserAccountTimezone = "America/Argentina/Cordoba"
	AmericaArgentinaJujuy       UserAccountTimezone = "America/Argentina/Jujuy"
	AmericaArgentinaLaRioja     UserAccountTimezone = "America/Argentina/La_Rioja"
	AmericaArgentinaMendoza     UserAccountTimezone = "America/Argentina/Mendoza"
	AmericaArgentinaRioGallegos UserAccountTimezone = "America/Argentina/Rio_Gallegos"
	AmericaArgentinaSalta       UserAccountTimezone = "America/Argentina/Salta"
	AmericaArgentinaSanJuan     UserAccountTimezone = "America/Argentina/San_Juan"
	AmericaArgentinaSanLuis     UserAccountTimezone = "America/Argentina/San_Luis"
	AmericaArgentinaTucuman     UserAccountTimezone = "America/Argentina/Tucuman"
	AmericaArgentinaUshuaia     UserAccountTimezone = "America/Argentina/Ushuaia"
	AmericaAruba                UserAccountTimezone = "America/Aruba"
	AmericaAsuncion             UserAccountTimezone = "America/Asuncion"
	AmericaAtikokan             UserAccountTimezone = "America/Atikokan"
	AmericaBahia                UserAccountTimezone = "America/Bahia"
	AmericaBahiaBanderas        UserAccountTimezone = "America/Bahia_Banderas"
	AmericaBarbados             UserAccountTimezone = "America/Barbados"
	AmericaBelem                UserAccountTimezone = "America/Belem"
	AmericaBelize               UserAccountTimezone = "America/Belize"
	AmericaBlancSablon          UserAccountTimezone = "America/Blanc-Sablon"
	AmericaBoaVista             UserAccountTimezone = "America/Boa_Vista"
	AmericaBogota               UserAccountTimezone = "America/Bogota"
	AmericaBoise                UserAccountTimezone = "America/Boise"
	AmericaCambridgeBay         UserAccountTimezone = "America/Cambridge_Bay"
	AmericaCampoGrande          UserAccountTimezone = "America/Campo_Grande"
	AmericaCancun               UserAccountTimezone = "America/Cancun"
	AmericaCaracas              UserAccountTimezone = "America/Caracas"
	AmericaCayenne              UserAccountTimezone = "America/Cayenne"
	AmericaCayman               UserAccountTimezone = "America/Cayman"
	AmericaChicago              UserAccountTimezone = "America/Chicago"
	AmericaChihuahua            UserAccountTimezone = "America/Chihuahua"
	AmericaCostaRica            UserAccountTimezone = "America/Costa_Rica"
	AmericaCreston              UserAccountTimezone = "America/Creston"
	AmericaCuiaba               UserAccountTimezone = "America/Cuiaba"
	AmericaCuracao              UserAccountTimezone = "America/Curacao"
	AmericaDanmarkshavn         UserAccountTimezone = "America/Danmarkshavn"
	AmericaDawson               UserAccountTimezone = "America/Dawson"
	AmericaDawsonCreek          UserAccountTimezone = "America/Dawson_Creek"
	AmericaDenver               UserAccountTimezone = "America/Denver"
	AmericaDetroit              UserAccountTimezone = "America/Detroit"
	AmericaDominica             UserAccountTimezone = "America/Dominica"
	AmericaEdmonton             UserAccountTimezone = "America/Edmonton"
	AmericaEirunepe             UserAccountTimezone = "America/Eirunepe"
	AmericaElSalvador           UserAccountTimezone = "America/El_Salvador"
	AmericaFortNelson           UserAccountTimezone = "America/Fort_Nelson"
	AmericaFortaleza            UserAccountTimezone = "America/Fortaleza"
	AmericaGlaceBay             UserAccountTimezone = "America/Glace_Bay"
	AmericaGooseBay             UserAccountTimezone = "America/Goose_Bay"
	AmericaGrandTurk            UserAccountTimezone = "America/Grand_Turk"
	AmericaGrenada              UserAccountTimezone = "America/Grenada"
	AmericaGuadeloupe           UserAccountTimezone = "America/Guadeloupe"
	AmericaGuatemala            UserAccountTimezone = "America/Guatemala"
	AmericaGuayaquil            UserAccountTimezone = "America/Guayaquil"
	AmericaGuyana               UserAccountTimezone = "America/Guyana"
	AmericaHalifax              UserAccountTimezone = "America/Halifax"
	AmericaHavana               UserAccountTimezone = "America/Havana"
	AmericaHermosillo           UserAccountTimezone = "America/Hermosillo"
	AmericaIndianaIndianapolis  UserAccountTimezone = "America/Indiana/Indianapolis"
	AmericaIndianaKnox          UserAccountTimezone = "America/Indiana/Knox"
	AmericaIndianaMarengo       UserAccountTimezone = "America/Indiana/Marengo"
	AmericaIndianaPetersburg    UserAccountTimezone = "America/Indiana/Petersburg"
	AmericaIndianaTellCity      UserAccountTimezone = "America/Indiana/Tell_City"
	AmericaIndianaVevay         UserAccountTimezone = "America/Indiana/Vevay"
	AmericaIndianaVincennes     UserAccountTimezone = "America/Indiana/Vincennes"
	AmericaIndianaWinamac       UserAccountTimezone = "America/Indiana/Winamac"
	AmericaInuvik               UserAccountTimezone = "America/Inuvik"
	AmericaIqaluit              UserAccountTimezone = "America/Iqaluit"
	AmericaJamaica              UserAccountTimezone = "America/Jamaica"
	AmericaJuneau               UserAccountTimezone = "America/Juneau"
	AmericaKentuckyLouisville   UserAccountTimezone = "America/Kentucky/Louisville"
	AmericaKentuckyMonticello   UserAccountTimezone = "America/Kentucky/Monticello"
	AmericaKralendijk           UserAccountTimezone = "America/Kralendijk"
	AmericaLaPaz                UserAccountTimezone = "America/La_Paz"
	AmericaLima                 UserAccountTimezone = "America/Lima"
	AmericaLosAngeles           UserAccountTimezone = "America/Los_Angeles"
	AmericaLowerPrinces         UserAccountTimezone = "America/Lower_Princes"
	AmericaMaceio               UserAccountTimezone = "America/Maceio"
	AmericaManagua              UserAccountTimezone = "America/Managua"
	AmericaManaus               UserAccountTimezone = "America/Manaus"
	AmericaMarigot              UserAccountTimezone = "America/Marigot"
	AmericaMartinique           UserAccountTimezone = "America/Martinique"
	AmericaMatamoros            UserAccountTimezone = "America/Matamoros"
	AmericaMazatlan             UserAccountTimezone = "America/Mazatlan"
	AmericaMenominee            UserAccountTimezone = "America/Menominee"
	AmericaMerida               UserAccountTimezone = "America/Merida"
	AmericaMetlakatla           UserAccountTimezone = "America/Metlakatla"
	AmericaMexicoCity           UserAccountTimezone = "America/Mexico_City"
	AmericaMiquelon             UserAccountTimezone = "America/Miquelon"
	AmericaMoncton              UserAccountTimezone = "America/Moncton"
	AmericaMonterrey            UserAccountTimezone = "America/Monterrey"
	AmericaMontevideo           UserAccountTimezone = "America/Montevideo"
	AmericaMontserrat           UserAccountTimezone = "America/Montserrat"
	AmericaNassau               UserAccountTimezone = "America/Nassau"
	AmericaNewYork              UserAccountTimezone = "America/New_York"
	AmericaNipigon              UserAccountTimezone = "America/Nipigon"
	AmericaNome                 UserAccountTimezone = "America/Nome"
	AmericaNoronha              UserAccountTimezone = "America/Noronha"
	AmericaNorthDakotaBeulah    UserAccountTimezone = "America/North_Dakota/Beulah"
	AmericaNorthDakotaCenter    UserAccountTimezone = "America/North_Dakota/Center"
	AmericaNorthDakotaNewSalem  UserAccountTimezone = "America/North_Dakota/New_Salem"
	AmericaNuuk                 UserAccountTimezone = "America/Nuuk"
	AmericaOjinaga              UserAccountTimezone = "America/Ojinaga"
	AmericaPanama               UserAccountTimezone = "America/Panama"
	AmericaPangnirtung          UserAccountTimezone = "America/Pangnirtung"
	AmericaParamaribo           UserAccountTimezone = "America/Paramaribo"
	AmericaPhoenix              UserAccountTimezone = "America/Phoenix"
	AmericaPortAuPrince         UserAccountTimezone = "America/Port-au-Prince"
	AmericaPortOfSpain          UserAccountTimezone = "America/Port_of_Spain"
	AmericaPortoVelho           UserAccountTimezone = "America/Porto_Velho"
	AmericaPuertoRico           UserAccountTimezone = "America/Puerto_Rico"
	AmericaPuntaArenas          UserAccountTimezone = "America/Punta_Arenas"
	AmericaRainyRiver           UserAccountTimezone = "America/Rainy_River"
	AmericaRankinInlet          UserAccountTimezone = "America/Rankin_Inlet"
	AmericaRecife               UserAccountTimezone = "America/Recife"
	AmericaRegina               UserAccountTimezone = "America/Regina"
	AmericaResolute             UserAccountTimezone = "America/Resolute"
	AmericaRioBranco            UserAccountTimezone = "America/Rio_Branco"
	AmericaSantarem             UserAccountTimezone = "America/Santarem"
	AmericaSantiago             UserAccountTimezone = "America/Santiago"
	AmericaSantoDomingo         UserAccountTimezone = "America/Santo_Domingo"
	AmericaSaoPaulo             UserAccountTimezone = "America/Sao_Paulo"
	AmericaScoresbysund         UserAccountTimezone = "America/Scoresbysund"
	AmericaSitka                UserAccountTimezone = "America/Sitka"
	AmericaStBarthelemy         UserAccountTimezone = "America/St_Barthelemy"
	AmericaStJohns              UserAccountTimezone = "America/St_Johns"
	AmericaStKitts              UserAccountTimezone = "America/St_Kitts"
	AmericaStLucia              UserAccountTimezone = "America/St_Lucia"
	AmericaStThomas             UserAccountTimezone = "America/St_Thomas"
	AmericaStVincent            UserAccountTimezone = "America/St_Vincent"
	AmericaSwiftCurrent         UserAccountTimezone = "America/Swift_Current"
	AmericaTegucigalpa          UserAccountTimezone = "America/Tegucigalpa"
	AmericaThule                UserAccountTimezone = "America/Thule"
	AmericaThunderBay           UserAccountTimezone = "America/Thunder_Bay"
	AmericaTijuana              UserAccountTimezone = "America/Tijuana"
	AmericaToronto              UserAccountTimezone = "America/Toronto"
	AmericaTortola              UserAccountTimezone = "America/Tortola"
	AmericaVancouver            UserAccountTimezone = "America/Vancouver"
	AmericaWhitehorse           UserAccountTimezone = "America/Whitehorse"
	AmericaWinnipeg             UserAccountTimezone = "America/Winnipeg"
	AmericaYakutat              UserAccountTimezone = "America/Yakutat"
	AmericaYellowknife          UserAccountTimezone = "America/Yellowknife"
	AsiaAden                    UserAccountTimezone = "Asia/Aden"
	AsiaAlmaty                  UserAccountTimezone = "Asia/Almaty"
	AsiaAmman                   UserAccountTimezone = "Asia/Amman"
	AsiaAnadyr                  UserAccountTimezone = "Asia/Anadyr"
	AsiaAqtau                   UserAccountTimezone = "Asia/Aqtau"
	AsiaAqtobe                  UserAccountTimezone = "Asia/Aqtobe"
	AsiaAshgabat                UserAccountTimezone = "Asia/Ashgabat"
	AsiaAtyrau                  UserAccountTimezone = "Asia/Atyrau"
	AsiaBaghdad                 UserAccountTimezone = "Asia/Baghdad"
	AsiaBahrain                 UserAccountTimezone = "Asia/Bahrain"
	AsiaBaku                    UserAccountTimezone = "Asia/Baku"
	AsiaBangkok                 UserAccountTimezone = "Asia/Bangkok"
	AsiaBarnaul                 UserAccountTimezone = "Asia/Barnaul"
	AsiaBeirut                  UserAccountTimezone = "Asia/Beirut"
	AsiaBishkek                 UserAccountTimezone = "Asia/Bishkek"
	AsiaBrunei                  UserAccountTimezone = "Asia/Brunei"
	AsiaChita                   UserAccountTimezone = "Asia/Chita"
	AsiaChoibalsan              UserAccountTimezone = "Asia/Choibalsan"
	AsiaColombo                 UserAccountTimezone = "Asia/Colombo"
	AsiaDamascus                UserAccountTimezone = "Asia/Damascus"
	AsiaDhaka                   UserAccountTimezone = "Asia/Dhaka"
	AsiaDili                    UserAccountTimezone = "Asia/Dili"
	AsiaDubai                   UserAccountTimezone = "Asia/Dubai"
	AsiaDushanbe                UserAccountTimezone = "Asia/Dushanbe"
	AsiaFamagusta               UserAccountTimezone = "Asia/Famagusta"
	AsiaGaza                    UserAccountTimezone = "Asia/Gaza"
	AsiaHebron                  UserAccountTimezone = "Asia/Hebron"
	AsiaHoChiMinh               UserAccountTimezone = "Asia/Ho_Chi_Minh"
	AsiaHongKong                UserAccountTimezone = "Asia/Hong_Kong"
	AsiaHovd                    UserAccountTimezone = "Asia/Hovd"
	AsiaIrkutsk                 UserAccountTimezone = "Asia/Irkutsk"
	AsiaJakarta                 UserAccountTimezone = "Asia/Jakarta"
	AsiaJayapura                UserAccountTimezone = "Asia/Jayapura"
	AsiaJerusalem               UserAccountTimezone = "Asia/Jerusalem"
	AsiaKabul                   UserAccountTimezone = "Asia/Kabul"
	AsiaKamchatka               UserAccountTimezone = "Asia/Kamchatka"
	AsiaKarachi                 UserAccountTimezone = "Asia/Karachi"
	AsiaKathmandu               UserAccountTimezone = "Asia/Kathmandu"
	AsiaKhandyga                UserAccountTimezone = "Asia/Khandyga"
	AsiaKolkata                 UserAccountTimezone = "Asia/Kolkata"
	AsiaKrasnoyarsk             UserAccountTimezone = "Asia/Krasnoyarsk"
	AsiaKualaLumpur             UserAccountTimezone = "Asia/Kuala_Lumpur"
	AsiaKuching                 UserAccountTimezone = "Asia/Kuching"
	AsiaKuwait                  UserAccountTimezone = "Asia/Kuwait"
	AsiaMacau                   UserAccountTimezone = "Asia/Macau"
	AsiaMagadan                 UserAccountTimezone = "Asia/Magadan"
	AsiaMakassar                UserAccountTimezone = "Asia/Makassar"
	AsiaManila                  UserAccountTimezone = "Asia/Manila"
	AsiaMuscat                  UserAccountTimezone = "Asia/Muscat"
	AsiaNicosia                 UserAccountTimezone = "Asia/Nicosia"
	AsiaNovokuznetsk            UserAccountTimezone = "Asia/Novokuznetsk"
	AsiaNovosibirsk             UserAccountTimezone = "Asia/Novosibirsk"
	AsiaOmsk                    UserAccountTimezone = "Asia/Omsk"
	AsiaOral                    UserAccountTimezone = "Asia/Oral"
	AsiaPhnomPenh               UserAccountTimezone = "Asia/Phnom_Penh"
	AsiaPontianak               UserAccountTimezone = "Asia/Pontianak"
	AsiaPyongyang               UserAccountTimezone = "Asia/Pyongyang"
	AsiaQatar                   UserAccountTimezone = "Asia/Qatar"
	AsiaQostanay                UserAccountTimezone = "Asia/Qostanay"
	AsiaQyzylorda               UserAccountTimezone = "Asia/Qyzylorda"
	AsiaRiyadh                  UserAccountTimezone = "Asia/Riyadh"
	AsiaSakhalin                UserAccountTimezone = "Asia/Sakhalin"
	AsiaSamarkand               UserAccountTimezone = "Asia/Samarkand"
	AsiaSeoul                   UserAccountTimezone = "Asia/Seoul"
	AsiaShanghai                UserAccountTimezone = "Asia/Shanghai"
	AsiaSingapore               UserAccountTimezone = "Asia/Singapore"
	AsiaSrednekolymsk           UserAccountTimezone = "Asia/Srednekolymsk"
	AsiaTaipei                  UserAccountTimezone = "Asia/Taipei"
	AsiaTashkent                UserAccountTimezone = "Asia/Tashkent"
	AsiaTbilisi                 UserAccountTimezone = "Asia/Tbilisi"
	AsiaTehran                  UserAccountTimezone = "Asia/Tehran"
	AsiaThimphu                 UserAccountTimezone = "Asia/Thimphu"
	AsiaTokyo                   UserAccountTimezone = "Asia/Tokyo"
	AsiaTomsk                   UserAccountTimezone = "Asia/Tomsk"
	AsiaUlaanbaatar             UserAccountTimezone = "Asia/Ulaanbaatar"
	AsiaUrumqi                  UserAccountTimezone = "Asia/Urumqi"
	AsiaUstNera                 UserAccountTimezone = "Asia/Ust-Nera"
	AsiaVientiane               UserAccountTimezone = "Asia/Vientiane"
	AsiaVladivostok             UserAccountTimezone = "Asia/Vladivostok"
	AsiaYakutsk                 UserAccountTimezone = "Asia/Yakutsk"
	AsiaYangon                  UserAccountTimezone = "Asia/Yangon"
	AsiaYekaterinburg           UserAccountTimezone = "Asia/Yekaterinburg"
	AsiaYerevan                 UserAccountTimezone = "Asia/Yerevan"
	AtlanticAzores              UserAccountTimezone = "Atlantic/Azores"
	AtlanticBermuda             UserAccountTimezone = "Atlantic/Bermuda"
	AtlanticCanary              UserAccountTimezone = "Atlantic/Canary"
	AtlanticCapeVerde           UserAccountTimezone = "Atlantic/Cape_Verde"
	AtlanticFaroe               UserAccountTimezone = "Atlantic/Faroe"
	AtlanticMadeira             UserAccountTimezone = "Atlantic/Madeira"
	AtlanticReykjavik           UserAccountTimezone = "Atlantic/Reykjavik"
	AtlanticSouthGeorgia        UserAccountTimezone = "Atlantic/South_Georgia"
	AtlanticStHelena            UserAccountTimezone = "Atlantic/St_Helena"
	AtlanticStanley             UserAccountTimezone = "Atlantic/Stanley"
	AustraliaAdelaide           UserAccountTimezone = "Australia/Adelaide"
	AustraliaBrisbane           UserAccountTimezone = "Australia/Brisbane"
	AustraliaBrokenHill         UserAccountTimezone = "Australia/Broken_Hill"
	AustraliaDarwin             UserAccountTimezone = "Australia/Darwin"
	AustraliaEucla              UserAccountTimezone = "Australia/Eucla"
	AustraliaHobart             UserAccountTimezone = "Australia/Hobart"
	AustraliaLindeman           UserAccountTimezone = "Australia/Lindeman"
	AustraliaLordHowe           UserAccountTimezone = "Australia/Lord_Howe"
	AustraliaMelbourne          UserAccountTimezone = "Australia/Melbourne"
	AustraliaPerth              UserAccountTimezone = "Australia/Perth"
	AustraliaSydney             UserAccountTimezone = "Australia/Sydney"
	EuropeAmsterdam             UserAccountTimezone = "Europe/Amsterdam"
	EuropeAndorra               UserAccountTimezone = "Europe/Andorra"
	EuropeAstrakhan             UserAccountTimezone = "Europe/Astrakhan"
	EuropeAthens                UserAccountTimezone = "Europe/Athens"
	EuropeBelgrade              UserAccountTimezone = "Europe/Belgrade"
	EuropeBerlin                UserAccountTimezone = "Europe/Berlin"
	EuropeBratislava            UserAccountTimezone = "Europe/Bratislava"
	EuropeBrussels              UserAccountTimezone = "Europe/Brussels"
	EuropeBucharest             UserAccountTimezone = "Europe/Bucharest"
	EuropeBudapest              UserAccountTimezone = "Europe/Budapest"
	EuropeBusingen              UserAccountTimezone = "Europe/Busingen"
	EuropeChisinau              UserAccountTimezone = "Europe/Chisinau"
	EuropeCopenhagen            UserAccountTimezone = "Europe/Copenhagen"
	EuropeDublin                UserAccountTimezone = "Europe/Dublin"
	EuropeGibraltar             UserAccountTimezone = "Europe/Gibraltar"
	EuropeGuernsey              UserAccountTimezone = "Europe/Guernsey"
	EuropeHelsinki              UserAccountTimezone = "Europe/Helsinki"
	EuropeIsleOfMan             UserAccountTimezone = "Europe/Isle_of_Man"
	EuropeIstanbul              UserAccountTimezone = "Europe/Istanbul"
	EuropeJersey                UserAccountTimezone = "Europe/Jersey"
	EuropeKaliningrad           UserAccountTimezone = "Europe/Kaliningrad"
	EuropeKiev                  UserAccountTimezone = "Europe/Kiev"
	EuropeKirov                 UserAccountTimezone = "Europe/Kirov"
	EuropeLisbon                UserAccountTimezone = "Europe/Lisbon"
	EuropeLjubljana             UserAccountTimezone = "Europe/Ljubljana"
	EuropeLondon                UserAccountTimezone = "Europe/London"
	EuropeLuxembourg            UserAccountTimezone = "Europe/Luxembourg"
	EuropeMadrid                UserAccountTimezone = "Europe/Madrid"
	EuropeMalta                 UserAccountTimezone = "Europe/Malta"
	EuropeMariehamn             UserAccountTimezone = "Europe/Mariehamn"
	EuropeMinsk                 UserAccountTimezone = "Europe/Minsk"
	EuropeMonaco                UserAccountTimezone = "Europe/Monaco"
	EuropeMoscow                UserAccountTimezone = "Europe/Moscow"
	EuropeOslo                  UserAccountTimezone = "Europe/Oslo"
	EuropeParis                 UserAccountTimezone = "Europe/Paris"
	EuropePodgorica             UserAccountTimezone = "Europe/Podgorica"
	EuropePrague                UserAccountTimezone = "Europe/Prague"
	EuropeRiga                  UserAccountTimezone = "Europe/Riga"
	EuropeRome                  UserAccountTimezone = "Europe/Rome"
	EuropeSamara                UserAccountTimezone = "Europe/Samara"
	EuropeSanMarino             UserAccountTimezone = "Europe/San_Marino"
	EuropeSarajevo              UserAccountTimezone = "Europe/Sarajevo"
	EuropeSaratov               UserAccountTimezone = "Europe/Saratov"
	EuropeSimferopol            UserAccountTimezone = "Europe/Simferopol"
	EuropeSkopje                UserAccountTimezone = "Europe/Skopje"
	EuropeSofia                 UserAccountTimezone = "Europe/Sofia"
	EuropeStockholm             UserAccountTimezone = "Europe/Stockholm"
	EuropeTallinn               UserAccountTimezone = "Europe/Tallinn"
	EuropeTirane                UserAccountTimezone = "Europe/Tirane"
	EuropeUlyanovsk             UserAccountTimezone = "Europe/Ulyanovsk"
	EuropeUzhgorod              UserAccountTimezone = "Europe/Uzhgorod"
	EuropeVaduz                 UserAccountTimezone = "Europe/Vaduz"
	EuropeVatican               UserAccountTimezone = "Europe/Vatican"
	EuropeVienna                UserAccountTimezone = "Europe/Vienna"
	EuropeVilnius               UserAccountTimezone = "Europe/Vilnius"
	EuropeVolgograd             UserAccountTimezone = "Europe/Volgograd"
	EuropeWarsaw                UserAccountTimezone = "Europe/Warsaw"
	EuropeZagreb                UserAccountTimezone = "Europe/Zagreb"
	EuropeZaporozhye            UserAccountTimezone = "Europe/Zaporozhye"
	EuropeZurich                UserAccountTimezone = "Europe/Zurich"
	GMT                         UserAccountTimezone = "GMT"
	IndianAntananarivo          UserAccountTimezone = "Indian/Antananarivo"
	IndianChagos                UserAccountTimezone = "Indian/Chagos"
	IndianChristmas             UserAccountTimezone = "Indian/Christmas"
	IndianCocos                 UserAccountTimezone = "Indian/Cocos"
	IndianComoro                UserAccountTimezone = "Indian/Comoro"
	IndianKerguelen             UserAccountTimezone = "Indian/Kerguelen"
	IndianMahe                  UserAccountTimezone = "Indian/Mahe"
	IndianMaldives              UserAccountTimezone = "Indian/Maldives"
	IndianMauritius             UserAccountTimezone = "Indian/Mauritius"
	IndianMayotte               UserAccountTimezone = "Indian/Mayotte"
	IndianReunion               UserAccountTimezone = "Indian/Reunion"
	PacificApia                 UserAccountTimezone = "Pacific/Apia"
	PacificAuckland             UserAccountTimezone = "Pacific/Auckland"
	PacificBougainville         UserAccountTimezone = "Pacific/Bougainville"
	PacificChatham              UserAccountTimezone = "Pacific/Chatham"
	PacificChuuk                UserAccountTimezone = "Pacific/Chuuk"
	PacificEaster               UserAccountTimezone = "Pacific/Easter"
	PacificEfate                UserAccountTimezone = "Pacific/Efate"
	PacificFakaofo              UserAccountTimezone = "Pacific/Fakaofo"
	PacificFiji                 UserAccountTimezone = "Pacific/Fiji"
	PacificFunafuti             UserAccountTimezone = "Pacific/Funafuti"
	PacificGalapagos            UserAccountTimezone = "Pacific/Galapagos"
	PacificGambier              UserAccountTimezone = "Pacific/Gambier"
	PacificGuadalcanal          UserAccountTimezone = "Pacific/Guadalcanal"
	PacificGuam                 UserAccountTimezone = "Pacific/Guam"
	PacificHonolulu             UserAccountTimezone = "Pacific/Honolulu"
	PacificKanton               UserAccountTimezone = "Pacific/Kanton"
	PacificKiritimati           UserAccountTimezone = "Pacific/Kiritimati"
	PacificKosrae               UserAccountTimezone = "Pacific/Kosrae"
	PacificKwajalein            UserAccountTimezone = "Pacific/Kwajalein"
	PacificMajuro               UserAccountTimezone = "Pacific/Majuro"
	PacificMarquesas            UserAccountTimezone = "Pacific/Marquesas"
	PacificMidway               UserAccountTimezone = "Pacific/Midway"
	PacificNauru                UserAccountTimezone = "Pacific/Nauru"
	PacificNiue                 UserAccountTimezone = "Pacific/Niue"
	PacificNorfolk              UserAccountTimezone = "Pacific/Norfolk"
	PacificNoumea               UserAccountTimezone = "Pacific/Noumea"
	PacificPagoPago             UserAccountTimezone = "Pacific/Pago_Pago"
	PacificPalau                UserAccountTimezone = "Pacific/Palau"
	PacificPitcairn             UserAccountTimezone = "Pacific/Pitcairn"
	PacificPohnpei              UserAccountTimezone = "Pacific/Pohnpei"
	PacificPortMoresby          UserAccountTimezone = "Pacific/Port_Moresby"
	PacificRarotonga            UserAccountTimezone = "Pacific/Rarotonga"
	PacificSaipan               UserAccountTimezone = "Pacific/Saipan"
	PacificTahiti               UserAccountTimezone = "Pacific/Tahiti"
	PacificTarawa               UserAccountTimezone = "Pacific/Tarawa"
	PacificTongatapu            UserAccountTimezone = "Pacific/Tongatapu"
	PacificWake                 UserAccountTimezone = "Pacific/Wake"
	PacificWallis               UserAccountTimezone = "Pacific/Wallis"
	USAlaska                    UserAccountTimezone = "US/Alaska"
	USArizona                   UserAccountTimezone = "US/Arizona"
	USCentral                   UserAccountTimezone = "US/Central"
	USEastern                   UserAccountTimezone = "US/Eastern"
	USHawaii                    UserAccountTimezone = "US/Hawaii"
	USMountain                  UserAccountTimezone = "US/Mountain"
	USPacific                   UserAccountTimezone = "US/Pacific"
)

// Defines values for UserRequireTwoFactor.
const (
	ACCOUNTDEFAULT UserRequireTwoFactor = "ACCOUNT_DEFAULT"
	DONOTREQUIRE   UserRequireTwoFactor = "DO_NOT_REQUIRE"
	REQUIRE        UserRequireTwoFactor = "REQUIRE"
)

// Defines values for GetAlertlistParamsOrdering.
const (
	GetAlertlistParamsOrderingCreatedAt      GetAlertlistParamsOrdering = "created_at"
	GetAlertlistParamsOrderingMinusCreatedAt GetAlertlistParamsOrdering = "-created_at"
)

// Defines values for GetAlertlistParamsCheckMonitoringServiceType.
const (
	GetAlertlistParamsCheckMonitoringServiceTypeAPI         GetAlertlistParamsCheckMonitoringServiceType = "API"
	GetAlertlistParamsCheckMonitoringServiceTypeBLACKLIST   GetAlertlistParamsCheckMonitoringServiceType = "BLACKLIST"
	GetAlertlistParamsCheckMonitoringServiceTypeDNS         GetAlertlistParamsCheckMonitoringServiceType = "DNS"
	GetAlertlistParamsCheckMonitoringServiceTypeGROUP       GetAlertlistParamsCheckMonitoringServiceType = "GROUP"
	GetAlertlistParamsCheckMonitoringServiceTypeHEARTBEAT   GetAlertlistParamsCheckMonitoringServiceType = "HEARTBEAT"
	GetAlertlistParamsCheckMonitoringServiceTypeHTTP        GetAlertlistParamsCheckMonitoringServiceType = "HTTP"
	GetAlertlistParamsCheckMonitoringServiceTypeICMP        GetAlertlistParamsCheckMonitoringServiceType = "ICMP"
	GetAlertlistParamsCheckMonitoringServiceTypeIMAP        GetAlertlistParamsCheckMonitoringServiceType = "IMAP"
	GetAlertlistParamsCheckMonitoringServiceTypeMALWARE     GetAlertlistParamsCheckMonitoringServiceType = "MALWARE"
	GetAlertlistParamsCheckMonitoringServiceTypeNTP         GetAlertlistParamsCheckMonitoringServiceType = "NTP"
	GetAlertlistParamsCheckMonitoringServiceTypePAGESPEED   GetAlertlistParamsCheckMonitoringServiceType = "PAGESPEED"
	GetAlertlistParamsCheckMonitoringServiceTypePOP         GetAlertlistParamsCheckMonitoringServiceType = "POP"
	GetAlertlistParamsCheckMonitoringServiceTypeRUM         GetAlertlistParamsCheckMonitoringServiceType = "RUM"
	GetAlertlistParamsCheckMonitoringServiceTypeRUM2        GetAlertlistParamsCheckMonitoringServiceType = "RUM2"
	GetAlertlistParamsCheckMonitoringServiceTypeSMTP        GetAlertlistParamsCheckMonitoringServiceType = "SMTP"
	GetAlertlistParamsCheckMonitoringServiceTypeSSH         GetAlertlistParamsCheckMonitoringServiceType = "SSH"
	GetAlertlistParamsCheckMonitoringServiceTypeSSLCERT     GetAlertlistParamsCheckMonitoringServiceType = "SSL_CERT"
	GetAlertlistParamsCheckMonitoringServiceTypeTCP         GetAlertlistParamsCheckMonitoringServiceType = "TCP"
	GetAlertlistParamsCheckMonitoringServiceTypeTRANSACTION GetAlertlistParamsCheckMonitoringServiceType = "TRANSACTION"
	GetAlertlistParamsCheckMonitoringServiceTypeUDP         GetAlertlistParamsCheckMonitoringServiceType = "UDP"
	GetAlertlistParamsCheckMonitoringServiceTypeWEBHOOK     GetAlertlistParamsCheckMonitoringServiceType = "WEBHOOK"
	GetAlertlistParamsCheckMonitoringServiceTypeWHOIS       GetAlertlistParamsCheckMonitoringServiceType = "WHOIS"
)

// Defines values for GetServicetaglistParamsOrdering.
const (
	GetServicetaglistParamsOrderingMinusPk  GetServicetaglistParamsOrdering = "-pk"
	GetServicetaglistParamsOrderingMinusTag GetServicetaglistParamsOrdering = "-tag"
	GetServicetaglistParamsOrderingPk       GetServicetaglistParamsOrdering = "pk"
	GetServicetaglistParamsOrderingTag      GetServicetaglistParamsOrdering = "tag"
)

// Defines values for GetServicelistParamsOrdering.
const (
	GetServicelistParamsOrderingAddress                    GetServicelistParamsOrdering = "address"
	GetServicelistParamsOrderingCreatedAt                  GetServicelistParamsOrdering = "created_at"
	GetServicelistParamsOrderingMinusAddress               GetServicelistParamsOrdering = "-address"
	GetServicelistParamsOrderingMinusCreatedAt             GetServicelistParamsOrdering = "-created_at"
	GetServicelistParamsOrderingMinusMonitoringServiceType GetServicelistParamsOrdering = "-monitoring_service_type"
	GetServicelistParamsOrderingMinusName                  GetServicelistParamsOrdering = "-name"
	GetServicelistParamsOrderingMinusPk                    GetServicelistParamsOrdering = "-pk"
	GetServicelistParamsOrderingMonitoringServiceType      GetServicelistParamsOrdering = "monitoring_service_type"
	GetServicelistParamsOrderingName                       GetServicelistParamsOrdering = "name"
	GetServicelistParamsOrderingPk                         GetServicelistParamsOrdering = "pk"
)

// Defines values for GetServicelistParamsMonitoringServiceType.
const (
	GetServicelistParamsMonitoringServiceTypeAPI         GetServicelistParamsMonitoringServiceType = "API"
	GetServicelistParamsMonitoringServiceTypeBLACKLIST   GetServicelistParamsMonitoringServiceType = "BLACKLIST"
	GetServicelistParamsMonitoringServiceTypeDNS         GetServicelistParamsMonitoringServiceType = "DNS"
	GetServicelistParamsMonitoringServiceTypeGROUP       GetServicelistParamsMonitoringServiceType = "GROUP"
	GetServicelistParamsMonitoringServiceTypeHEARTBEAT   GetServicelistParamsMonitoringServiceType = "HEARTBEAT"
	GetServicelistParamsMonitoringServiceTypeHTTP        GetServicelistParamsMonitoringServiceType = "HTTP"
	GetServicelistParamsMonitoringServiceTypeICMP        GetServicelistParamsMonitoringServiceType = "ICMP"
	GetServicelistParamsMonitoringServiceTypeIMAP        GetServicelistParamsMonitoringServiceType = "IMAP"
	GetServicelistParamsMonitoringServiceTypeMALWARE     GetServicelistParamsMonitoringServiceType = "MALWARE"
	GetServicelistParamsMonitoringServiceTypeNTP         GetServicelistParamsMonitoringServiceType = "NTP"
	GetServicelistParamsMonitoringServiceTypePAGESPEED   GetServicelistParamsMonitoringServiceType = "PAGESPEED"
	GetServicelistParamsMonitoringServiceTypePOP         GetServicelistParamsMonitoringServiceType = "POP"
	GetServicelistParamsMonitoringServiceTypeRUM         GetServicelistParamsMonitoringServiceType = "RUM"
	GetServicelistParamsMonitoringServiceTypeRUM2        GetServicelistParamsMonitoringServiceType = "RUM2"
	GetServicelistParamsMonitoringServiceTypeSMTP        GetServicelistParamsMonitoringServiceType = "SMTP"
	GetServicelistParamsMonitoringServiceTypeSSH         GetServicelistParamsMonitoringServiceType = "SSH"
	GetServicelistParamsMonitoringServiceTypeSSLCERT     GetServicelistParamsMonitoringServiceType = "SSL_CERT"
	GetServicelistParamsMonitoringServiceTypeTCP         GetServicelistParamsMonitoringServiceType = "TCP"
	GetServicelistParamsMonitoringServiceTypeTRANSACTION GetServicelistParamsMonitoringServiceType = "TRANSACTION"
	GetServicelistParamsMonitoringServiceTypeUDP         GetServicelistParamsMonitoringServiceType = "UDP"
	GetServicelistParamsMonitoringServiceTypeWEBHOOK     GetServicelistParamsMonitoringServiceType = "WEBHOOK"
	GetServicelistParamsMonitoringServiceTypeWHOIS       GetServicelistParamsMonitoringServiceType = "WHOIS"
)

// Defines values for GetContactgrouplistParamsOrdering.
const (
	GetContactgrouplistParamsOrderingCreatedAt      GetContactgrouplistParamsOrdering = "created_at"
	GetContactgrouplistParamsOrderingMinusCreatedAt GetContactgrouplistParamsOrdering = "-created_at"
	GetContactgrouplistParamsOrderingMinusName      GetContactgrouplistParamsOrdering = "-name"
	GetContactgrouplistParamsOrderingMinusPk        GetContactgrouplistParamsOrdering = "-pk"
	GetContactgrouplistParamsOrderingName           GetContactgrouplistParamsOrdering = "name"
	GetContactgrouplistParamsOrderingPk             GetContactgrouplistParamsOrdering = "pk"
)

// Defines values for GetDashboardlistParamsOrdering.
const (
	GetDashboardlistParamsOrderingMinusName     GetDashboardlistParamsOrdering = "-name"
	GetDashboardlistParamsOrderingMinusOrdering GetDashboardlistParamsOrdering = "-ordering"
	GetDashboardlistParamsOrderingMinusPk       GetDashboardlistParamsOrdering = "-pk"
	GetDashboardlistParamsOrderingName          GetDashboardlistParamsOrdering = "name"
	GetDashboardlistParamsOrderingOrdering      GetDashboardlistParamsOrdering = "ordering"
	GetDashboardlistParamsOrderingPk            GetDashboardlistParamsOrdering = "pk"
)

// Defines values for GetIntegrationlistParamsOrdering.
const (
	GetIntegrationlistParamsOrderingMinusModule GetIntegrationlistParamsOrdering = "-module"
	GetIntegrationlistParamsOrderingMinusName   GetIntegrationlistParamsOrdering = "-name"
	GetIntegrationlistParamsOrderingMinusPk     GetIntegrationlistParamsOrdering = "-pk"
	GetIntegrationlistParamsOrderingModule      GetIntegrationlistParamsOrdering = "module"
	GetIntegrationlistParamsOrderingName        GetIntegrationlistParamsOrdering = "name"
	GetIntegrationlistParamsOrderingPk          GetIntegrationlistParamsOrdering = "pk"
)

// Defines values for GetIntegrationlistParamsModule.
const (
	Cachet          GetIntegrationlistParamsModule = "cachet"
	Datadog         GetIntegrationlistParamsModule = "datadog"
	Geckoboard      GetIntegrationlistParamsModule = "geckoboard"
	Jiraservicedesk GetIntegrationlistParamsModule = "jiraservicedesk"
	Klipfolio       GetIntegrationlistParamsModule = "klipfolio"
	Librato         GetIntegrationlistParamsModule = "librato"
	MicrosoftTeams  GetIntegrationlistParamsModule = "microsoft_teams"
	Opsgenie        GetIntegrationlistParamsModule = "opsgenie"
	Pagerduty       GetIntegrationlistParamsModule = "pagerduty"
	Pushbullet      GetIntegrationlistParamsModule = "pushbullet"
	Pushover        GetIntegrationlistParamsModule = "pushover"
	Slack           GetIntegrationlistParamsModule = "slack"
	Status          GetIntegrationlistParamsModule = "status"
	Statuspage      GetIntegrationlistParamsModule = "statuspage"
	Twitter         GetIntegrationlistParamsModule = "twitter"
	Victorops       GetIntegrationlistParamsModule = "victorops"
	Wavefront       GetIntegrationlistParamsModule = "wavefront"
	Webhook         GetIntegrationlistParamsModule = "webhook"
	Zapier          GetIntegrationlistParamsModule = "zapier"
)

// Defines values for GetOutagelistParamsOrdering.
const (
	GetOutagelistParamsOrderingCreatedAt      GetOutagelistParamsOrdering = "created_at"
	GetOutagelistParamsOrderingMinusCreatedAt GetOutagelistParamsOrdering = "-created_at"
)

// Defines values for GetOutagelistParamsCheckMonitoringServiceType.
const (
	GetOutagelistParamsCheckMonitoringServiceTypeAPI         GetOutagelistParamsCheckMonitoringServiceType = "API"
	GetOutagelistParamsCheckMonitoringServiceTypeBLACKLIST   GetOutagelistParamsCheckMonitoringServiceType = "BLACKLIST"
	GetOutagelistParamsCheckMonitoringServiceTypeDNS         GetOutagelistParamsCheckMonitoringServiceType = "DNS"
	GetOutagelistParamsCheckMonitoringServiceTypeGROUP       GetOutagelistParamsCheckMonitoringServiceType = "GROUP"
	GetOutagelistParamsCheckMonitoringServiceTypeHEARTBEAT   GetOutagelistParamsCheckMonitoringServiceType = "HEARTBEAT"
	GetOutagelistParamsCheckMonitoringServiceTypeHTTP        GetOutagelistParamsCheckMonitoringServiceType = "HTTP"
	GetOutagelistParamsCheckMonitoringServiceTypeICMP        GetOutagelistParamsCheckMonitoringServiceType = "ICMP"
	GetOutagelistParamsCheckMonitoringServiceTypeIMAP        GetOutagelistParamsCheckMonitoringServiceType = "IMAP"
	GetOutagelistParamsCheckMonitoringServiceTypeMALWARE     GetOutagelistParamsCheckMonitoringServiceType = "MALWARE"
	GetOutagelistParamsCheckMonitoringServiceTypeNTP         GetOutagelistParamsCheckMonitoringServiceType = "NTP"
	GetOutagelistParamsCheckMonitoringServiceTypePAGESPEED   GetOutagelistParamsCheckMonitoringServiceType = "PAGESPEED"
	GetOutagelistParamsCheckMonitoringServiceTypePOP         GetOutagelistParamsCheckMonitoringServiceType = "POP"
	GetOutagelistParamsCheckMonitoringServiceTypeRUM         GetOutagelistParamsCheckMonitoringServiceType = "RUM"
	GetOutagelistParamsCheckMonitoringServiceTypeRUM2        GetOutagelistParamsCheckMonitoringServiceType = "RUM2"
	GetOutagelistParamsCheckMonitoringServiceTypeSMTP        GetOutagelistParamsCheckMonitoringServiceType = "SMTP"
	GetOutagelistParamsCheckMonitoringServiceTypeSSH         GetOutagelistParamsCheckMonitoringServiceType = "SSH"
	GetOutagelistParamsCheckMonitoringServiceTypeSSLCERT     GetOutagelistParamsCheckMonitoringServiceType = "SSL_CERT"
	GetOutagelistParamsCheckMonitoringServiceTypeTCP         GetOutagelistParamsCheckMonitoringServiceType = "TCP"
	GetOutagelistParamsCheckMonitoringServiceTypeTRANSACTION GetOutagelistParamsCheckMonitoringServiceType = "TRANSACTION"
	GetOutagelistParamsCheckMonitoringServiceTypeUDP         GetOutagelistParamsCheckMonitoringServiceType = "UDP"
	GetOutagelistParamsCheckMonitoringServiceTypeWEBHOOK     GetOutagelistParamsCheckMonitoringServiceType = "WEBHOOK"
	GetOutagelistParamsCheckMonitoringServiceTypeWHOIS       GetOutagelistParamsCheckMonitoringServiceType = "WHOIS"
)

// Defines values for GetPushnotificationlistParamsOrdering.
const (
	GetPushnotificationlistParamsOrderingCreatedAt        GetPushnotificationlistParamsOrdering = "created_at"
	GetPushnotificationlistParamsOrderingDisplayName      GetPushnotificationlistParamsOrdering = "display_name"
	GetPushnotificationlistParamsOrderingMinusCreatedAt   GetPushnotificationlistParamsOrdering = "-created_at"
	GetPushnotificationlistParamsOrderingMinusDisplayName GetPushnotificationlistParamsOrdering = "-display_name"
	GetPushnotificationlistParamsOrderingMinusPk          GetPushnotificationlistParamsOrdering = "-pk"
	GetPushnotificationlistParamsOrderingPk               GetPushnotificationlistParamsOrdering = "pk"
)

// Defines values for GetScheduledreportlistParamsOrdering.
const (
	GetScheduledreportlistParamsOrderingCreatedAt      GetScheduledreportlistParamsOrdering = "created_at"
	GetScheduledreportlistParamsOrderingMinusCreatedAt GetScheduledreportlistParamsOrdering = "-created_at"
	GetScheduledreportlistParamsOrderingMinusName      GetScheduledreportlistParamsOrdering = "-name"
	GetScheduledreportlistParamsOrderingMinusPk        GetScheduledreportlistParamsOrdering = "-pk"
	GetScheduledreportlistParamsOrderingName           GetScheduledreportlistParamsOrdering = "name"
	GetScheduledreportlistParamsOrderingPk             GetScheduledreportlistParamsOrdering = "pk"
)

// Defines values for GetSlareportlistParamsOrdering.
const (
	GetSlareportlistParamsOrderingCreatedAt      GetSlareportlistParamsOrdering = "created_at"
	GetSlareportlistParamsOrderingMinusCreatedAt GetSlareportlistParamsOrdering = "-created_at"
	GetSlareportlistParamsOrderingMinusName      GetSlareportlistParamsOrdering = "-name"
	GetSlareportlistParamsOrderingMinusPk        GetSlareportlistParamsOrdering = "-pk"
	GetSlareportlistParamsOrderingName           GetSlareportlistParamsOrdering = "name"
	GetSlareportlistParamsOrderingPk             GetSlareportlistParamsOrdering = "pk"
)

// Defines values for GetSlaReportStatsParamsOutput.
const (
	GetSlaReportStatsParamsOutputJson GetSlaReportStatsParamsOutput = "json"
	GetSlaReportStatsParamsOutputPdf  GetSlaReportStatsParamsOutput = "pdf"
	GetSlaReportStatsParamsOutputXls  GetSlaReportStatsParamsOutput = "xls"
)

// Defines values for GetStatuspagelistParamsOrdering.
const (
	GetStatuspagelistParamsOrderingCname      GetStatuspagelistParamsOrdering = "cname"
	GetStatuspagelistParamsOrderingMinusCname GetStatuspagelistParamsOrdering = "-cname"
	GetStatuspagelistParamsOrderingMinusName  GetStatuspagelistParamsOrdering = "-name"
	GetStatuspagelistParamsOrderingMinusPk    GetStatuspagelistParamsOrdering = "-pk"
	GetStatuspagelistParamsOrderingMinusSlug  GetStatuspagelistParamsOrdering = "-slug"
	GetStatuspagelistParamsOrderingName       GetStatuspagelistParamsOrdering = "name"
	GetStatuspagelistParamsOrderingPk         GetStatuspagelistParamsOrdering = "pk"
	GetStatuspagelistParamsOrderingSlug       GetStatuspagelistParamsOrdering = "slug"
)

// Defines values for GetStatuspagelistParamsVisibilityLevel.
const (
	EXTERNALUSERS GetStatuspagelistParamsVisibilityLevel = "EXTERNAL_USERS"
	PUBLIC        GetStatuspagelistParamsVisibilityLevel = "PUBLIC"
	UPTIMEUSERS   GetStatuspagelistParamsVisibilityLevel = "UPTIME_USERS"
)

// Defines values for GetIncidentlistParamsIncidentType.
const (
	INCIDENT             GetIncidentlistParamsIncidentType = "INCIDENT"
	SCHEDULEDMAINTENANCE GetIncidentlistParamsIncidentType = "SCHEDULED_MAINTENANCE"
)

// Defines values for GetIncidentlistParamsOrdering.
const (
	GetIncidentlistParamsOrderingMinusPk       GetIncidentlistParamsOrdering = "-pk"
	GetIncidentlistParamsOrderingMinusStartsAt GetIncidentlistParamsOrdering = "-starts_at"
	GetIncidentlistParamsOrderingPk            GetIncidentlistParamsOrdering = "pk"
	GetIncidentlistParamsOrderingStartsAt      GetIncidentlistParamsOrdering = "starts_at"
)

// Defines values for GetUserlistParamsOrdering.
const (
	Email          GetUserlistParamsOrdering = "email"
	FirstName      GetUserlistParamsOrdering = "first_name"
	LastName       GetUserlistParamsOrdering = "last_name"
	MinusEmail     GetUserlistParamsOrdering = "-email"
	MinusFirstName GetUserlistParamsOrdering = "-first_name"
	MinusLastName  GetUserlistParamsOrdering = "-last_name"
	MinusPk        GetUserlistParamsOrdering = "-pk"
	Pk             GetUserlistParamsOrdering = "pk"
)

// Defines values for GetUserlistParamsAccessLevel.
const (
	GetUserlistParamsAccessLevelN10READ  GetUserlistParamsAccessLevel = "10-READ"
	GetUserlistParamsAccessLevelN30WRITE GetUserlistParamsAccessLevel = "30-WRITE"
	GetUserlistParamsAccessLevelN50ADMIN GetUserlistParamsAccessLevel = "50-ADMIN"
)

// AuthTokenWithTOTP defines model for AuthTokenWithTOTP.
type AuthTokenWithTOTP struct {
	// Code Enter your two-factor authentication (2FA) code from your authenticator.
	Code *int `json:"code,omitempty"`

	// Email Email address for login.
	Email    *string `json:"email,omitempty"`
	Password *string `json:"password,omitempty"`
	Token    *string `json:"token,omitempty"`
}

// BulkChecksAction defines model for BulkChecksAction.
type BulkChecksAction struct {
	Pk *[]int `json:"pk,omitempty"`
}

// CheckContactGroups defines model for CheckContactGroups.
type CheckContactGroups struct {
	// ContactGroups An array of contact group names or IDs to set on this check
	ContactGroups *[]string `json:"contact_groups,omitempty"`
}

// CheckEscalations defines model for CheckEscalations.
type CheckEscalations struct {
	// Escalations A list of escalations to set on this check; see example above.
	Escalations *[]struct {
		ContactGroups []string `json:"contact_groups"`
		WaitTime      int      `json:"wait_time"`
	} `json:"escalations,omitempty"`
}

// CheckLocations defines model for CheckLocations.
type CheckLocations struct {
	// Locations An array of location names to add to this check
	Locations *[]string `json:"locations,omitempty"`
}

// CheckMaintenance defines model for CheckMaintenance.
type CheckMaintenance struct {
	// Schedule The schedule entries for maintenance windows; see example above.
	Schedule *[]struct {
		FromTime      *string                      `json:"from_time"`
		Id            *int                         `json:"id,omitempty"`
		Monthday      *int                         `json:"monthday,omitempty"`
		MonthdayFrom  *int                         `json:"monthday_from,omitempty"`
		MonthdayTo    *int                         `json:"monthday_to,omitempty"`
		OnceEndDate   *time.Time                   `json:"once_end_date"`
		OnceStartDate *time.Time                   `json:"once_start_date"`
		StartDate     *openapi_types.Date          `json:"start_date"`
		ToTime        *string                      `json:"to_time"`
		Type          CheckMaintenanceScheduleType `json:"type"`
		Weekdays      *[]int                       `json:"weekdays,omitempty"`
	} `json:"schedule,omitempty"`

	// State Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
	State *CheckMaintenanceState `json:"state,omitempty"`
}

// CheckMaintenanceScheduleType defines model for CheckMaintenance.Schedule.Type.
type CheckMaintenanceScheduleType string

// CheckMaintenanceState Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
type CheckMaintenanceState string

// CheckStats defines model for CheckStats.
type CheckStats struct {
	AvailableLocations *[]interface{} `json:"available_locations,omitempty"`

	// Download Set this paramater to download an XLS containing the stats.
	Download *bool `json:"download,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *time.Time `json:"end_date,omitempty"`

	// IncludeAlerts Include alert data for each outage in the period.
	IncludeAlerts *bool `json:"include_alerts,omitempty"`

	// Location Show response time for specified location only.
	Location *string `json:"location,omitempty"`

	// LocationsResponseTimes Include response time datapoints for all locations.
	LocationsResponseTimes *bool `json:"locations_response_times,omitempty"`

	// Pdf Set this paramater to download a PDF report.
	Pdf *bool `json:"pdf,omitempty"`
	Pk  *int  `json:"pk,omitempty"`

	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate  *time.Time                `json:"start_date,omitempty"`
	Statistics *[]map[string]interface{} `json:"statistics,omitempty"`
	Totals     *map[string]interface{}   `json:"totals,omitempty"`
}

// CheckTag defines model for CheckTag.
type CheckTag struct {
	// ColorHex The CSS color code of the tag, eg. #334455
	ColorHex string `json:"color_hex"`
	Pk       *int   `json:"pk,omitempty"`

	// Tag The name of this tag
	Tag string  `json:"tag"`
	Url *string `json:"url,omitempty"`
}

// CheckTags defines model for CheckTags.
type CheckTags struct {
	// Tags An array of tags names or IDs to set on this check
	Tags *[]string `json:"tags,omitempty"`
}

// Checks defines model for Checks.
type Checks struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspDnsRecordType          *ChecksMspDnsRecordType    `json:"msp_dns_record_type,omitempty"`
	MspDnsServer              *string                    `json:"msp_dns_server,omitempty"`
	MspEncryption             *ChecksMspEncryption       `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspExpectStringType       *ChecksMspExpectStringType `json:"msp_expect_string_type,omitempty"`
	MspHeaders                *string                    `json:"msp_headers,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               *int                       `json:"msp_interval,omitempty"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPassword               *string                    `json:"msp_password,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspProtocol               *ChecksMspProtocol         `json:"msp_protocol,omitempty"`
	MspProxy                  *string                    `json:"msp_proxy,omitempty"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspScript                 *string                    `json:"msp_script,omitempty"`
	MspSendString             *string                    `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspStatusCode             *string                    `json:"msp_status_code,omitempty"`
	MspThreshold              *int                       `json:"msp_threshold"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                    `json:"msp_username,omitempty"`
	MspVersion                *int                       `json:"msp_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksMspDnsRecordType defines model for Checks.MspDnsRecordType.
type ChecksMspDnsRecordType string

// ChecksMspEncryption defines model for Checks.MspEncryption.
type ChecksMspEncryption string

// ChecksMspExpectStringType defines model for Checks.MspExpectStringType.
type ChecksMspExpectStringType string

// ChecksMspProtocol defines model for Checks.MspProtocol.
type ChecksMspProtocol string

// ChecksMspUseIpVersion defines model for Checks.MspUseIpVersion.
type ChecksMspUseIpVersion string

// ChecksAPI defines model for ChecksAPI.
type ChecksAPI struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspScript                 string                    `json:"msp_script"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksAPIMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksAPIMspUseIpVersion defines model for ChecksAPI.MspUseIpVersion.
type ChecksAPIMspUseIpVersion string

// ChecksBLACKLIST defines model for ChecksBLACKLIST.
type ChecksBLACKLIST struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksBulkStats defines model for ChecksBulkStats.
type ChecksBulkStats struct {
	Checks *[]map[string]interface{} `json:"checks,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *time.Time `json:"end_date,omitempty"`

	// IncludeAlerts Include alert data for each outage in the period.
	IncludeAlerts *bool  `json:"include_alerts,omitempty"`
	Pk            *[]int `json:"pk,omitempty"`

	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *time.Time              `json:"start_date,omitempty"`
	Totals    *map[string]interface{} `json:"totals,omitempty"`
}

// ChecksBulkUpdate defines model for ChecksBulkUpdate.
type ChecksBulkUpdate struct {
	Fields *struct {
		AlertsUrl          *string  `json:"alerts_url,omitempty"`
		CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
		CheckType          *string  `json:"check_type,omitempty"`

		// ContactGroups Array of contact names or IDs associated with this check
		ContactGroups      []string   `json:"contact_groups"`
		CreatedAt          *time.Time `json:"created_at,omitempty"`
		Escalations        *string    `json:"escalations,omitempty"`
		IsPaused           *bool      `json:"is_paused,omitempty"`
		IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

		// Locations Array of locations associated with this check
		Locations                 *[]string                                  `json:"locations,omitempty"`
		Maintenance               *string                                    `json:"maintenance,omitempty"`
		ModifiedAt                *time.Time                                 `json:"modified_at,omitempty"`
		MonitoringServiceType     *string                                    `json:"monitoring_service_type,omitempty"`
		MspAddress                string                                     `json:"msp_address"`
		MspDnsRecordType          *ChecksBulkUpdateFieldsMspDnsRecordType    `json:"msp_dns_record_type,omitempty"`
		MspDnsServer              *string                                    `json:"msp_dns_server,omitempty"`
		MspEncryption             *ChecksBulkUpdateFieldsMspEncryption       `json:"msp_encryption,omitempty"`
		MspExpectString           *string                                    `json:"msp_expect_string,omitempty"`
		MspExpectStringType       *ChecksBulkUpdateFieldsMspExpectStringType `json:"msp_expect_string_type,omitempty"`
		MspHeaders                *string                                    `json:"msp_headers,omitempty"`
		MspIncludeInGlobalMetrics *bool                                      `json:"msp_include_in_global_metrics,omitempty"`
		MspInterval               *int                                       `json:"msp_interval,omitempty"`
		MspNotes                  *string                                    `json:"msp_notes,omitempty"`
		MspNumRetries             *int                                       `json:"msp_num_retries,omitempty"`
		MspPassword               *string                                    `json:"msp_password,omitempty"`
		MspPort                   *int                                       `json:"msp_port"`
		MspProtocol               *ChecksBulkUpdateFieldsMspProtocol         `json:"msp_protocol,omitempty"`
		MspProxy                  *string                                    `json:"msp_proxy,omitempty"`
		MspResponseTimeSla        *string                                    `json:"msp_response_time_sla"`
		MspScript                 *string                                    `json:"msp_script,omitempty"`
		MspSendString             *string                                    `json:"msp_send_string,omitempty"`
		MspSensitivity            *int                                       `json:"msp_sensitivity,omitempty"`
		MspStatusCode             *string                                    `json:"msp_status_code,omitempty"`
		MspThreshold              *int                                       `json:"msp_threshold"`
		MspUptimeSla              *string                                    `json:"msp_uptime_sla,omitempty"`
		MspUseIpVersion           *ChecksBulkUpdateFieldsMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
		MspUsername               *string                                    `json:"msp_username,omitempty"`
		MspVersion                *int                                       `json:"msp_version,omitempty"`
		Name                      *string                                    `json:"name,omitempty"`
		Pk                        *int                                       `json:"pk,omitempty"`
		StateChangedAt            *time.Time                                 `json:"state_changed_at,omitempty"`
		StateIsUp                 *bool                                      `json:"state_is_up,omitempty"`
		StatsUrl                  *string                                    `json:"stats_url,omitempty"`

		// Tags Array of tag names or IDs associated with this check
		Tags *[]string `json:"tags,omitempty"`
		Url  *string   `json:"url,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateFieldsMspDnsRecordType defines model for ChecksBulkUpdate.Fields.MspDnsRecordType.
type ChecksBulkUpdateFieldsMspDnsRecordType string

// ChecksBulkUpdateFieldsMspEncryption defines model for ChecksBulkUpdate.Fields.MspEncryption.
type ChecksBulkUpdateFieldsMspEncryption string

// ChecksBulkUpdateFieldsMspExpectStringType defines model for ChecksBulkUpdate.Fields.MspExpectStringType.
type ChecksBulkUpdateFieldsMspExpectStringType string

// ChecksBulkUpdateFieldsMspProtocol defines model for ChecksBulkUpdate.Fields.MspProtocol.
type ChecksBulkUpdateFieldsMspProtocol string

// ChecksBulkUpdateFieldsMspUseIpVersion defines model for ChecksBulkUpdate.Fields.MspUseIpVersion.
type ChecksBulkUpdateFieldsMspUseIpVersion string

// ChecksBulkUpdateEscalations defines model for ChecksBulkUpdateEscalations.
type ChecksBulkUpdateEscalations struct {
	Fields *struct {
		// Escalations A list of escalations to set on this check; see example above.
		Escalations *[]struct {
			ContactGroups []string `json:"contact_groups"`
			WaitTime      int      `json:"wait_time"`
		} `json:"escalations,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateMaintenance defines model for ChecksBulkUpdateMaintenance.
type ChecksBulkUpdateMaintenance struct {
	Fields *struct {
		// Schedule The schedule entries for maintenance windows; see example above.
		Schedule *[]struct {
			FromTime      *string                                       `json:"from_time"`
			Id            *int                                          `json:"id,omitempty"`
			Monthday      *int                                          `json:"monthday,omitempty"`
			MonthdayFrom  *int                                          `json:"monthday_from,omitempty"`
			MonthdayTo    *int                                          `json:"monthday_to,omitempty"`
			OnceEndDate   *time.Time                                    `json:"once_end_date"`
			OnceStartDate *time.Time                                    `json:"once_start_date"`
			StartDate     *openapi_types.Date                           `json:"start_date"`
			ToTime        *string                                       `json:"to_time"`
			Type          ChecksBulkUpdateMaintenanceFieldsScheduleType `json:"type"`
			Weekdays      *[]int                                        `json:"weekdays,omitempty"`
		} `json:"schedule,omitempty"`

		// State Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
		State *ChecksBulkUpdateMaintenanceFieldsState `json:"state,omitempty"`
	} `json:"fields,omitempty"`
	Pk *[]int `json:"pk,omitempty"`
}

// ChecksBulkUpdateMaintenanceFieldsScheduleType defines model for ChecksBulkUpdateMaintenance.Fields.Schedule.Type.
type ChecksBulkUpdateMaintenanceFieldsScheduleType string

// ChecksBulkUpdateMaintenanceFieldsState Current state of the check; ACTIVE (alerts sent normally), SUPPRESSED (under maintenance), SCHEDULED (maintenance windows as defined in the schedule)
type ChecksBulkUpdateMaintenanceFieldsState string

// ChecksDNS defines model for ChecksDNS.
type ChecksDNS struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspDnsRecordType          ChecksDNSMspDnsRecordType `json:"msp_dns_record_type"`
	MspDnsServer              *string                   `json:"msp_dns_server,omitempty"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksDNSMspDnsRecordType defines model for ChecksDNS.MspDnsRecordType.
type ChecksDNSMspDnsRecordType string

// ChecksGROUP defines model for ChecksGROUP.
type ChecksGROUP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups    []string   `json:"contact_groups"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	Escalations      *string    `json:"escalations,omitempty"`
	Groupcheckconfig *struct {
		GroupCheckDownCondition *ChecksGROUPGroupcheckconfigGroupCheckDownCondition `json:"group_check_down_condition,omitempty"`

		// GroupCheckServices Include checks from this list
		GroupCheckServices *[]string `json:"group_check_services,omitempty"`

		// GroupCheckTags Include checks with one or more of the selected tags
		GroupCheckTags                   *[]string                                                    `json:"group_check_tags,omitempty"`
		GroupResponseTimeCalculationMode *ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode `json:"group_response_time_calculation_mode,omitempty"`
		GroupResponseTimeCheckType       *ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType       `json:"group_response_time_check_type,omitempty"`

		// GroupResponseTimeSingleCheck Service to copy response time from
		GroupResponseTimeSingleCheck  *string                                                   `json:"group_response_time_single_check"`
		GroupUptimePercentCalculation *ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation `json:"group_uptime_percent_calculation,omitempty"`
	} `json:"groupcheckconfig"`
	IsPaused           *bool `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksGROUPGroupcheckconfigGroupCheckDownCondition defines model for ChecksGROUP.Groupcheckconfig.GroupCheckDownCondition.
type ChecksGROUPGroupcheckconfigGroupCheckDownCondition string

// ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode defines model for ChecksGROUP.Groupcheckconfig.GroupResponseTimeCalculationMode.
type ChecksGROUPGroupcheckconfigGroupResponseTimeCalculationMode string

// ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType defines model for ChecksGROUP.Groupcheckconfig.GroupResponseTimeCheckType.
type ChecksGROUPGroupcheckconfigGroupResponseTimeCheckType string

// ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation defines model for ChecksGROUP.Groupcheckconfig.GroupUptimePercentCalculation.
type ChecksGROUPGroupcheckconfigGroupUptimePercentCalculation string

// ChecksHEARTBEAT defines model for ChecksHEARTBEAT.
type ChecksHEARTBEAT struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	HeartbeatUrl       *string    `json:"heartbeat_url,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int        `json:"msp_interval"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksHTTP defines model for ChecksHTTP.
type ChecksHTTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                      `json:"locations,omitempty"`
	Maintenance               *string                        `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                     `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                        `json:"monitoring_service_type,omitempty"`
	MspAddress                string                         `json:"msp_address"`
	MspEncryption             *ChecksHTTPMspEncryption       `json:"msp_encryption,omitempty"`
	MspExpectString           *string                        `json:"msp_expect_string,omitempty"`
	MspExpectStringType       *ChecksHTTPMspExpectStringType `json:"msp_expect_string_type,omitempty"`
	MspHeaders                *string                        `json:"msp_headers,omitempty"`
	MspIncludeInGlobalMetrics *bool                          `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                            `json:"msp_interval"`
	MspNotes                  *string                        `json:"msp_notes,omitempty"`
	MspNumRetries             *int                           `json:"msp_num_retries,omitempty"`
	MspPassword               *string                        `json:"msp_password,omitempty"`
	MspPort                   *int                           `json:"msp_port"`
	MspProxy                  *string                        `json:"msp_proxy,omitempty"`
	MspResponseTimeSla        *string                        `json:"msp_response_time_sla"`
	MspSendString             *string                        `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                           `json:"msp_sensitivity,omitempty"`
	MspStatusCode             *string                        `json:"msp_status_code,omitempty"`
	MspThreshold              *int                           `json:"msp_threshold"`
	MspUptimeSla              *string                        `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksHTTPMspUseIpVersion     `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                        `json:"msp_username,omitempty"`
	MspVersion                *int                           `json:"msp_version,omitempty"`
	Name                      *string                        `json:"name,omitempty"`
	Pk                        *int                           `json:"pk,omitempty"`
	StateChangedAt            *time.Time                     `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                          `json:"state_is_up,omitempty"`
	StatsUrl                  *string                        `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksHTTPMspEncryption defines model for ChecksHTTP.MspEncryption.
type ChecksHTTPMspEncryption string

// ChecksHTTPMspExpectStringType defines model for ChecksHTTP.MspExpectStringType.
type ChecksHTTPMspExpectStringType string

// ChecksHTTPMspUseIpVersion defines model for ChecksHTTP.MspUseIpVersion.
type ChecksHTTPMspUseIpVersion string

// ChecksICMP defines model for ChecksICMP.
type ChecksICMP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksICMPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksICMPMspUseIpVersion defines model for ChecksICMP.MspUseIpVersion.
type ChecksICMPMspUseIpVersion string

// ChecksIMAP defines model for ChecksIMAP.
type ChecksIMAP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspEncryption             *ChecksIMAPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksIMAPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksIMAPMspEncryption defines model for ChecksIMAP.MspEncryption.
type ChecksIMAPMspEncryption string

// ChecksIMAPMspUseIpVersion defines model for ChecksIMAP.MspUseIpVersion.
type ChecksIMAPMspUseIpVersion string

// ChecksMALWARE defines model for ChecksMALWARE.
type ChecksMALWARE struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksNTP defines model for ChecksNTP.
type ChecksNTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int                      `json:"msp_threshold"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksNTPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksNTPMspUseIpVersion defines model for ChecksNTP.MspUseIpVersion.
type ChecksNTPMspUseIpVersion string

// ChecksPOP defines model for ChecksPOP.
type ChecksPOP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspEncryption             *ChecksPOPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksPOPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksPOPMspEncryption defines model for ChecksPOP.MspEncryption.
type ChecksPOPMspEncryption string

// ChecksPOPMspUseIpVersion defines model for ChecksPOP.MspUseIpVersion.
type ChecksPOPMspUseIpVersion string

// ChecksRUM defines model for ChecksRUM.
type ChecksRUM struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspAddress                string     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspThreshold              *int       `json:"msp_threshold"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksRUM2 defines model for ChecksRUM2.
type ChecksRUM2 struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspAddress                string     `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSMTP defines model for ChecksSMTP.
type ChecksSMTP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                  `json:"locations,omitempty"`
	Maintenance               *string                    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                 `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                    `json:"monitoring_service_type,omitempty"`
	MspAddress                string                     `json:"msp_address"`
	MspEncryption             *ChecksSMTPMspEncryption   `json:"msp_encryption,omitempty"`
	MspExpectString           *string                    `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                        `json:"msp_interval"`
	MspNotes                  *string                    `json:"msp_notes,omitempty"`
	MspNumRetries             *int                       `json:"msp_num_retries,omitempty"`
	MspPassword               *string                    `json:"msp_password,omitempty"`
	MspPort                   *int                       `json:"msp_port"`
	MspResponseTimeSla        *string                    `json:"msp_response_time_sla"`
	MspSensitivity            *int                       `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                    `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksSMTPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	MspUsername               *string                    `json:"msp_username,omitempty"`
	Name                      *string                    `json:"name,omitempty"`
	Pk                        *int                       `json:"pk,omitempty"`
	StateChangedAt            *time.Time                 `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                      `json:"state_is_up,omitempty"`
	StatsUrl                  *string                    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSMTPMspEncryption defines model for ChecksSMTP.MspEncryption.
type ChecksSMTPMspEncryption string

// ChecksSMTPMspUseIpVersion defines model for ChecksSMTP.MspUseIpVersion.
type ChecksSMTPMspUseIpVersion string

// ChecksSSH defines model for ChecksSSH.
type ChecksSSH struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksSSHMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSSHMspUseIpVersion defines model for ChecksSSH.MspUseIpVersion.
type ChecksSSHMspUseIpVersion string

// ChecksSSLCERT defines model for ChecksSSL_CERT.
type ChecksSSLCERT struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations             *[]string                `json:"locations,omitempty"`
	Maintenance           *string                  `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time               `json:"modified_at,omitempty"`
	MonitoringServiceType *string                  `json:"monitoring_service_type,omitempty"`
	MspAddress            string                   `json:"msp_address"`
	MspNotes              *string                  `json:"msp_notes,omitempty"`
	MspNumRetries         *int                     `json:"msp_num_retries,omitempty"`
	MspPort               *int                     `json:"msp_port"`
	MspProtocol           ChecksSSLCERTMspProtocol `json:"msp_protocol"`
	MspThreshold          *int                     `json:"msp_threshold"`
	MspUptimeSla          *string                  `json:"msp_uptime_sla,omitempty"`
	Name                  *string                  `json:"name,omitempty"`
	Pk                    *int                     `json:"pk,omitempty"`
	StateChangedAt        *time.Time               `json:"state_changed_at,omitempty"`
	StateIsUp             *bool                    `json:"state_is_up,omitempty"`
	StatsUrl              *string                  `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksSSLCERTMspProtocol defines model for ChecksSSLCERT.MspProtocol.
type ChecksSSLCERTMspProtocol string

// ChecksTCP defines model for ChecksTCP.
type ChecksTCP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspExpectString           *string                   `json:"msp_expect_string,omitempty"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSendString             *string                   `json:"msp_send_string,omitempty"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksTCPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksTCPMspUseIpVersion defines model for ChecksTCP.MspUseIpVersion.
type ChecksTCPMspUseIpVersion string

// ChecksTRANSACTION defines model for ChecksTRANSACTION.
type ChecksTRANSACTION struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int        `json:"msp_interval"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspNumRetries             *int       `json:"msp_num_retries,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspScript                 string     `json:"msp_script"`
	MspSensitivity            *int       `json:"msp_sensitivity,omitempty"`
	MspThreshold              *int       `json:"msp_threshold"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksUDP defines model for ChecksUDP.
type ChecksUDP struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string                 `json:"locations,omitempty"`
	Maintenance               *string                   `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time                `json:"modified_at,omitempty"`
	MonitoringServiceType     *string                   `json:"monitoring_service_type,omitempty"`
	MspAddress                string                    `json:"msp_address"`
	MspExpectString           string                    `json:"msp_expect_string"`
	MspIncludeInGlobalMetrics *bool                     `json:"msp_include_in_global_metrics,omitempty"`
	MspInterval               int                       `json:"msp_interval"`
	MspNotes                  *string                   `json:"msp_notes,omitempty"`
	MspNumRetries             *int                      `json:"msp_num_retries,omitempty"`
	MspPort                   *int                      `json:"msp_port"`
	MspResponseTimeSla        *string                   `json:"msp_response_time_sla"`
	MspSendString             string                    `json:"msp_send_string"`
	MspSensitivity            *int                      `json:"msp_sensitivity,omitempty"`
	MspUptimeSla              *string                   `json:"msp_uptime_sla,omitempty"`
	MspUseIpVersion           *ChecksUDPMspUseIpVersion `json:"msp_use_ip_version,omitempty"`
	Name                      *string                   `json:"name,omitempty"`
	Pk                        *int                      `json:"pk,omitempty"`
	StateChangedAt            *time.Time                `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool                     `json:"state_is_up,omitempty"`
	StatsUrl                  *string                   `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// ChecksUDPMspUseIpVersion defines model for ChecksUDP.MspUseIpVersion.
type ChecksUDPMspUseIpVersion string

// ChecksWEBHOOK defines model for ChecksWEBHOOK.
type ChecksWEBHOOK struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations                 *[]string  `json:"locations,omitempty"`
	Maintenance               *string    `json:"maintenance,omitempty"`
	ModifiedAt                *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType     *string    `json:"monitoring_service_type,omitempty"`
	MspIncludeInGlobalMetrics *bool      `json:"msp_include_in_global_metrics,omitempty"`
	MspNotes                  *string    `json:"msp_notes,omitempty"`
	MspResponseTimeSla        *string    `json:"msp_response_time_sla"`
	MspUptimeSla              *string    `json:"msp_uptime_sla,omitempty"`
	Name                      *string    `json:"name,omitempty"`
	Pk                        *int       `json:"pk,omitempty"`
	StateChangedAt            *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp                 *bool      `json:"state_is_up,omitempty"`
	StatsUrl                  *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags       *[]string `json:"tags,omitempty"`
	Url        *string   `json:"url,omitempty"`
	WebhookUrl *string   `json:"webhook_url,omitempty"`
}

// ChecksWHOIS defines model for ChecksWHOIS.
type ChecksWHOIS struct {
	AlertsUrl          *string  `json:"alerts_url,omitempty"`
	CachedResponseTime *float32 `json:"cached_response_time,omitempty"`
	CheckType          *string  `json:"check_type,omitempty"`

	// ContactGroups Array of contact names or IDs associated with this check
	ContactGroups      []string   `json:"contact_groups"`
	CreatedAt          *time.Time `json:"created_at,omitempty"`
	Escalations        *string    `json:"escalations,omitempty"`
	IsPaused           *bool      `json:"is_paused,omitempty"`
	IsUnderMaintenance *bool      `json:"is_under_maintenance,omitempty"`

	// Locations Array of locations associated with this check
	Locations             *[]string  `json:"locations,omitempty"`
	Maintenance           *string    `json:"maintenance,omitempty"`
	ModifiedAt            *time.Time `json:"modified_at,omitempty"`
	MonitoringServiceType *string    `json:"monitoring_service_type,omitempty"`
	MspAddress            string     `json:"msp_address"`
	MspExpectString       string     `json:"msp_expect_string"`
	MspNotes              *string    `json:"msp_notes,omitempty"`
	MspNumRetries         *int       `json:"msp_num_retries,omitempty"`
	MspThreshold          *int       `json:"msp_threshold"`
	MspUptimeSla          *string    `json:"msp_uptime_sla,omitempty"`
	Name                  *string    `json:"name,omitempty"`
	Pk                    *int       `json:"pk,omitempty"`
	StateChangedAt        *time.Time `json:"state_changed_at,omitempty"`
	StateIsUp             *bool      `json:"state_is_up,omitempty"`
	StatsUrl              *string    `json:"stats_url,omitempty"`

	// Tags Array of tag names or IDs associated with this check
	Tags *[]string `json:"tags,omitempty"`
	Url  *string   `json:"url,omitempty"`
}

// Component defines model for Component.
type Component struct {
	AutoSetStatus *ComponentAutoSetStatus `json:"auto_set_status,omitempty"`
	CreatedAt     *time.Time              `json:"created_at,omitempty"`
	Description   *string                 `json:"description,omitempty"`
	GroupId       *int                    `json:"group_id"`
	IsGroup       *bool                   `json:"is_group,omitempty"`
	Name          string                  `json:"name"`
	Pk            *int                    `json:"pk,omitempty"`
	ServiceId     *int                    `json:"service_id"`
	ServiceUrl    *string                 `json:"service_url,omitempty"`
	Status        *ComponentStatus        `json:"status,omitempty"`
	Url           *string                 `json:"url,omitempty"`
}

// ComponentAutoSetStatus defines model for Component.AutoSetStatus.
type ComponentAutoSetStatus string

// ComponentStatus defines model for Component.Status.
type ComponentStatus string

// ContactGroup defines model for ContactGroup.
type ContactGroup struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EmailList Array of email addresses to receive alerts
	EmailList *[]openapi_types.Email `json:"email_list,omitempty"`

	// Integrations Array of integration names or IDs associated with this contact
	Integrations *[]string  `json:"integrations,omitempty"`
	ModifiedAt   *time.Time `json:"modified_at,omitempty"`

	// Name Name of this contact
	Name string `json:"name"`

	// OncallSchedule The on-call hours schedule for this contact
	OncallSchedule *string `json:"oncall_schedule,omitempty"`

	// PhonecallList Array of cellphone numbers for voice call alerts (valid international phone number starting with +)
	PhonecallList *[]string `json:"phonecall_list,omitempty"`
	Pk            *int      `json:"pk,omitempty"`

	// PushNotificationProfiles Array of integration names or IDs associated with this contact
	PushNotificationProfiles *[]string `json:"push_notification_profiles,omitempty"`

	// SmsList Array of cellphone numbers for SMS alerts (valid international phone number starting with +)
	SmsList *[]string `json:"sms_list,omitempty"`
	Url     *string   `json:"url,omitempty"`
}

// ContactGroupOnCallSchedule defines model for ContactGroupOnCallSchedule.
type ContactGroupOnCallSchedule struct {
	// Schedule The schedule entries for when the contact is on-call; see example above.
	Schedule *[]struct {
		FromTime      *string                                `json:"from_time"`
		Id            *int                                   `json:"id,omitempty"`
		MonthdayFrom  *int                                   `json:"monthday_from,omitempty"`
		MonthdayTo    *int                                   `json:"monthday_to,omitempty"`
		OnceEndDate   *time.Time                             `json:"once_end_date"`
		OnceStartDate *time.Time                             `json:"once_start_date"`
		ToTime        *string                                `json:"to_time"`
		Type          ContactGroupOnCallScheduleScheduleType `json:"type"`
		Weekdays      []int                                  `json:"weekdays"`
	} `json:"schedule,omitempty"`

	// State Whether to use an on-call schedule. Either ACTIVE (always on call) or SCHEDULED (use defined schedule).
	State *ContactGroupOnCallScheduleState `json:"state,omitempty"`
}

// ContactGroupOnCallScheduleScheduleType defines model for ContactGroupOnCallSchedule.Schedule.Type.
type ContactGroupOnCallScheduleScheduleType string

// ContactGroupOnCallScheduleState Whether to use an on-call schedule. Either ACTIVE (always on call) or SCHEDULED (use defined schedule).
type ContactGroupOnCallScheduleState string

// Dashboard defines model for Dashboard.
type Dashboard struct {
	// AlertsForAllChecks Show/hide alerts globally across all checks, rather than only for checks selected in the Checks tab
	AlertsForAllChecks *bool `json:"alerts_for_all_checks,omitempty"`

	// AlertsIncludeIgnored Include/exclude alerts marked as "ignored" in the alerts listing
	AlertsIncludeIgnored *bool `json:"alerts_include_ignored,omitempty"`

	// AlertsIncludeResolved Include/exclude alerts that are no longer down in the alerts listing
	AlertsIncludeResolved *bool `json:"alerts_include_resolved,omitempty"`

	// AlertsNumToShow Number of alerts to show in the Latest Alerts section
	AlertsNumToShow *DashboardAlertsNumToShow `json:"alerts_num_to_show,omitempty"`

	// AlertsShowSection Show/hide the Latest Alerts section from this dashboard
	AlertsShowSection *bool      `json:"alerts_show_section,omitempty"`
	CreatedAt         *time.Time `json:"created_at,omitempty"`

	// IsPinned Whether this dashboard is pinned to the sidebar
	IsPinned *bool `json:"is_pinned,omitempty"`

	// MetricsForAllChecks Include metrics from all checks, not just the selected checks
	MetricsForAllChecks *bool `json:"metrics_for_all_checks,omitempty"`

	// MetricsShowSection Show/hide the Summary Metrics section at the top of this dashboard
	MetricsShowSection *bool `json:"metrics_show_section,omitempty"`

	// Name The displayed name for this dashboard
	Name *string `json:"name,omitempty"`

	// Ordering Sidebar ordering for this dashboard
	Ordering *int `json:"ordering,omitempty"`
	Pk       *int `json:"pk,omitempty"`

	// ServicesIncludeDown Include/exclude checks which are currently down
	ServicesIncludeDown *bool `json:"services_include_down,omitempty"`

	// ServicesIncludeMaintenance Include/exclude checks which are manually marked for maintenance
	ServicesIncludeMaintenance *bool `json:"services_include_maintenance,omitempty"`

	// ServicesIncludePaused Include/exclude checks which are currently paused
	ServicesIncludePaused *bool `json:"services_include_paused,omitempty"`

	// ServicesIncludeUp Include/exclude checks which are currently up
	ServicesIncludeUp *bool `json:"services_include_up,omitempty"`

	// ServicesNumToShow Number of check cards to show in the Checks section
	ServicesNumToShow *DashboardServicesNumToShow `json:"services_num_to_show,omitempty"`

	// ServicesPrimarySort The primary value for ordering the checks
	ServicesPrimarySort *DashboardServicesPrimarySort `json:"services_primary_sort,omitempty"`

	// ServicesSecondarySort The secondary value for ordering the checks, if the primary value is the same
	ServicesSecondarySort *DashboardServicesSecondarySort `json:"services_secondary_sort,omitempty"`

	// ServicesSelected Include checks from this list
	ServicesSelected *[]string `json:"services_selected,omitempty"`

	// ServicesShowResponseTime Show the response time graph or metric on each check card
	ServicesShowResponseTime *bool `json:"services_show_response_time,omitempty"`

	// ServicesShowSection Show/hide the check cards from this dashboard
	ServicesShowSection *bool `json:"services_show_section,omitempty"`

	// ServicesShowUptime Show the 24h uptime percentage on each check card
	ServicesShowUptime *bool `json:"services_show_uptime,omitempty"`

	// ServicesTags Include checks with one or more of the selected tags
	ServicesTags *[]string `json:"services_tags,omitempty"`
	StatsUrl     *string   `json:"stats_url,omitempty"`
	Url          *string   `json:"url,omitempty"`
}

// DashboardAlertsNumToShow Number of alerts to show in the Latest Alerts section
type DashboardAlertsNumToShow int

// DashboardServicesNumToShow Number of check cards to show in the Checks section
type DashboardServicesNumToShow int

// DashboardServicesPrimarySort The primary value for ordering the checks
type DashboardServicesPrimarySort string

// DashboardServicesSecondarySort The secondary value for ordering the checks, if the primary value is the same
type DashboardServicesSecondarySort string

// DashboardStats defines model for DashboardStats.
type DashboardStats struct {
	Checks *[]struct {
		CachedResponseTime     *float32       `json:"cached_response_time,omitempty"`
		CheckType              *string        `json:"check_type,omitempty"`
		CreatedAt              *time.Time     `json:"created_at,omitempty"`
		IsPaused               *bool          `json:"is_paused,omitempty"`
		IsUnderMaintenance     *bool          `json:"is_under_maintenance,omitempty"`
		MonitoringServiceType  *string        `json:"monitoring_service_type,omitempty"`
		MspAddress             *string        `json:"msp_address,omitempty"`
		MspInterval            *int           `json:"msp_interval,omitempty"`
		Name                   *string        `json:"name,omitempty"`
		Pk                     *int           `json:"pk,omitempty"`
		ResponseTimeDatapoints *[]interface{} `json:"response_time_datapoints,omitempty"`
		StateChangedAt         time.Time      `json:"state_changed_at"`
		StateIsUp              *bool          `json:"state_is_up,omitempty"`
		Uptime24h              *float32       `json:"uptime_24h,omitempty"`
		Url                    *string        `json:"url,omitempty"`
	} `json:"checks,omitempty"`
	GlobalMetrics *map[string]interface{} `json:"global_metrics,omitempty"`
	LatestOutages *[]struct {
		AllAlerts []struct {
			CreatedAt            *time.Time `json:"created_at,omitempty"`
			Location             *string    `json:"location,omitempty"`
			MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
			MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
			MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
			Output               *string    `json:"output,omitempty"`
			Pk                   *int       `json:"pk,omitempty"`
			Url                  *string    `json:"url,omitempty"`
		} `json:"all_alerts"`
		CheckAddress               string    `json:"check_address"`
		CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
		CheckName                  string    `json:"check_name"`
		CheckPk                    int       `json:"check_pk"`
		CheckUrl                   *string   `json:"check_url,omitempty"`
		CreatedAt                  time.Time `json:"created_at"`
		DurationSecs               *string   `json:"duration_secs,omitempty"`
		IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
		Ignored                    *bool     `json:"ignored,omitempty"`
		NumLocationsDown           int       `json:"num_locations_down"`
		Pk                         *int      `json:"pk,omitempty"`
		ResolvedAt                 *string   `json:"resolved_at,omitempty"`
		StateIsUp                  bool      `json:"state_is_up"`
		Url                        *string   `json:"url,omitempty"`
	} `json:"latest_outages,omitempty"`
}

// Incident defines model for Incident.
type Incident struct {
	AffectedComponents *[]struct {
		Component struct {
			Id   int     `json:"id"`
			Name *string `json:"name,omitempty"`
		} `json:"component"`
		Description *string                          `json:"description,omitempty"`
		Id          *int                             `json:"id,omitempty"`
		Name        *string                          `json:"name,omitempty"`
		Status      IncidentAffectedComponentsStatus `json:"status"`
	} `json:"affected_components"`
	CreatedAt              *time.Time           `json:"created_at,omitempty"`
	Description            *string              `json:"description,omitempty"`
	Duration               *string              `json:"duration,omitempty"`
	EndsAt                 *time.Time           `json:"ends_at"`
	IncidentState          *string              `json:"incident_state,omitempty"`
	IncidentType           IncidentIncidentType `json:"incident_type"`
	IncidentTypeDisplay    *string              `json:"incident_type_display,omitempty"`
	IncludeInGlobalMetrics *bool                `json:"include_in_global_metrics,omitempty"`

	// Name The name of incident, eg. a problem or resolution
	Name                  string     `json:"name"`
	Pk                    *int       `json:"pk,omitempty"`
	StartsAt              *time.Time `json:"starts_at"`
	UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
	Updates               []struct {
		CreatedAt            *time.Time                   `json:"created_at,omitempty"`
		Description          *string                      `json:"description,omitempty"`
		Id                   *int                         `json:"id,omitempty"`
		IncidentState        IncidentUpdatesIncidentState `json:"incident_state"`
		IncidentStateDisplay *string                      `json:"incident_state_display,omitempty"`
		UpdatedAt            *time.Time                   `json:"updated_at,omitempty"`
	} `json:"updates"`
	Url *string `json:"url,omitempty"`
}

// IncidentAffectedComponentsStatus defines model for Incident.AffectedComponents.Status.
type IncidentAffectedComponentsStatus string

// IncidentIncidentType defines model for Incident.IncidentType.
type IncidentIncidentType string

// IncidentUpdatesIncidentState defines model for Incident.Updates.IncidentState.
type IncidentUpdatesIncidentState string

// Incidents defines model for Incidents.
type Incidents struct {
	AllAlerts []struct {
		CreatedAt            *time.Time `json:"created_at,omitempty"`
		Location             *string    `json:"location,omitempty"`
		MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
		MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
		MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
		Output               *string    `json:"output,omitempty"`
		Pk                   *int       `json:"pk,omitempty"`
		Url                  *string    `json:"url,omitempty"`
	} `json:"all_alerts"`
	CheckAddress               string    `json:"check_address"`
	CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
	CheckName                  string    `json:"check_name"`
	CheckPk                    int       `json:"check_pk"`
	CheckUrl                   *string   `json:"check_url,omitempty"`
	CreatedAt                  time.Time `json:"created_at"`
	IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
	Ignored                    *bool     `json:"ignored,omitempty"`
	NumLocationsDown           int       `json:"num_locations_down"`
	Pk                         *int      `json:"pk,omitempty"`
	StateIsUp                  bool      `json:"state_is_up"`
	Url                        *string   `json:"url,omitempty"`
}

// Integration defines model for Integration.
type Integration struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationCachet defines model for IntegrationCachet.
type IntegrationCachet struct {
	// Component Component to update with availability status.
	Component *string `json:"component,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Metric Metric to update with response time data.
	Metric *string `json:"metric,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Token Your API token.
	Token *string `json:"token,omitempty"`

	// Url Root URL of your Cachet installation.
	Url *string `json:"url,omitempty"`
}

// IntegrationDatadog defines model for IntegrationDatadog.
type IntegrationDatadog struct {
	ApiKey *string `json:"api_key,omitempty"`
	AppKey *string `json:"app_key,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name   string                    `json:"name"`
	Pk     *int                      `json:"pk,omitempty"`
	Region *IntegrationDatadogRegion `json:"region,omitempty"`
	Url    *string                   `json:"url,omitempty"`
}

// IntegrationDatadogRegion defines model for IntegrationDatadog.Region.
type IntegrationDatadogRegion string

// IntegrationGeckoboard defines model for IntegrationGeckoboard.
type IntegrationGeckoboard struct {
	ApiKey *string `json:"api_key,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	DatasetName   *string   `json:"dataset_name,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationJiraservicedesk defines model for IntegrationJiraservicedesk.
type IntegrationJiraservicedesk struct {
	// ApiEmail Email of the user whose API token is being used.
	ApiEmail *string `json:"api_email,omitempty"`

	// ApiToken API Token created for the user, or the user's password (self-hosted only).
	ApiToken *string `json:"api_token,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// CustomFieldIdAccountName An optional ID for a custom text field that should receive the account name.
	CustomFieldIdAccountName *int `json:"custom_field_id_account_name,omitempty"`

	// CustomFieldIdCheckName An optional ID for a custom text field that should receive the check name.
	CustomFieldIdCheckName *int `json:"custom_field_id_check_name,omitempty"`

	// CustomFieldIdCheckUrl An optional ID for a custom text field that should receive the check URL.
	CustomFieldIdCheckUrl *int `json:"custom_field_id_check_url,omitempty"`

	// CustomFieldsJson
	// <div class="dropdown">
	//   Advanced configuration for custom fields using JSON format. See
	//   <a href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true"
	//       aria-expanded="false">example values</a>.
	//   <div class="dropdown-menu border dark-shadow" style="width: 37rem;"
	//       aria-labelledby="dropdownMenuLink">
	// <pre><code>
	//   {
	//     "customfield_10000": "this is a text field",
	//     "customfield_20000": "this is a multi-line text field. big text.",
	//     "customfield_30000": "2011-07-13T15:25:00",
	//     "customfield_40000": {
	//       "value": "this is a select list value"
	//     },
	//     "customfield_50000": {
	//       "name": "this is a group picker value"
	//     },
	//     "customfield_60000": [
	//       {"value": "this is a multi select list value #1"},
	//       {"value": "this is a multi select list value #2"}
	//     ],
	//   }
	// </code></pre>
	//   </div>
	// </div>
	CustomFieldsJson *string `json:"custom_fields_json,omitempty"`
	IsErrored        *bool   `json:"is_errored,omitempty"`

	// JiraSubdomain The domain your company uses to access Jira, e.g. "https://your-domain.atlassian.net"
	JiraSubdomain *string `json:"jira_subdomain,omitempty"`

	// Labels A comma separated list of labels attached to each incident created. The "Uptime.com" label any associated check tags are always set.
	Labels    *string `json:"labels,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// ProjectKey The project key of your Service Desk project, shown on the Project Settings > Details page. E.g. "SMPSRVDESK"
	ProjectKey *string `json:"project_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationKlipfolio defines model for IntegrationKlipfolio.
type IntegrationKlipfolio struct {
	ApiKey *string `json:"api_key,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups  *[]string `json:"contact_groups,omitempty"`
	DataSourceName *string   `json:"data_source_name,omitempty"`
	IsErrored      *bool     `json:"is_errored,omitempty"`
	LastError      *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationLibrato defines model for IntegrationLibrato.
type IntegrationLibrato struct {
	ApiToken *string `json:"api_token,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Email Email address which you registered with at Librato
	Email      *string `json:"email,omitempty"`
	IsErrored  *bool   `json:"is_errored,omitempty"`
	LastError  *string `json:"last_error,omitempty"`
	MetricName *string `json:"metric_name,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationMicrosoftTeams defines model for IntegrationMicrosoft_Teams.
type IntegrationMicrosoftTeams struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name       string  `json:"name"`
	Pk         *int    `json:"pk,omitempty"`
	Url        *string `json:"url,omitempty"`
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// IntegrationOpsgenie defines model for IntegrationOpsgenie.
type IntegrationOpsgenie struct {
	// ApiEndpoint Listed on the Integrations / Configured Integrations page in OpsGenie.
	ApiEndpoint *string `json:"api_endpoint,omitempty"`

	// ApiKey Listed on the Integrations / Configured Integrations page in OpsGenie.
	ApiKey *string `json:"api_key,omitempty"`

	// Autoresolve Automatically resolve incident once the check is back up.
	Autoresolve *bool `json:"autoresolve,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Tags A comma separated list of labels attached to the alert. You may overwrite the quiet hours setting for urgent alerts by adding the OverwriteQuietHours tag.
	Tags *string `json:"tags,omitempty"`

	// Teams A comma separated list of team names which will be responsible for the alert.
	Teams *string `json:"teams,omitempty"`
	Url   *string `json:"url,omitempty"`
}

// IntegrationPagerduty defines model for IntegrationPagerduty.
type IntegrationPagerduty struct {
	// Autoresolve Automatically resolve this incident once the check is back up.
	Autoresolve *bool `json:"autoresolve,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// ServiceKey Listed on the Service's details page, Integrations tab.
	ServiceKey *string `json:"service_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationPushbullet defines model for IntegrationPushbullet.
type IntegrationPushbullet struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Email The email used in creating your Pushbullet account.
	Email     *openapi_types.Email `json:"email,omitempty"`
	IsErrored *bool                `json:"is_errored,omitempty"`
	LastError *string              `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationPushover defines model for IntegrationPushover.
type IntegrationPushover struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// Priority Priorities higher then normal will override recipient's quiet hours.
	Priority *IntegrationPushoverPriority `json:"priority,omitempty"`
	Url      *string                      `json:"url,omitempty"`

	// User This may be your user key or a group key.
	User *string `json:"user,omitempty"`
}

// IntegrationPushoverPriority Priorities higher then normal will override recipient's quiet hours.
type IntegrationPushoverPriority int

// IntegrationSlack defines model for IntegrationSlack.
type IntegrationSlack struct {
	Channel *string `json:"channel,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name       string  `json:"name"`
	Pk         *int    `json:"pk,omitempty"`
	Url        *string `json:"url,omitempty"`
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// IntegrationStatus defines model for IntegrationStatus.
type IntegrationStatus struct {
	// ApiId Listed on the API page.
	ApiId *string `json:"api_id,omitempty"`

	// ApiKey Listed on the API page.
	ApiKey *string `json:"api_key,omitempty"`

	// Component Component to update with availability status. Listed in the Infrastructure / Modify Component / API section.
	Component *string `json:"component,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Container Container to update with availability status. Listed in the Infrastructure / Modify Component / API section.
	Container *string `json:"container,omitempty"`
	IsErrored *bool   `json:"is_errored,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// Metric Metric to update with response time data. Listed on the Metrics / Modify Metric page when setting Data Source to Custom.
	Metric *string `json:"metric,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// StatuspageId Listed on the API page.
	StatuspageId *string `json:"statuspage_id,omitempty"`
	Url          *string `json:"url,omitempty"`
}

// IntegrationStatuspage defines model for IntegrationStatuspage.
type IntegrationStatuspage struct {
	// ApiKey Listed on the Manage Account / API page.
	ApiKey *string `json:"api_key,omitempty"`

	// Component Component to update with availability status, see instructions below.
	Component *string `json:"component,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Metric Metric to update with response time data. Listed in Public Metrics / Edit Metric / Advanced Options.
	Metric *string `json:"metric,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`

	// Page Listed on the Manage Account / API page.
	Page *string `json:"page,omitempty"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// IntegrationTwitter defines model for IntegrationTwitter.
type IntegrationTwitter struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name             string  `json:"name"`
	OauthToken       *string `json:"oauth_token,omitempty"`
	OauthTokenSecret *string `json:"oauth_token_secret,omitempty"`
	Pk               *int    `json:"pk,omitempty"`
	Url              *string `json:"url,omitempty"`
}

// IntegrationVictorops defines model for IntegrationVictorops.
type IntegrationVictorops struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// RoutingKey Routing key determines to which team alerts and incidents will be routed.
	RoutingKey *string `json:"routing_key,omitempty"`

	// ServiceKey Listed on the Settings / API page
	ServiceKey *string `json:"service_key,omitempty"`
	Url        *string `json:"url,omitempty"`
}

// IntegrationWavefront defines model for IntegrationWavefront.
type IntegrationWavefront struct {
	// ApiToken Your API token.
	ApiToken *string `json:"api_token,omitempty"`

	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`

	// WavefrontUrl Root URL of your Wavefront service, eg. https://longboard.wavefront.com.
	WavefrontUrl *string `json:"wavefront_url,omitempty"`
}

// IntegrationWebhook defines model for IntegrationWebhook.
type IntegrationWebhook struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`

	// Headers Optional custom HTTP headers in "Name: Value" format.
	Headers   *string `json:"headers,omitempty"`
	IsErrored *bool   `json:"is_errored,omitempty"`
	LastError *string `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string `json:"name"`
	Pk   *int   `json:"pk,omitempty"`

	// PostbackUrl The URL you would like the alert details sent by HTTP POST.
	PostbackUrl *string `json:"postback_url,omitempty"`
	Url         *string `json:"url,omitempty"`

	// UseLegacyPayload Maintain compatibility with legacy handlers.
	UseLegacyPayload *bool `json:"use_legacy_payload,omitempty"`
}

// IntegrationZapier defines model for IntegrationZapier.
type IntegrationZapier struct {
	// ContactGroups Array of contact names or IDs this integration is assigned to
	ContactGroups *[]string `json:"contact_groups,omitempty"`
	IsErrored     *bool     `json:"is_errored,omitempty"`
	LastError     *string   `json:"last_error,omitempty"`

	// Module The provider of the integration.
	Module *string `json:"module,omitempty"`

	// Name Your preferred name for this integration.
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`

	// WebhookUrl The Webhook URL for triggering the alert in Zapier.
	WebhookUrl *string `json:"webhook_url,omitempty"`
}

// MagicLink defines model for MagicLink.
type MagicLink struct {
	// Email Email address to send magic link.
	Email *openapi_types.Email `json:"email,omitempty"`
}

// Metric defines model for Metric.
type Metric struct {
	IsVisible   *bool   `json:"is_visible,omitempty"`
	Name        string  `json:"name"`
	Pk          *int    `json:"pk,omitempty"`
	ServiceId   int     `json:"service_id"`
	ServiceName *string `json:"service_name,omitempty"`
	ServiceType *string `json:"service_type,omitempty"`
	ServiceUrl  *string `json:"service_url,omitempty"`
	Url         *string `json:"url,omitempty"`
}

// Outages defines model for Outages.
type Outages struct {
	AllAlerts []struct {
		CreatedAt            *time.Time `json:"created_at,omitempty"`
		Location             *string    `json:"location,omitempty"`
		MonitoringServerIpv4 *string    `json:"monitoring_server_ipv4,omitempty"`
		MonitoringServerIpv6 *string    `json:"monitoring_server_ipv6,omitempty"`
		MonitoringServerName *string    `json:"monitoring_server_name,omitempty"`
		Output               *string    `json:"output,omitempty"`
		Pk                   *int       `json:"pk,omitempty"`
		Url                  *string    `json:"url,omitempty"`
	} `json:"all_alerts"`
	CheckAddress               string    `json:"check_address"`
	CheckMonitoringServiceType string    `json:"check_monitoring_service_type"`
	CheckName                  string    `json:"check_name"`
	CheckPk                    int       `json:"check_pk"`
	CheckUrl                   *string   `json:"check_url,omitempty"`
	CreatedAt                  time.Time `json:"created_at"`
	DurationSecs               *string   `json:"duration_secs,omitempty"`
	IgnoreAlertUrl             *string   `json:"ignore_alert_url,omitempty"`
	Ignored                    *bool     `json:"ignored,omitempty"`
	NumLocationsDown           int       `json:"num_locations_down"`
	Pk                         *int      `json:"pk,omitempty"`
	ResolvedAt                 *string   `json:"resolved_at,omitempty"`
	StateIsUp                  bool      `json:"state_is_up"`
	Url                        *string   `json:"url,omitempty"`
}

// PasswordReset defines model for PasswordReset.
type PasswordReset struct {
	// Email Email address to send password recovery link.
	Email *openapi_types.Email `json:"email,omitempty"`
}

// PushNotificationProfile defines model for PushNotificationProfile.
type PushNotificationProfile struct {
	// ContactGroups Array of contact names or IDs to this push notification will receive alerts for.
	ContactGroups []string   `json:"contact_groups"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	DeviceName    string     `json:"device_name"`
	DisplayName   *string    `json:"display_name,omitempty"`
	ModifiedAt    *time.Time `json:"modified_at,omitempty"`
	Pk            *int       `json:"pk,omitempty"`
	Url           *string    `json:"url,omitempty"`
	User          *string    `json:"user,omitempty"`
	Uuid          *string    `json:"uuid,omitempty"`
}

// PushNotificationProfileCreate defines model for PushNotificationProfileCreate.
type PushNotificationProfileCreate struct {
	AppKey *string `json:"app_key,omitempty"`

	// ContactGroups Array of contact names or IDs to this push notification will receive alerts for.
	ContactGroups []string   `json:"contact_groups"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	DeviceName    string     `json:"device_name"`
	DisplayName   *string    `json:"display_name,omitempty"`
	ModifiedAt    *time.Time `json:"modified_at,omitempty"`
	Pk            *int       `json:"pk,omitempty"`
	Url           *string    `json:"url,omitempty"`
	User          *string    `json:"user,omitempty"`
	Uuid          *string    `json:"uuid,omitempty"`
}

// ResponseTime defines model for ResponseTime.
type ResponseTime struct {
	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate      *time.Time              `json:"end_date,omitempty"`
	ResponseTime *map[string]interface{} `json:"response_time,omitempty"`

	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *time.Time `json:"start_date,omitempty"`
}

// SLAReport defines model for SLAReport.
type SLAReport struct {
	CreatedAt                       *time.Time                 `json:"created_at,omitempty"`
	DefaultDateRange                *SLAReportDefaultDateRange `json:"default_date_range,omitempty"`
	FilterResponseTimeSlaViolations *bool                      `json:"filter_response_time_sla_violations,omitempty"`
	FilterSlowest                   *bool                      `json:"filter_slowest,omitempty"`
	FilterUptimeSlaViolations       *bool                      `json:"filter_uptime_sla_violations,omitempty"`
	FilterWithDowntime              *bool                      `json:"filter_with_downtime,omitempty"`

	// Name Name of this SLA report
	Name                    string                            `json:"name"`
	Pk                      *int                              `json:"pk,omitempty"`
	ResponseTimeSectionSort *SLAReportResponseTimeSectionSort `json:"response_time_section_sort,omitempty"`

	// ServicesSelected Include checks from this list
	ServicesSelected *[]string `json:"services_selected,omitempty"`

	// ServicesTags Include checks with one or more of the selected tags
	ServicesTags            *[]string                   `json:"services_tags,omitempty"`
	ShowResponseTimeSection *bool                       `json:"show_response_time_section,omitempty"`
	ShowResponseTimeSla     *bool                       `json:"show_response_time_sla,omitempty"`
	ShowUptimeSection       *bool                       `json:"show_uptime_section,omitempty"`
	ShowUptimeSla           *bool                       `json:"show_uptime_sla,omitempty"`
	StatsUrl                *string                     `json:"stats_url,omitempty"`
	UptimeSectionSort       *SLAReportUptimeSectionSort `json:"uptime_section_sort,omitempty"`
	Url                     *string                     `json:"url,omitempty"`
}

// SLAReportDefaultDateRange defines model for SLAReport.DefaultDateRange.
type SLAReportDefaultDateRange string

// SLAReportResponseTimeSectionSort defines model for SLAReport.ResponseTimeSectionSort.
type SLAReportResponseTimeSectionSort string

// SLAReportUptimeSectionSort defines model for SLAReport.UptimeSectionSort.
type SLAReportUptimeSectionSort string

// SLAReportStats defines model for SLAReportStats.
type SLAReportStats struct {
	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate             *time.Time `json:"end_date,omitempty"`
	HasResponseTimeData *bool      `json:"has_response_time_data,omitempty"`

	// Output The output format of the report: [json, pdf, xls]
	Output       *SLAReportStatsOutput     `json:"output,omitempty"`
	ResponseTime *[]map[string]interface{} `json:"response_time,omitempty"`

	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate                 *time.Time              `json:"start_date,omitempty"`
	Uptime                    *map[string]interface{} `json:"uptime,omitempty"`
	UsesDailyResponseTimeData *bool                   `json:"uses_daily_response_time_data,omitempty"`
}

// SLAReportStatsOutput The output format of the report: [json, pdf, xls]
type SLAReportStatsOutput string

// ScheduledReport defines model for ScheduledReport.
type ScheduledReport struct {
	// AtTime Reports will be sent at this time (local time)
	AtTime    *ScheduledReportAtTime   `json:"at_time,omitempty"`
	CreatedAt *time.Time               `json:"created_at,omitempty"`
	FileType  *ScheduledReportFileType `json:"file_type,omitempty"`
	IsEnabled *bool                    `json:"is_enabled,omitempty"`

	// Name Name of this scheduled report
	Name string `json:"name"`

	// OnWeekday Weekly reports will be sent on this day
	OnWeekday *ScheduledReportOnWeekday `json:"on_weekday,omitempty"`
	Pk        *int                      `json:"pk,omitempty"`

	// RecipientEmails Additional emails that will receive this report
	RecipientEmails *map[string]interface{} `json:"recipient_emails,omitempty"`

	// RecipientUsers Select the users that should receive this report
	RecipientUsers *[]string `json:"recipient_users,omitempty"`

	// Recurrence How often to deliver this report
	Recurrence *ScheduledReportRecurrence `json:"recurrence,omitempty"`

	// SlaReport Select an SLA report to send on this schedule
	SlaReport *string `json:"sla_report"`
	Url       *string `json:"url,omitempty"`
}

// ScheduledReportAtTime Reports will be sent at this time (local time)
type ScheduledReportAtTime int

// ScheduledReportFileType defines model for ScheduledReport.FileType.
type ScheduledReportFileType string

// ScheduledReportOnWeekday Weekly reports will be sent on this day
type ScheduledReportOnWeekday int

// ScheduledReportRecurrence How often to deliver this report
type ScheduledReportRecurrence string

// StatusPage defines model for StatusPage.
type StatusPage struct {
	AllowDrillDown            *bool                            `json:"allow_drill_down,omitempty"`
	AllowPdfReport            *bool                            `json:"allow_pdf_report,omitempty"`
	AllowSearchIndexing       *bool                            `json:"allow_search_indexing,omitempty"`
	AllowSubscriptions        *bool                            `json:"allow_subscriptions,omitempty"`
	AuthPassword              *string                          `json:"auth_password,omitempty"`
	AuthUsername              *string                          `json:"auth_username,omitempty"`
	Cname                     *string                          `json:"cname"`
	CnameUrl                  *string                          `json:"cname_url,omitempty"`
	CompanyWebsiteUrl         *string                          `json:"company_website_url,omitempty"`
	ComponentsUrl             *string                          `json:"components_url,omitempty"`
	ContactEmail              *openapi_types.Email             `json:"contact_email,omitempty"`
	CurrentStatusUrl          *string                          `json:"current_status_url,omitempty"`
	CustomCss                 *string                          `json:"custom_css,omitempty"`
	CustomFooterHtml          *string                          `json:"custom_footer_html,omitempty"`
	CustomHeaderHtml          *string                          `json:"custom_header_html,omitempty"`
	DefaultHistoryDateRange   *int                             `json:"default_history_date_range,omitempty"`
	Description               *string                          `json:"description,omitempty"`
	DescriptionHtml           *string                          `json:"description_html,omitempty"`
	EmailFrom                 *openapi_types.Email             `json:"email_from,omitempty"`
	EmailLogoUrl              *string                          `json:"email_logo_url,omitempty"`
	EmailReplyTo              *openapi_types.Email             `json:"email_reply_to,omitempty"`
	FaviconUrl                *string                          `json:"favicon_url,omitempty"`
	GoogleAnalyticsCode       *string                          `json:"google_analytics_code,omitempty"`
	HistoryUrl                *string                          `json:"history_url,omitempty"`
	IncidentsUrl              *string                          `json:"incidents_url,omitempty"`
	LogoUrl                   *string                          `json:"logo_url,omitempty"`
	MetricsUrl                *string                          `json:"metrics_url,omitempty"`
	Name                      string                           `json:"name"`
	PageType                  StatusPagePageType               `json:"page_type"`
	PageTypeDisplay           *string                          `json:"page_type_display,omitempty"`
	Pk                        *int                             `json:"pk,omitempty"`
	PrivateUrl                *string                          `json:"private_url,omitempty"`
	PublicUrl                 *string                          `json:"public_url,omitempty"`
	ShowActiveIncidents       *bool                            `json:"show_active_incidents,omitempty"`
	ShowComponentHistory      *bool                            `json:"show_component_history,omitempty"`
	ShowComponentResponseTime *bool                            `json:"show_component_response_time,omitempty"`
	ShowHistorySnake          *bool                            `json:"show_history_snake,omitempty"`
	ShowHistoryTab            *bool                            `json:"show_history_tab,omitempty"`
	ShowPastIncidents         *bool                            `json:"show_past_incidents,omitempty"`
	ShowStatusTab             *bool                            `json:"show_status_tab,omitempty"`
	ShowSummaryMetrics        *bool                            `json:"show_summary_metrics,omitempty"`
	Slug                      *string                          `json:"slug"`
	UptimeCalculationType     *StatusPageUptimeCalculationType `json:"uptime_calculation_type,omitempty"`
	Url                       *string                          `json:"url,omitempty"`
	VisibilityLevel           *StatusPageVisibilityLevel       `json:"visibility_level,omitempty"`
}

// StatusPagePageType defines model for StatusPage.PageType.
type StatusPagePageType string

// StatusPageUptimeCalculationType defines model for StatusPage.UptimeCalculationType.
type StatusPageUptimeCalculationType string

// StatusPageVisibilityLevel defines model for StatusPage.VisibilityLevel.
type StatusPageVisibilityLevel string

// StatusPageCurrentStatus defines model for StatusPageCurrentStatus.
type StatusPageCurrentStatus struct {
	ActiveIncidents []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                        `json:"description,omitempty"`
			Id          *int                                                           `json:"id,omitempty"`
			Name        *string                                                        `json:"name,omitempty"`
			Status      StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                         `json:"created_at,omitempty"`
		Description            *string                                            `json:"description,omitempty"`
		Duration               *string                                            `json:"duration,omitempty"`
		EndsAt                 *time.Time                                         `json:"ends_at"`
		IncidentState          *string                                            `json:"incident_state,omitempty"`
		IncidentType           StatusPageCurrentStatusActiveIncidentsIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                            `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                              `json:"include_in_global_metrics,omitempty"`

		// Name The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                                 `json:"created_at,omitempty"`
			Description          *string                                                    `json:"description,omitempty"`
			Id                   *int                                                       `json:"id,omitempty"`
			IncidentState        StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                                    `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                                 `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"active_incidents"`
	CnameUrl   *string `json:"cname_url,omitempty"`
	Components []struct {
		AutoSetStatus *StatusPageCurrentStatusComponentsAutoSetStatus `json:"auto_set_status,omitempty"`
		CreatedAt     *time.Time                                      `json:"created_at,omitempty"`
		Description   *string                                         `json:"description,omitempty"`
		GroupId       *int                                            `json:"group_id"`
		IsGroup       *bool                                           `json:"is_group,omitempty"`
		Name          string                                          `json:"name"`
		Pk            *int                                            `json:"pk,omitempty"`
		ServiceId     *int                                            `json:"service_id"`
		ServiceUrl    *string                                         `json:"service_url,omitempty"`
		Status        *StatusPageCurrentStatusComponentsStatus        `json:"status,omitempty"`
		Url           *string                                         `json:"url,omitempty"`
	} `json:"components"`
	ComponentsUrl       *string `json:"components_url,omitempty"`
	CurrentStatusUrl    *string `json:"current_status_url,omitempty"`
	Description         *string `json:"description,omitempty"`
	GlobalIsOperational bool    `json:"global_is_operational"`
	HistoryUrl          *string `json:"history_url,omitempty"`
	IncidentsUrl        *string `json:"incidents_url,omitempty"`
	Metrics             []struct {
		IsVisible   *bool   `json:"is_visible,omitempty"`
		Name        string  `json:"name"`
		Pk          *int    `json:"pk,omitempty"`
		ServiceId   int     `json:"service_id"`
		ServiceName *string `json:"service_name,omitempty"`
		ServiceType *string `json:"service_type,omitempty"`
		ServiceUrl  *string `json:"service_url,omitempty"`
		Url         *string `json:"url,omitempty"`
	} `json:"metrics"`
	MetricsUrl          *string                         `json:"metrics_url,omitempty"`
	Name                string                          `json:"name"`
	PageType            StatusPageCurrentStatusPageType `json:"page_type"`
	Pk                  *int                            `json:"pk,omitempty"`
	PrivateUrl          *string                         `json:"private_url,omitempty"`
	PublicUrl           *string                         `json:"public_url,omitempty"`
	UpcomingMaintenance []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                            `json:"description,omitempty"`
			Id          *int                                                               `json:"id,omitempty"`
			Name        *string                                                            `json:"name,omitempty"`
			Status      StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                             `json:"created_at,omitempty"`
		Description            *string                                                `json:"description,omitempty"`
		Duration               *string                                                `json:"duration,omitempty"`
		EndsAt                 *time.Time                                             `json:"ends_at"`
		IncidentState          *string                                                `json:"incident_state,omitempty"`
		IncidentType           StatusPageCurrentStatusUpcomingMaintenanceIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                                `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                                  `json:"include_in_global_metrics,omitempty"`

		// Name The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                                     `json:"created_at,omitempty"`
			Description          *string                                                        `json:"description,omitempty"`
			Id                   *int                                                           `json:"id,omitempty"`
			IncidentState        StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                                        `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                                     `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"upcoming_maintenance"`
	Url             *string                                 `json:"url,omitempty"`
	VisibilityLevel *StatusPageCurrentStatusVisibilityLevel `json:"visibility_level,omitempty"`
}

// StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus defines model for StatusPageCurrentStatus.ActiveIncidents.AffectedComponents.Status.
type StatusPageCurrentStatusActiveIncidentsAffectedComponentsStatus string

// StatusPageCurrentStatusActiveIncidentsIncidentType defines model for StatusPageCurrentStatus.ActiveIncidents.IncidentType.
type StatusPageCurrentStatusActiveIncidentsIncidentType string

// StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState defines model for StatusPageCurrentStatus.ActiveIncidents.Updates.IncidentState.
type StatusPageCurrentStatusActiveIncidentsUpdatesIncidentState string

// StatusPageCurrentStatusComponentsAutoSetStatus defines model for StatusPageCurrentStatus.Components.AutoSetStatus.
type StatusPageCurrentStatusComponentsAutoSetStatus string

// StatusPageCurrentStatusComponentsStatus defines model for StatusPageCurrentStatus.Components.Status.
type StatusPageCurrentStatusComponentsStatus string

// StatusPageCurrentStatusPageType defines model for StatusPageCurrentStatus.PageType.
type StatusPageCurrentStatusPageType string

// StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus defines model for StatusPageCurrentStatus.UpcomingMaintenance.AffectedComponents.Status.
type StatusPageCurrentStatusUpcomingMaintenanceAffectedComponentsStatus string

// StatusPageCurrentStatusUpcomingMaintenanceIncidentType defines model for StatusPageCurrentStatus.UpcomingMaintenance.IncidentType.
type StatusPageCurrentStatusUpcomingMaintenanceIncidentType string

// StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState defines model for StatusPageCurrentStatus.UpcomingMaintenance.Updates.IncidentState.
type StatusPageCurrentStatusUpcomingMaintenanceUpdatesIncidentState string

// StatusPageCurrentStatusVisibilityLevel defines model for StatusPageCurrentStatus.VisibilityLevel.
type StatusPageCurrentStatusVisibilityLevel string

// StatusPageHistory defines model for StatusPageHistory.
type StatusPageHistory struct {
	CnameUrl         *string                   `json:"cname_url,omitempty"`
	ComponentHistory *string                   `json:"component_history,omitempty"`
	ComponentsUrl    *string                   `json:"components_url,omitempty"`
	CurrentStatusUrl *string                   `json:"current_status_url,omitempty"`
	DateHistory      *string                   `json:"date_history,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	EndDate          time.Time                 `json:"end_date"`
	GlobalMetrics    *string                   `json:"global_metrics,omitempty"`
	HistoryUrl       *string                   `json:"history_url,omitempty"`
	IncidentsUrl     *string                   `json:"incidents_url,omitempty"`
	MetricsUrl       *string                   `json:"metrics_url,omitempty"`
	Name             string                    `json:"name"`
	PageType         StatusPageHistoryPageType `json:"page_type"`
	PastIncidents    []struct {
		AffectedComponents *[]struct {
			Component struct {
				Id   int     `json:"id"`
				Name *string `json:"name,omitempty"`
			} `json:"component"`
			Description *string                                                `json:"description,omitempty"`
			Id          *int                                                   `json:"id,omitempty"`
			Name        *string                                                `json:"name,omitempty"`
			Status      StatusPageHistoryPastIncidentsAffectedComponentsStatus `json:"status"`
		} `json:"affected_components"`
		CreatedAt              *time.Time                                 `json:"created_at,omitempty"`
		Description            *string                                    `json:"description,omitempty"`
		Duration               *string                                    `json:"duration,omitempty"`
		EndsAt                 *time.Time                                 `json:"ends_at"`
		IncidentState          *string                                    `json:"incident_state,omitempty"`
		IncidentType           StatusPageHistoryPastIncidentsIncidentType `json:"incident_type"`
		IncidentTypeDisplay    *string                                    `json:"incident_type_display,omitempty"`
		IncludeInGlobalMetrics *bool                                      `json:"include_in_global_metrics,omitempty"`

		// Name The name of incident, eg. a problem or resolution
		Name                  string     `json:"name"`
		Pk                    *int       `json:"pk,omitempty"`
		StartsAt              *time.Time `json:"starts_at"`
		UpdateComponentStatus *bool      `json:"update_component_status,omitempty"`
		Updates               []struct {
			CreatedAt            *time.Time                                         `json:"created_at,omitempty"`
			Description          *string                                            `json:"description,omitempty"`
			Id                   *int                                               `json:"id,omitempty"`
			IncidentState        StatusPageHistoryPastIncidentsUpdatesIncidentState `json:"incident_state"`
			IncidentStateDisplay *string                                            `json:"incident_state_display,omitempty"`
			UpdatedAt            *time.Time                                         `json:"updated_at,omitempty"`
		} `json:"updates"`
		Url *string `json:"url,omitempty"`
	} `json:"past_incidents"`
	Pk                    *int                                    `json:"pk,omitempty"`
	PrivateUrl            *string                                 `json:"private_url,omitempty"`
	PublicUrl             *string                                 `json:"public_url,omitempty"`
	StartDate             time.Time                               `json:"start_date"`
	UptimeCalculationType *StatusPageHistoryUptimeCalculationType `json:"uptime_calculation_type,omitempty"`
	Url                   *string                                 `json:"url,omitempty"`
	VisibilityLevel       *StatusPageHistoryVisibilityLevel       `json:"visibility_level,omitempty"`
}

// StatusPageHistoryPageType defines model for StatusPageHistory.PageType.
type StatusPageHistoryPageType string

// StatusPageHistoryPastIncidentsAffectedComponentsStatus defines model for StatusPageHistory.PastIncidents.AffectedComponents.Status.
type StatusPageHistoryPastIncidentsAffectedComponentsStatus string

// StatusPageHistoryPastIncidentsIncidentType defines model for StatusPageHistory.PastIncidents.IncidentType.
type StatusPageHistoryPastIncidentsIncidentType string

// StatusPageHistoryPastIncidentsUpdatesIncidentState defines model for StatusPageHistory.PastIncidents.Updates.IncidentState.
type StatusPageHistoryPastIncidentsUpdatesIncidentState string

// StatusPageHistoryUptimeCalculationType defines model for StatusPageHistory.UptimeCalculationType.
type StatusPageHistoryUptimeCalculationType string

// StatusPageHistoryVisibilityLevel defines model for StatusPageHistory.VisibilityLevel.
type StatusPageHistoryVisibilityLevel string

// Subaccount defines model for Subaccount.
type Subaccount struct {
	Name string  `json:"name"`
	Pk   *int    `json:"pk,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// SubaccountPacks defines model for SubaccountPacks.
type SubaccountPacks struct {
	// Num Number of packs to be transferred
	Num *int `json:"num,omitempty"`
}

// User defines model for User.
type User struct {
	// AccessLevel The permission level for this user
	AccessLevel *UserAccessLevel `json:"access_level,omitempty"`
	Account     *struct {
		FreeTrialExpiresAt *time.Time           `json:"free_trial_expires_at"`
		Name               string               `json:"name"`
		Timezone           *UserAccountTimezone `json:"timezone,omitempty"`
	} `json:"account,omitempty"`

	// AssignedSubaccounts Which subaccounts this user may access, or empty for All Subaccounts.
	AssignedSubaccounts *[]string `json:"assigned_subaccounts,omitempty"`

	// Email The user's email address, used as their username
	Email openapi_types.Email `json:"email"`

	// FirstName The user's first name
	FirstName string `json:"first_name"`

	// IsActive Whether this user account is active or disabled
	IsActive *bool `json:"is_active,omitempty"`

	// IsApiEnabled Whether this user may access the API
	IsApiEnabled *bool `json:"is_api_enabled,omitempty"`

	// IsPrimary Whether this user is the account owner
	IsPrimary *bool `json:"is_primary,omitempty"`

	// LastName The user's first name
	LastName      string  `json:"last_name"`
	MustTwoFactor *string `json:"must_two_factor,omitempty"`

	// NotifyPaidInvoices Whether this user should receive new invoices
	NotifyPaidInvoices *bool `json:"notify_paid_invoices,omitempty"`

	// Password The user's password
	Password         *string               `json:"password,omitempty"`
	Pk               *int                  `json:"pk,omitempty"`
	RequireTwoFactor *UserRequireTwoFactor `json:"require_two_factor,omitempty"`
	Timezone         *string               `json:"timezone,omitempty"`
	Url              *string               `json:"url,omitempty"`
}

// UserAccessLevel The permission level for this user
type UserAccessLevel string

// UserAccountTimezone defines model for User.Account.Timezone.
type UserAccountTimezone string

// UserRequireTwoFactor defines model for User.RequireTwoFactor.
type UserRequireTwoFactor string

// GetAlertlistParams defines parameters for GetAlertlist.
type GetAlertlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetAlertlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// StateIsUp Filter by alert state up/down.
	StateIsUp *bool `form:"state_is_up,omitempty" json:"state_is_up,omitempty"`

	// CheckPk Filter by check ID.
	CheckPk *float32 `form:"check_pk,omitempty" json:"check_pk,omitempty"`

	// CheckMonitoringServiceType Filter by check type.
	CheckMonitoringServiceType *GetAlertlistParamsCheckMonitoringServiceType `form:"check_monitoring_service_type,omitempty" json:"check_monitoring_service_type,omitempty"`

	// CheckTag Filter by tag name (can be specified multiple times.)
	CheckTag *string `form:"check_tag,omitempty" json:"check_tag,omitempty"`

	// StartDate Start date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate End date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetAlertlistParamsOrdering defines parameters for GetAlertlist.
type GetAlertlistParamsOrdering string

// GetAlertlistParamsCheckMonitoringServiceType defines parameters for GetAlertlist.
type GetAlertlistParamsCheckMonitoringServiceType string

// GetServicetaglistParams defines parameters for GetServicetaglist.
type GetServicetaglistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetServicetaglistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetServicetaglistParamsOrdering defines parameters for GetServicetaglist.
type GetServicetaglistParamsOrdering string

// GetServicelistParams defines parameters for GetServicelist.
type GetServicelistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetServicelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// MonitoringServiceType Filter by check type.
	MonitoringServiceType *GetServicelistParamsMonitoringServiceType `form:"monitoring_service_type,omitempty" json:"monitoring_service_type,omitempty"`

	// IsPaused Filter by paused status.
	IsPaused *bool `form:"is_paused,omitempty" json:"is_paused,omitempty"`

	// IsUnderMaintenance Filter for checks currently under maintenance.
	IsUnderMaintenance *bool `form:"is_under_maintenance,omitempty" json:"is_under_maintenance,omitempty"`

	// StateIsUp Filter by check up/down state.
	StateIsUp *bool `form:"state_is_up,omitempty" json:"state_is_up,omitempty"`

	// HasMaintenanceSchedule Filter by checks that have a maintenance schedule.
	HasMaintenanceSchedule *bool `form:"has_maintenance_schedule,omitempty" json:"has_maintenance_schedule,omitempty"`

	// Tag Filter by tag name (can be specified multiple times.)
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`
}

// GetServicelistParamsOrdering defines parameters for GetServicelist.
type GetServicelistParamsOrdering string

// GetServicelistParamsMonitoringServiceType defines parameters for GetServicelist.
type GetServicelistParamsMonitoringServiceType string

// GetServiceBulkStatsParams defines parameters for GetServiceBulkStats.
type GetServiceBulkStatsParams struct {
	Pk []interface{} `form:"pk" json:"pk"`

	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// IncludeAlerts Include alert data for each outage in the period.
	IncludeAlerts *bool `form:"include_alerts,omitempty" json:"include_alerts,omitempty"`
}

// GetServiceResponseTimeDatapointsParams defines parameters for GetServiceResponseTimeDatapoints.
type GetServiceResponseTimeDatapointsParams struct {
	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetServiceStatsParams defines parameters for GetServiceStats.
type GetServiceStatsParams struct {
	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Location Show response time for specified location only.
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// LocationsResponseTimes Include response time datapoints for all locations.
	LocationsResponseTimes *bool `form:"locations_response_times,omitempty" json:"locations_response_times,omitempty"`

	// IncludeAlerts Include alert data for each outage in the period.
	IncludeAlerts *bool `form:"include_alerts,omitempty" json:"include_alerts,omitempty"`

	// Download Set this paramater to download an XLS containing the stats.
	Download *bool `form:"download,omitempty" json:"download,omitempty"`

	// Pdf Set this paramater to download a PDF report.
	Pdf *bool `form:"pdf,omitempty" json:"pdf,omitempty"`
}

// GetContactgrouplistParams defines parameters for GetContactgrouplist.
type GetContactgrouplistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetContactgrouplistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// HasOnCallSchedule Filter by contacts that have on-call schedules defined.
	HasOnCallSchedule *bool `form:"has_on_call_schedule,omitempty" json:"has_on_call_schedule,omitempty"`
}

// GetContactgrouplistParamsOrdering defines parameters for GetContactgrouplist.
type GetContactgrouplistParamsOrdering string

// GetDashboardlistParams defines parameters for GetDashboardlist.
type GetDashboardlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetDashboardlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetDashboardlistParamsOrdering defines parameters for GetDashboardlist.
type GetDashboardlistParamsOrdering string

// GetIntegrationlistParams defines parameters for GetIntegrationlist.
type GetIntegrationlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetIntegrationlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Module Filter by integration provider.
	Module *GetIntegrationlistParamsModule `form:"module,omitempty" json:"module,omitempty"`

	// IsErrored Filter by whether this integration has stopped due to errors.
	IsErrored *bool `form:"is_errored,omitempty" json:"is_errored,omitempty"`
}

// GetIntegrationlistParamsOrdering defines parameters for GetIntegrationlist.
type GetIntegrationlistParamsOrdering string

// GetIntegrationlistParamsModule defines parameters for GetIntegrationlist.
type GetIntegrationlistParamsModule string

// GetOutagelistParams defines parameters for GetOutagelist.
type GetOutagelistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetOutagelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// CheckPk Filter by check ID.
	CheckPk *float32 `form:"check_pk,omitempty" json:"check_pk,omitempty"`

	// CheckMonitoringServiceType Filter by check type.
	CheckMonitoringServiceType *GetOutagelistParamsCheckMonitoringServiceType `form:"check_monitoring_service_type,omitempty" json:"check_monitoring_service_type,omitempty"`

	// CheckTag Filter by tag name (can be specified multiple times.)
	CheckTag *string `form:"check_tag,omitempty" json:"check_tag,omitempty"`

	// StartDate Start date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate End date in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Ongoing Whether the outage is ongoing (true) or resolved (false).
	Ongoing *bool `form:"ongoing,omitempty" json:"ongoing,omitempty"`
}

// GetOutagelistParamsOrdering defines parameters for GetOutagelist.
type GetOutagelistParamsOrdering string

// GetOutagelistParamsCheckMonitoringServiceType defines parameters for GetOutagelist.
type GetOutagelistParamsCheckMonitoringServiceType string

// GetPushnotificationlistParams defines parameters for GetPushnotificationlist.
type GetPushnotificationlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetPushnotificationlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetPushnotificationlistParamsOrdering defines parameters for GetPushnotificationlist.
type GetPushnotificationlistParamsOrdering string

// GetScheduledreportlistParams defines parameters for GetScheduledreportlist.
type GetScheduledreportlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetScheduledreportlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetScheduledreportlistParamsOrdering defines parameters for GetScheduledreportlist.
type GetScheduledreportlistParamsOrdering string

// GetSlareportlistParams defines parameters for GetSlareportlist.
type GetSlareportlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetSlareportlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetSlareportlistParamsOrdering defines parameters for GetSlareportlist.
type GetSlareportlistParamsOrdering string

// GetSlaReportStatsParams defines parameters for GetSlaReportStats.
type GetSlaReportStatsParams struct {
	// StartDate The first day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate The last day to show statistics for in ISO 8601 (YYYY-MM-DDTHH:MM:SSZ) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Output The output format of the report: [json, pdf, xls]
	Output *GetSlaReportStatsParamsOutput `form:"output,omitempty" json:"output,omitempty"`
}

// GetSlaReportStatsParamsOutput defines parameters for GetSlaReportStats.
type GetSlaReportStatsParamsOutput string

// GetStatuspagelistParams defines parameters for GetStatuspagelist.
type GetStatuspagelistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetStatuspagelistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// VisibilityLevel Status Page by visibility level.
	VisibilityLevel *GetStatuspagelistParamsVisibilityLevel `form:"visibility_level,omitempty" json:"visibility_level,omitempty"`
}

// GetStatuspagelistParamsOrdering defines parameters for GetStatuspagelist.
type GetStatuspagelistParamsOrdering string

// GetStatuspagelistParamsVisibilityLevel defines parameters for GetStatuspagelist.
type GetStatuspagelistParamsVisibilityLevel string

// GetStatuspageHistoryParams defines parameters for GetStatuspageHistory.
type GetStatuspageHistoryParams struct {
	// StartDate Start date in ISO 8601 (YYYY-MM-DD) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate End date in ISO 8601 (YYYY-MM-DD) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`
}

// GetComponentslistParams defines parameters for GetComponentslist.
type GetComponentslistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// GroupId Filter by whether this component belongs to group with this ID
	GroupId *float32 `form:"group_id,omitempty" json:"group_id,omitempty"`

	// IsGroup Filter by whether this component is a group
	IsGroup *bool `form:"is_group,omitempty" json:"is_group,omitempty"`
}

// GetIncidentlistParams defines parameters for GetIncidentlist.
type GetIncidentlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// IncidentType Filter by incident type
	IncidentType *GetIncidentlistParamsIncidentType `form:"incident_type,omitempty" json:"incident_type,omitempty"`

	// StartDate Start date in ISO 8601 (YYYY-MM-DD) format.
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty"`

	// EndDate Start date in ISO 8601 (YYYY-MM-DD) format.
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetIncidentlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`
}

// GetIncidentlistParamsIncidentType defines parameters for GetIncidentlist.
type GetIncidentlistParamsIncidentType string

// GetIncidentlistParamsOrdering defines parameters for GetIncidentlist.
type GetIncidentlistParamsOrdering string

// GetMetricslistParams defines parameters for GetMetricslist.
type GetMetricslistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// IsVisible Filter by whether this metric is visible to Status Page visitors
	IsVisible *bool `form:"is_visible,omitempty" json:"is_visible,omitempty"`
}

// GetUserlistParams defines parameters for GetUserlist.
type GetUserlistParams struct {
	// Page A page number within the paginated result set.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`

	// Search A search term.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Ordering Order results by this field.
	Ordering *GetUserlistParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Email Filter by email address.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// AccessLevel Filter by access level.
	AccessLevel *GetUserlistParamsAccessLevel `form:"access_level,omitempty" json:"access_level,omitempty"`

	// Subaccount Filter by users that have access to this subaccount ID.
	Subaccount *string `form:"subaccount,omitempty" json:"subaccount,omitempty"`

	// IsActive Filter by whether the user is active.
	IsActive *bool `form:"is_active,omitempty" json:"is_active,omitempty"`

	// IsApiEnabled Filter by whether the API is enabled for this user.
	IsApiEnabled *bool `form:"is_api_enabled,omitempty" json:"is_api_enabled,omitempty"`

	// NotifyPaidInvoices Filter by whether invoices are sent to this user.
	NotifyPaidInvoices *bool `form:"notify_paid_invoices,omitempty" json:"notify_paid_invoices,omitempty"`
}

// GetUserlistParamsOrdering defines parameters for GetUserlist.
type GetUserlistParamsOrdering string

// GetUserlistParamsAccessLevel defines parameters for GetUserlist.
type GetUserlistParamsAccessLevel string

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = AuthTokenWithTOTP

// PostAuthLoginFormdataRequestBody defines body for PostAuthLogin for application/x-www-form-urlencoded ContentType.
type PostAuthLoginFormdataRequestBody = AuthTokenWithTOTP

// PostAuthLoginMultipartRequestBody defines body for PostAuthLogin for multipart/form-data ContentType.
type PostAuthLoginMultipartRequestBody = AuthTokenWithTOTP

// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody = PasswordReset

// PostAuthResetPasswordFormdataRequestBody defines body for PostAuthResetPassword for application/x-www-form-urlencoded ContentType.
type PostAuthResetPasswordFormdataRequestBody = PasswordReset

// PostAuthResetPasswordMultipartRequestBody defines body for PostAuthResetPassword for multipart/form-data ContentType.
type PostAuthResetPasswordMultipartRequestBody = PasswordReset

// PostSendMagicLinkJSONRequestBody defines body for PostSendMagicLink for application/json ContentType.
type PostSendMagicLinkJSONRequestBody = MagicLink

// PostSendMagicLinkFormdataRequestBody defines body for PostSendMagicLink for application/x-www-form-urlencoded ContentType.
type PostSendMagicLinkFormdataRequestBody = MagicLink

// PostSendMagicLinkMultipartRequestBody defines body for PostSendMagicLink for multipart/form-data ContentType.
type PostSendMagicLinkMultipartRequestBody = MagicLink

// PostAuthSubaccountsJSONRequestBody defines body for PostAuthSubaccounts for application/json ContentType.
type PostAuthSubaccountsJSONRequestBody = Subaccount

// PostAuthSubaccountsFormdataRequestBody defines body for PostAuthSubaccounts for application/x-www-form-urlencoded ContentType.
type PostAuthSubaccountsFormdataRequestBody = Subaccount

// PostAuthSubaccountsMultipartRequestBody defines body for PostAuthSubaccounts for multipart/form-data ContentType.
type PostAuthSubaccountsMultipartRequestBody = Subaccount

// PatchAuthSubaccountJSONRequestBody defines body for PatchAuthSubaccount for application/json ContentType.
type PatchAuthSubaccountJSONRequestBody = Subaccount

// PatchAuthSubaccountFormdataRequestBody defines body for PatchAuthSubaccount for application/x-www-form-urlencoded ContentType.
type PatchAuthSubaccountFormdataRequestBody = Subaccount

// PatchAuthSubaccountMultipartRequestBody defines body for PatchAuthSubaccount for multipart/form-data ContentType.
type PatchAuthSubaccountMultipartRequestBody = Subaccount

// PostAuthSubaccountPacksJSONRequestBody defines body for PostAuthSubaccountPacks for application/json ContentType.
type PostAuthSubaccountPacksJSONRequestBody = SubaccountPacks

// PostAuthSubaccountPacksFormdataRequestBody defines body for PostAuthSubaccountPacks for application/x-www-form-urlencoded ContentType.
type PostAuthSubaccountPacksFormdataRequestBody = SubaccountPacks

// PostAuthSubaccountPacksMultipartRequestBody defines body for PostAuthSubaccountPacks for multipart/form-data ContentType.
type PostAuthSubaccountPacksMultipartRequestBody = SubaccountPacks

// PostServicetaglistJSONRequestBody defines body for PostServicetaglist for application/json ContentType.
type PostServicetaglistJSONRequestBody = CheckTag

// PostServicetaglistFormdataRequestBody defines body for PostServicetaglist for application/x-www-form-urlencoded ContentType.
type PostServicetaglistFormdataRequestBody = CheckTag

// PostServicetaglistMultipartRequestBody defines body for PostServicetaglist for multipart/form-data ContentType.
type PostServicetaglistMultipartRequestBody = CheckTag

// PatchServiceTagDetailJSONRequestBody defines body for PatchServiceTagDetail for application/json ContentType.
type PatchServiceTagDetailJSONRequestBody = CheckTag

// PatchServiceTagDetailFormdataRequestBody defines body for PatchServiceTagDetail for application/x-www-form-urlencoded ContentType.
type PatchServiceTagDetailFormdataRequestBody = CheckTag

// PatchServiceTagDetailMultipartRequestBody defines body for PatchServiceTagDetail for multipart/form-data ContentType.
type PatchServiceTagDetailMultipartRequestBody = CheckTag

// PutServiceTagDetailJSONRequestBody defines body for PutServiceTagDetail for application/json ContentType.
type PutServiceTagDetailJSONRequestBody = CheckTag

// PutServiceTagDetailFormdataRequestBody defines body for PutServiceTagDetail for application/x-www-form-urlencoded ContentType.
type PutServiceTagDetailFormdataRequestBody = CheckTag

// PutServiceTagDetailMultipartRequestBody defines body for PutServiceTagDetail for multipart/form-data ContentType.
type PutServiceTagDetailMultipartRequestBody = CheckTag

// PostServiceCreateApiJSONRequestBody defines body for PostServiceCreateApi for application/json ContentType.
type PostServiceCreateApiJSONRequestBody = ChecksAPI

// PostServiceCreateApiFormdataRequestBody defines body for PostServiceCreateApi for application/x-www-form-urlencoded ContentType.
type PostServiceCreateApiFormdataRequestBody = ChecksAPI

// PostServiceCreateApiMultipartRequestBody defines body for PostServiceCreateApi for multipart/form-data ContentType.
type PostServiceCreateApiMultipartRequestBody = ChecksAPI

// PostServiceCreateBlacklistJSONRequestBody defines body for PostServiceCreateBlacklist for application/json ContentType.
type PostServiceCreateBlacklistJSONRequestBody = ChecksBLACKLIST

// PostServiceCreateBlacklistFormdataRequestBody defines body for PostServiceCreateBlacklist for application/x-www-form-urlencoded ContentType.
type PostServiceCreateBlacklistFormdataRequestBody = ChecksBLACKLIST

// PostServiceCreateBlacklistMultipartRequestBody defines body for PostServiceCreateBlacklist for multipart/form-data ContentType.
type PostServiceCreateBlacklistMultipartRequestBody = ChecksBLACKLIST

// PostServiceCreateDnsJSONRequestBody defines body for PostServiceCreateDns for application/json ContentType.
type PostServiceCreateDnsJSONRequestBody = ChecksDNS

// PostServiceCreateDnsFormdataRequestBody defines body for PostServiceCreateDns for application/x-www-form-urlencoded ContentType.
type PostServiceCreateDnsFormdataRequestBody = ChecksDNS

// PostServiceCreateDnsMultipartRequestBody defines body for PostServiceCreateDns for multipart/form-data ContentType.
type PostServiceCreateDnsMultipartRequestBody = ChecksDNS

// PostServiceCreateGroupJSONRequestBody defines body for PostServiceCreateGroup for application/json ContentType.
type PostServiceCreateGroupJSONRequestBody = ChecksGROUP

// PostServiceCreateGroupFormdataRequestBody defines body for PostServiceCreateGroup for application/x-www-form-urlencoded ContentType.
type PostServiceCreateGroupFormdataRequestBody = ChecksGROUP

// PostServiceCreateGroupMultipartRequestBody defines body for PostServiceCreateGroup for multipart/form-data ContentType.
type PostServiceCreateGroupMultipartRequestBody = ChecksGROUP

// PostServiceCreateHeartbeatJSONRequestBody defines body for PostServiceCreateHeartbeat for application/json ContentType.
type PostServiceCreateHeartbeatJSONRequestBody = ChecksHEARTBEAT

// PostServiceCreateHeartbeatFormdataRequestBody defines body for PostServiceCreateHeartbeat for application/x-www-form-urlencoded ContentType.
type PostServiceCreateHeartbeatFormdataRequestBody = ChecksHEARTBEAT

// PostServiceCreateHeartbeatMultipartRequestBody defines body for PostServiceCreateHeartbeat for multipart/form-data ContentType.
type PostServiceCreateHeartbeatMultipartRequestBody = ChecksHEARTBEAT

// PostServiceCreateHttpJSONRequestBody defines body for PostServiceCreateHttp for application/json ContentType.
type PostServiceCreateHttpJSONRequestBody = ChecksHTTP

// PostServiceCreateHttpFormdataRequestBody defines body for PostServiceCreateHttp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateHttpFormdataRequestBody = ChecksHTTP

// PostServiceCreateHttpMultipartRequestBody defines body for PostServiceCreateHttp for multipart/form-data ContentType.
type PostServiceCreateHttpMultipartRequestBody = ChecksHTTP

// PostServiceCreateIcmpJSONRequestBody defines body for PostServiceCreateIcmp for application/json ContentType.
type PostServiceCreateIcmpJSONRequestBody = ChecksICMP

// PostServiceCreateIcmpFormdataRequestBody defines body for PostServiceCreateIcmp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateIcmpFormdataRequestBody = ChecksICMP

// PostServiceCreateIcmpMultipartRequestBody defines body for PostServiceCreateIcmp for multipart/form-data ContentType.
type PostServiceCreateIcmpMultipartRequestBody = ChecksICMP

// PostServiceCreateImapJSONRequestBody defines body for PostServiceCreateImap for application/json ContentType.
type PostServiceCreateImapJSONRequestBody = ChecksIMAP

// PostServiceCreateImapFormdataRequestBody defines body for PostServiceCreateImap for application/x-www-form-urlencoded ContentType.
type PostServiceCreateImapFormdataRequestBody = ChecksIMAP

// PostServiceCreateImapMultipartRequestBody defines body for PostServiceCreateImap for multipart/form-data ContentType.
type PostServiceCreateImapMultipartRequestBody = ChecksIMAP

// PostServiceCreateMalwareJSONRequestBody defines body for PostServiceCreateMalware for application/json ContentType.
type PostServiceCreateMalwareJSONRequestBody = ChecksMALWARE

// PostServiceCreateMalwareFormdataRequestBody defines body for PostServiceCreateMalware for application/x-www-form-urlencoded ContentType.
type PostServiceCreateMalwareFormdataRequestBody = ChecksMALWARE

// PostServiceCreateMalwareMultipartRequestBody defines body for PostServiceCreateMalware for multipart/form-data ContentType.
type PostServiceCreateMalwareMultipartRequestBody = ChecksMALWARE

// PostServiceCreateNtpJSONRequestBody defines body for PostServiceCreateNtp for application/json ContentType.
type PostServiceCreateNtpJSONRequestBody = ChecksNTP

// PostServiceCreateNtpFormdataRequestBody defines body for PostServiceCreateNtp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateNtpFormdataRequestBody = ChecksNTP

// PostServiceCreateNtpMultipartRequestBody defines body for PostServiceCreateNtp for multipart/form-data ContentType.
type PostServiceCreateNtpMultipartRequestBody = ChecksNTP

// PostServiceCreatePopJSONRequestBody defines body for PostServiceCreatePop for application/json ContentType.
type PostServiceCreatePopJSONRequestBody = ChecksPOP

// PostServiceCreatePopFormdataRequestBody defines body for PostServiceCreatePop for application/x-www-form-urlencoded ContentType.
type PostServiceCreatePopFormdataRequestBody = ChecksPOP

// PostServiceCreatePopMultipartRequestBody defines body for PostServiceCreatePop for multipart/form-data ContentType.
type PostServiceCreatePopMultipartRequestBody = ChecksPOP

// PostServiceCreateRumJSONRequestBody defines body for PostServiceCreateRum for application/json ContentType.
type PostServiceCreateRumJSONRequestBody = ChecksRUM

// PostServiceCreateRumFormdataRequestBody defines body for PostServiceCreateRum for application/x-www-form-urlencoded ContentType.
type PostServiceCreateRumFormdataRequestBody = ChecksRUM

// PostServiceCreateRumMultipartRequestBody defines body for PostServiceCreateRum for multipart/form-data ContentType.
type PostServiceCreateRumMultipartRequestBody = ChecksRUM

// PostServiceCreateRum2JSONRequestBody defines body for PostServiceCreateRum2 for application/json ContentType.
type PostServiceCreateRum2JSONRequestBody = ChecksRUM2

// PostServiceCreateRum2FormdataRequestBody defines body for PostServiceCreateRum2 for application/x-www-form-urlencoded ContentType.
type PostServiceCreateRum2FormdataRequestBody = ChecksRUM2

// PostServiceCreateRum2MultipartRequestBody defines body for PostServiceCreateRum2 for multipart/form-data ContentType.
type PostServiceCreateRum2MultipartRequestBody = ChecksRUM2

// PostServiceCreateSmtpJSONRequestBody defines body for PostServiceCreateSmtp for application/json ContentType.
type PostServiceCreateSmtpJSONRequestBody = ChecksSMTP

// PostServiceCreateSmtpFormdataRequestBody defines body for PostServiceCreateSmtp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateSmtpFormdataRequestBody = ChecksSMTP

// PostServiceCreateSmtpMultipartRequestBody defines body for PostServiceCreateSmtp for multipart/form-data ContentType.
type PostServiceCreateSmtpMultipartRequestBody = ChecksSMTP

// PostServiceCreateSshJSONRequestBody defines body for PostServiceCreateSsh for application/json ContentType.
type PostServiceCreateSshJSONRequestBody = ChecksSSH

// PostServiceCreateSshFormdataRequestBody defines body for PostServiceCreateSsh for application/x-www-form-urlencoded ContentType.
type PostServiceCreateSshFormdataRequestBody = ChecksSSH

// PostServiceCreateSshMultipartRequestBody defines body for PostServiceCreateSsh for multipart/form-data ContentType.
type PostServiceCreateSshMultipartRequestBody = ChecksSSH

// PostServiceCreateSslCertJSONRequestBody defines body for PostServiceCreateSslCert for application/json ContentType.
type PostServiceCreateSslCertJSONRequestBody = ChecksSSLCERT

// PostServiceCreateSslCertFormdataRequestBody defines body for PostServiceCreateSslCert for application/x-www-form-urlencoded ContentType.
type PostServiceCreateSslCertFormdataRequestBody = ChecksSSLCERT

// PostServiceCreateSslCertMultipartRequestBody defines body for PostServiceCreateSslCert for multipart/form-data ContentType.
type PostServiceCreateSslCertMultipartRequestBody = ChecksSSLCERT

// PostServiceCreateTcpJSONRequestBody defines body for PostServiceCreateTcp for application/json ContentType.
type PostServiceCreateTcpJSONRequestBody = ChecksTCP

// PostServiceCreateTcpFormdataRequestBody defines body for PostServiceCreateTcp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateTcpFormdataRequestBody = ChecksTCP

// PostServiceCreateTcpMultipartRequestBody defines body for PostServiceCreateTcp for multipart/form-data ContentType.
type PostServiceCreateTcpMultipartRequestBody = ChecksTCP

// PostServiceCreateTransactionJSONRequestBody defines body for PostServiceCreateTransaction for application/json ContentType.
type PostServiceCreateTransactionJSONRequestBody = ChecksTRANSACTION

// PostServiceCreateTransactionFormdataRequestBody defines body for PostServiceCreateTransaction for application/x-www-form-urlencoded ContentType.
type PostServiceCreateTransactionFormdataRequestBody = ChecksTRANSACTION

// PostServiceCreateTransactionMultipartRequestBody defines body for PostServiceCreateTransaction for multipart/form-data ContentType.
type PostServiceCreateTransactionMultipartRequestBody = ChecksTRANSACTION

// PostServiceCreateUdpJSONRequestBody defines body for PostServiceCreateUdp for application/json ContentType.
type PostServiceCreateUdpJSONRequestBody = ChecksUDP

// PostServiceCreateUdpFormdataRequestBody defines body for PostServiceCreateUdp for application/x-www-form-urlencoded ContentType.
type PostServiceCreateUdpFormdataRequestBody = ChecksUDP

// PostServiceCreateUdpMultipartRequestBody defines body for PostServiceCreateUdp for multipart/form-data ContentType.
type PostServiceCreateUdpMultipartRequestBody = ChecksUDP

// PostServiceCreateWebhookJSONRequestBody defines body for PostServiceCreateWebhook for application/json ContentType.
type PostServiceCreateWebhookJSONRequestBody = ChecksWEBHOOK

// PostServiceCreateWebhookFormdataRequestBody defines body for PostServiceCreateWebhook for application/x-www-form-urlencoded ContentType.
type PostServiceCreateWebhookFormdataRequestBody = ChecksWEBHOOK

// PostServiceCreateWebhookMultipartRequestBody defines body for PostServiceCreateWebhook for multipart/form-data ContentType.
type PostServiceCreateWebhookMultipartRequestBody = ChecksWEBHOOK

// PostServiceCreateWhoisJSONRequestBody defines body for PostServiceCreateWhois for application/json ContentType.
type PostServiceCreateWhoisJSONRequestBody = ChecksWHOIS

// PostServiceCreateWhoisFormdataRequestBody defines body for PostServiceCreateWhois for application/x-www-form-urlencoded ContentType.
type PostServiceCreateWhoisFormdataRequestBody = ChecksWHOIS

// PostServiceCreateWhoisMultipartRequestBody defines body for PostServiceCreateWhois for multipart/form-data ContentType.
type PostServiceCreateWhoisMultipartRequestBody = ChecksWHOIS

// PatchServiceBulkEscalationsJSONRequestBody defines body for PatchServiceBulkEscalations for application/json ContentType.
type PatchServiceBulkEscalationsJSONRequestBody = ChecksBulkUpdateEscalations

// PatchServiceBulkEscalationsFormdataRequestBody defines body for PatchServiceBulkEscalations for application/x-www-form-urlencoded ContentType.
type PatchServiceBulkEscalationsFormdataRequestBody = ChecksBulkUpdateEscalations

// PatchServiceBulkEscalationsMultipartRequestBody defines body for PatchServiceBulkEscalations for multipart/form-data ContentType.
type PatchServiceBulkEscalationsMultipartRequestBody = ChecksBulkUpdateEscalations

// PatchServiceBulkMaintenanceJSONRequestBody defines body for PatchServiceBulkMaintenance for application/json ContentType.
type PatchServiceBulkMaintenanceJSONRequestBody = ChecksBulkUpdateMaintenance

// PatchServiceBulkMaintenanceFormdataRequestBody defines body for PatchServiceBulkMaintenance for application/x-www-form-urlencoded ContentType.
type PatchServiceBulkMaintenanceFormdataRequestBody = ChecksBulkUpdateMaintenance

// PatchServiceBulkMaintenanceMultipartRequestBody defines body for PatchServiceBulkMaintenance for multipart/form-data ContentType.
type PatchServiceBulkMaintenanceMultipartRequestBody = ChecksBulkUpdateMaintenance

// PatchServiceBulkPauseJSONRequestBody defines body for PatchServiceBulkPause for application/json ContentType.
type PatchServiceBulkPauseJSONRequestBody = BulkChecksAction

// PatchServiceBulkPauseFormdataRequestBody defines body for PatchServiceBulkPause for application/x-www-form-urlencoded ContentType.
type PatchServiceBulkPauseFormdataRequestBody = BulkChecksAction

// PatchServiceBulkPauseMultipartRequestBody defines body for PatchServiceBulkPause for multipart/form-data ContentType.
type PatchServiceBulkPauseMultipartRequestBody = BulkChecksAction

// PatchServiceBulkResumeJSONRequestBody defines body for PatchServiceBulkResume for application/json ContentType.
type PatchServiceBulkResumeJSONRequestBody = BulkChecksAction

// PatchServiceBulkResumeFormdataRequestBody defines body for PatchServiceBulkResume for application/x-www-form-urlencoded ContentType.
type PatchServiceBulkResumeFormdataRequestBody = BulkChecksAction

// PatchServiceBulkResumeMultipartRequestBody defines body for PatchServiceBulkResume for multipart/form-data ContentType.
type PatchServiceBulkResumeMultipartRequestBody = BulkChecksAction

// PatchServiceBulkUpdateJSONRequestBody defines body for PatchServiceBulkUpdate for application/json ContentType.
type PatchServiceBulkUpdateJSONRequestBody = ChecksBulkUpdate

// PatchServiceBulkUpdateFormdataRequestBody defines body for PatchServiceBulkUpdate for application/x-www-form-urlencoded ContentType.
type PatchServiceBulkUpdateFormdataRequestBody = ChecksBulkUpdate

// PatchServiceBulkUpdateMultipartRequestBody defines body for PatchServiceBulkUpdate for multipart/form-data ContentType.
type PatchServiceBulkUpdateMultipartRequestBody = ChecksBulkUpdate

// PatchServiceDetailJSONRequestBody defines body for PatchServiceDetail for application/json ContentType.
type PatchServiceDetailJSONRequestBody = Checks

// PatchServiceDetailFormdataRequestBody defines body for PatchServiceDetail for application/x-www-form-urlencoded ContentType.
type PatchServiceDetailFormdataRequestBody = Checks

// PatchServiceDetailMultipartRequestBody defines body for PatchServiceDetail for multipart/form-data ContentType.
type PatchServiceDetailMultipartRequestBody = Checks

// PutServiceDetailJSONRequestBody defines body for PutServiceDetail for application/json ContentType.
type PutServiceDetailJSONRequestBody = Checks

// PutServiceDetailFormdataRequestBody defines body for PutServiceDetail for application/x-www-form-urlencoded ContentType.
type PutServiceDetailFormdataRequestBody = Checks

// PutServiceDetailMultipartRequestBody defines body for PutServiceDetail for multipart/form-data ContentType.
type PutServiceDetailMultipartRequestBody = Checks

// PatchServiceAddContactGroupsJSONRequestBody defines body for PatchServiceAddContactGroups for application/json ContentType.
type PatchServiceAddContactGroupsJSONRequestBody = CheckContactGroups

// PatchServiceAddContactGroupsFormdataRequestBody defines body for PatchServiceAddContactGroups for application/x-www-form-urlencoded ContentType.
type PatchServiceAddContactGroupsFormdataRequestBody = CheckContactGroups

// PatchServiceAddContactGroupsMultipartRequestBody defines body for PatchServiceAddContactGroups for multipart/form-data ContentType.
type PatchServiceAddContactGroupsMultipartRequestBody = CheckContactGroups

// PatchServiceAddLocationsJSONRequestBody defines body for PatchServiceAddLocations for application/json ContentType.
type PatchServiceAddLocationsJSONRequestBody = CheckLocations

// PatchServiceAddLocationsFormdataRequestBody defines body for PatchServiceAddLocations for application/x-www-form-urlencoded ContentType.
type PatchServiceAddLocationsFormdataRequestBody = CheckLocations

// PatchServiceAddLocationsMultipartRequestBody defines body for PatchServiceAddLocations for multipart/form-data ContentType.
type PatchServiceAddLocationsMultipartRequestBody = CheckLocations

// PatchServiceAddTagsJSONRequestBody defines body for PatchServiceAddTags for application/json ContentType.
type PatchServiceAddTagsJSONRequestBody = CheckTags

// PatchServiceAddTagsFormdataRequestBody defines body for PatchServiceAddTags for application/x-www-form-urlencoded ContentType.
type PatchServiceAddTagsFormdataRequestBody = CheckTags

// PatchServiceAddTagsMultipartRequestBody defines body for PatchServiceAddTags for multipart/form-data ContentType.
type PatchServiceAddTagsMultipartRequestBody = CheckTags

// PatchServiceSetEscalationsJSONRequestBody defines body for PatchServiceSetEscalations for application/json ContentType.
type PatchServiceSetEscalationsJSONRequestBody = CheckEscalations

// PatchServiceSetEscalationsFormdataRequestBody defines body for PatchServiceSetEscalations for application/x-www-form-urlencoded ContentType.
type PatchServiceSetEscalationsFormdataRequestBody = CheckEscalations

// PatchServiceSetEscalationsMultipartRequestBody defines body for PatchServiceSetEscalations for multipart/form-data ContentType.
type PatchServiceSetEscalationsMultipartRequestBody = CheckEscalations

// PatchServiceSetMaintenanceJSONRequestBody defines body for PatchServiceSetMaintenance for application/json ContentType.
type PatchServiceSetMaintenanceJSONRequestBody = CheckMaintenance

// PatchServiceSetMaintenanceFormdataRequestBody defines body for PatchServiceSetMaintenance for application/x-www-form-urlencoded ContentType.
type PatchServiceSetMaintenanceFormdataRequestBody = CheckMaintenance

// PatchServiceSetMaintenanceMultipartRequestBody defines body for PatchServiceSetMaintenance for multipart/form-data ContentType.
type PatchServiceSetMaintenanceMultipartRequestBody = CheckMaintenance

// PatchServiceReplaceContactGroupsJSONRequestBody defines body for PatchServiceReplaceContactGroups for application/json ContentType.
type PatchServiceReplaceContactGroupsJSONRequestBody = CheckContactGroups

// PatchServiceReplaceContactGroupsFormdataRequestBody defines body for PatchServiceReplaceContactGroups for application/x-www-form-urlencoded ContentType.
type PatchServiceReplaceContactGroupsFormdataRequestBody = CheckContactGroups

// PatchServiceReplaceContactGroupsMultipartRequestBody defines body for PatchServiceReplaceContactGroups for multipart/form-data ContentType.
type PatchServiceReplaceContactGroupsMultipartRequestBody = CheckContactGroups

// PatchServiceReplaceLocationsJSONRequestBody defines body for PatchServiceReplaceLocations for application/json ContentType.
type PatchServiceReplaceLocationsJSONRequestBody = CheckLocations

// PatchServiceReplaceLocationsFormdataRequestBody defines body for PatchServiceReplaceLocations for application/x-www-form-urlencoded ContentType.
type PatchServiceReplaceLocationsFormdataRequestBody = CheckLocations

// PatchServiceReplaceLocationsMultipartRequestBody defines body for PatchServiceReplaceLocations for multipart/form-data ContentType.
type PatchServiceReplaceLocationsMultipartRequestBody = CheckLocations

// PatchServiceReplaceTagsJSONRequestBody defines body for PatchServiceReplaceTags for application/json ContentType.
type PatchServiceReplaceTagsJSONRequestBody = CheckTags

// PatchServiceReplaceTagsFormdataRequestBody defines body for PatchServiceReplaceTags for application/x-www-form-urlencoded ContentType.
type PatchServiceReplaceTagsFormdataRequestBody = CheckTags

// PatchServiceReplaceTagsMultipartRequestBody defines body for PatchServiceReplaceTags for multipart/form-data ContentType.
type PatchServiceReplaceTagsMultipartRequestBody = CheckTags

// PostContactgrouplistJSONRequestBody defines body for PostContactgrouplist for application/json ContentType.
type PostContactgrouplistJSONRequestBody = ContactGroup

// PostContactgrouplistFormdataRequestBody defines body for PostContactgrouplist for application/x-www-form-urlencoded ContentType.
type PostContactgrouplistFormdataRequestBody = ContactGroup

// PostContactgrouplistMultipartRequestBody defines body for PostContactgrouplist for multipart/form-data ContentType.
type PostContactgrouplistMultipartRequestBody = ContactGroup

// PatchContactGroupDetailJSONRequestBody defines body for PatchContactGroupDetail for application/json ContentType.
type PatchContactGroupDetailJSONRequestBody = ContactGroup

// PatchContactGroupDetailFormdataRequestBody defines body for PatchContactGroupDetail for application/x-www-form-urlencoded ContentType.
type PatchContactGroupDetailFormdataRequestBody = ContactGroup

// PatchContactGroupDetailMultipartRequestBody defines body for PatchContactGroupDetail for multipart/form-data ContentType.
type PatchContactGroupDetailMultipartRequestBody = ContactGroup

// PutContactGroupDetailJSONRequestBody defines body for PutContactGroupDetail for application/json ContentType.
type PutContactGroupDetailJSONRequestBody = ContactGroup

// PutContactGroupDetailFormdataRequestBody defines body for PutContactGroupDetail for application/x-www-form-urlencoded ContentType.
type PutContactGroupDetailFormdataRequestBody = ContactGroup

// PutContactGroupDetailMultipartRequestBody defines body for PutContactGroupDetail for multipart/form-data ContentType.
type PutContactGroupDetailMultipartRequestBody = ContactGroup

// PatchContactGroupSetOnCallHoursJSONRequestBody defines body for PatchContactGroupSetOnCallHours for application/json ContentType.
type PatchContactGroupSetOnCallHoursJSONRequestBody = ContactGroupOnCallSchedule

// PatchContactGroupSetOnCallHoursFormdataRequestBody defines body for PatchContactGroupSetOnCallHours for application/x-www-form-urlencoded ContentType.
type PatchContactGroupSetOnCallHoursFormdataRequestBody = ContactGroupOnCallSchedule

// PatchContactGroupSetOnCallHoursMultipartRequestBody defines body for PatchContactGroupSetOnCallHours for multipart/form-data ContentType.
type PatchContactGroupSetOnCallHoursMultipartRequestBody = ContactGroupOnCallSchedule

// PostDashboardlistJSONRequestBody defines body for PostDashboardlist for application/json ContentType.
type PostDashboardlistJSONRequestBody = Dashboard

// PostDashboardlistFormdataRequestBody defines body for PostDashboardlist for application/x-www-form-urlencoded ContentType.
type PostDashboardlistFormdataRequestBody = Dashboard

// PostDashboardlistMultipartRequestBody defines body for PostDashboardlist for multipart/form-data ContentType.
type PostDashboardlistMultipartRequestBody = Dashboard

// PatchDashboardDetailJSONRequestBody defines body for PatchDashboardDetail for application/json ContentType.
type PatchDashboardDetailJSONRequestBody = Dashboard

// PatchDashboardDetailFormdataRequestBody defines body for PatchDashboardDetail for application/x-www-form-urlencoded ContentType.
type PatchDashboardDetailFormdataRequestBody = Dashboard

// PatchDashboardDetailMultipartRequestBody defines body for PatchDashboardDetail for multipart/form-data ContentType.
type PatchDashboardDetailMultipartRequestBody = Dashboard

// PutDashboardDetailJSONRequestBody defines body for PutDashboardDetail for application/json ContentType.
type PutDashboardDetailJSONRequestBody = Dashboard

// PutDashboardDetailFormdataRequestBody defines body for PutDashboardDetail for application/x-www-form-urlencoded ContentType.
type PutDashboardDetailFormdataRequestBody = Dashboard

// PutDashboardDetailMultipartRequestBody defines body for PutDashboardDetail for multipart/form-data ContentType.
type PutDashboardDetailMultipartRequestBody = Dashboard

// PostIntegrationCreateCachetJSONRequestBody defines body for PostIntegrationCreateCachet for application/json ContentType.
type PostIntegrationCreateCachetJSONRequestBody = IntegrationCachet

// PostIntegrationCreateCachetFormdataRequestBody defines body for PostIntegrationCreateCachet for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateCachetFormdataRequestBody = IntegrationCachet

// PostIntegrationCreateCachetMultipartRequestBody defines body for PostIntegrationCreateCachet for multipart/form-data ContentType.
type PostIntegrationCreateCachetMultipartRequestBody = IntegrationCachet

// PostIntegrationCreateDatadogJSONRequestBody defines body for PostIntegrationCreateDatadog for application/json ContentType.
type PostIntegrationCreateDatadogJSONRequestBody = IntegrationDatadog

// PostIntegrationCreateDatadogFormdataRequestBody defines body for PostIntegrationCreateDatadog for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateDatadogFormdataRequestBody = IntegrationDatadog

// PostIntegrationCreateDatadogMultipartRequestBody defines body for PostIntegrationCreateDatadog for multipart/form-data ContentType.
type PostIntegrationCreateDatadogMultipartRequestBody = IntegrationDatadog

// PostIntegrationCreateGeckoboardJSONRequestBody defines body for PostIntegrationCreateGeckoboard for application/json ContentType.
type PostIntegrationCreateGeckoboardJSONRequestBody = IntegrationGeckoboard

// PostIntegrationCreateGeckoboardFormdataRequestBody defines body for PostIntegrationCreateGeckoboard for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateGeckoboardFormdataRequestBody = IntegrationGeckoboard

// PostIntegrationCreateGeckoboardMultipartRequestBody defines body for PostIntegrationCreateGeckoboard for multipart/form-data ContentType.
type PostIntegrationCreateGeckoboardMultipartRequestBody = IntegrationGeckoboard

// PostIntegrationCreateJiraservicedeskJSONRequestBody defines body for PostIntegrationCreateJiraservicedesk for application/json ContentType.
type PostIntegrationCreateJiraservicedeskJSONRequestBody = IntegrationJiraservicedesk

// PostIntegrationCreateJiraservicedeskFormdataRequestBody defines body for PostIntegrationCreateJiraservicedesk for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateJiraservicedeskFormdataRequestBody = IntegrationJiraservicedesk

// PostIntegrationCreateJiraservicedeskMultipartRequestBody defines body for PostIntegrationCreateJiraservicedesk for multipart/form-data ContentType.
type PostIntegrationCreateJiraservicedeskMultipartRequestBody = IntegrationJiraservicedesk

// PostIntegrationCreateKlipfolioJSONRequestBody defines body for PostIntegrationCreateKlipfolio for application/json ContentType.
type PostIntegrationCreateKlipfolioJSONRequestBody = IntegrationKlipfolio

// PostIntegrationCreateKlipfolioFormdataRequestBody defines body for PostIntegrationCreateKlipfolio for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateKlipfolioFormdataRequestBody = IntegrationKlipfolio

// PostIntegrationCreateKlipfolioMultipartRequestBody defines body for PostIntegrationCreateKlipfolio for multipart/form-data ContentType.
type PostIntegrationCreateKlipfolioMultipartRequestBody = IntegrationKlipfolio

// PostIntegrationCreateLibratoJSONRequestBody defines body for PostIntegrationCreateLibrato for application/json ContentType.
type PostIntegrationCreateLibratoJSONRequestBody = IntegrationLibrato

// PostIntegrationCreateLibratoFormdataRequestBody defines body for PostIntegrationCreateLibrato for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateLibratoFormdataRequestBody = IntegrationLibrato

// PostIntegrationCreateLibratoMultipartRequestBody defines body for PostIntegrationCreateLibrato for multipart/form-data ContentType.
type PostIntegrationCreateLibratoMultipartRequestBody = IntegrationLibrato

// PostIntegrationCreateMicrosoftTeamsJSONRequestBody defines body for PostIntegrationCreateMicrosoftTeams for application/json ContentType.
type PostIntegrationCreateMicrosoftTeamsJSONRequestBody = IntegrationMicrosoftTeams

// PostIntegrationCreateMicrosoftTeamsFormdataRequestBody defines body for PostIntegrationCreateMicrosoftTeams for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateMicrosoftTeamsFormdataRequestBody = IntegrationMicrosoftTeams

// PostIntegrationCreateMicrosoftTeamsMultipartRequestBody defines body for PostIntegrationCreateMicrosoftTeams for multipart/form-data ContentType.
type PostIntegrationCreateMicrosoftTeamsMultipartRequestBody = IntegrationMicrosoftTeams

// PostIntegrationCreateOpsgenieJSONRequestBody defines body for PostIntegrationCreateOpsgenie for application/json ContentType.
type PostIntegrationCreateOpsgenieJSONRequestBody = IntegrationOpsgenie

// PostIntegrationCreateOpsgenieFormdataRequestBody defines body for PostIntegrationCreateOpsgenie for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateOpsgenieFormdataRequestBody = IntegrationOpsgenie

// PostIntegrationCreateOpsgenieMultipartRequestBody defines body for PostIntegrationCreateOpsgenie for multipart/form-data ContentType.
type PostIntegrationCreateOpsgenieMultipartRequestBody = IntegrationOpsgenie

// PostIntegrationCreatePagerdutyJSONRequestBody defines body for PostIntegrationCreatePagerduty for application/json ContentType.
type PostIntegrationCreatePagerdutyJSONRequestBody = IntegrationPagerduty

// PostIntegrationCreatePagerdutyFormdataRequestBody defines body for PostIntegrationCreatePagerduty for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreatePagerdutyFormdataRequestBody = IntegrationPagerduty

// PostIntegrationCreatePagerdutyMultipartRequestBody defines body for PostIntegrationCreatePagerduty for multipart/form-data ContentType.
type PostIntegrationCreatePagerdutyMultipartRequestBody = IntegrationPagerduty

// PostIntegrationCreatePushbulletJSONRequestBody defines body for PostIntegrationCreatePushbullet for application/json ContentType.
type PostIntegrationCreatePushbulletJSONRequestBody = IntegrationPushbullet

// PostIntegrationCreatePushbulletFormdataRequestBody defines body for PostIntegrationCreatePushbullet for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreatePushbulletFormdataRequestBody = IntegrationPushbullet

// PostIntegrationCreatePushbulletMultipartRequestBody defines body for PostIntegrationCreatePushbullet for multipart/form-data ContentType.
type PostIntegrationCreatePushbulletMultipartRequestBody = IntegrationPushbullet

// PostIntegrationCreatePushoverJSONRequestBody defines body for PostIntegrationCreatePushover for application/json ContentType.
type PostIntegrationCreatePushoverJSONRequestBody = IntegrationPushover

// PostIntegrationCreatePushoverFormdataRequestBody defines body for PostIntegrationCreatePushover for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreatePushoverFormdataRequestBody = IntegrationPushover

// PostIntegrationCreatePushoverMultipartRequestBody defines body for PostIntegrationCreatePushover for multipart/form-data ContentType.
type PostIntegrationCreatePushoverMultipartRequestBody = IntegrationPushover

// PostIntegrationCreateSlackJSONRequestBody defines body for PostIntegrationCreateSlack for application/json ContentType.
type PostIntegrationCreateSlackJSONRequestBody = IntegrationSlack

// PostIntegrationCreateSlackFormdataRequestBody defines body for PostIntegrationCreateSlack for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateSlackFormdataRequestBody = IntegrationSlack

// PostIntegrationCreateSlackMultipartRequestBody defines body for PostIntegrationCreateSlack for multipart/form-data ContentType.
type PostIntegrationCreateSlackMultipartRequestBody = IntegrationSlack

// PostIntegrationCreateStatusJSONRequestBody defines body for PostIntegrationCreateStatus for application/json ContentType.
type PostIntegrationCreateStatusJSONRequestBody = IntegrationStatus

// PostIntegrationCreateStatusFormdataRequestBody defines body for PostIntegrationCreateStatus for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateStatusFormdataRequestBody = IntegrationStatus

// PostIntegrationCreateStatusMultipartRequestBody defines body for PostIntegrationCreateStatus for multipart/form-data ContentType.
type PostIntegrationCreateStatusMultipartRequestBody = IntegrationStatus

// PostIntegrationCreateStatuspageJSONRequestBody defines body for PostIntegrationCreateStatuspage for application/json ContentType.
type PostIntegrationCreateStatuspageJSONRequestBody = IntegrationStatuspage

// PostIntegrationCreateStatuspageFormdataRequestBody defines body for PostIntegrationCreateStatuspage for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateStatuspageFormdataRequestBody = IntegrationStatuspage

// PostIntegrationCreateStatuspageMultipartRequestBody defines body for PostIntegrationCreateStatuspage for multipart/form-data ContentType.
type PostIntegrationCreateStatuspageMultipartRequestBody = IntegrationStatuspage

// PostIntegrationCreateTwitterJSONRequestBody defines body for PostIntegrationCreateTwitter for application/json ContentType.
type PostIntegrationCreateTwitterJSONRequestBody = IntegrationTwitter

// PostIntegrationCreateTwitterFormdataRequestBody defines body for PostIntegrationCreateTwitter for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateTwitterFormdataRequestBody = IntegrationTwitter

// PostIntegrationCreateTwitterMultipartRequestBody defines body for PostIntegrationCreateTwitter for multipart/form-data ContentType.
type PostIntegrationCreateTwitterMultipartRequestBody = IntegrationTwitter

// PostIntegrationCreateVictoropsJSONRequestBody defines body for PostIntegrationCreateVictorops for application/json ContentType.
type PostIntegrationCreateVictoropsJSONRequestBody = IntegrationVictorops

// PostIntegrationCreateVictoropsFormdataRequestBody defines body for PostIntegrationCreateVictorops for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateVictoropsFormdataRequestBody = IntegrationVictorops

// PostIntegrationCreateVictoropsMultipartRequestBody defines body for PostIntegrationCreateVictorops for multipart/form-data ContentType.
type PostIntegrationCreateVictoropsMultipartRequestBody = IntegrationVictorops

// PostIntegrationCreateWavefrontJSONRequestBody defines body for PostIntegrationCreateWavefront for application/json ContentType.
type PostIntegrationCreateWavefrontJSONRequestBody = IntegrationWavefront

// PostIntegrationCreateWavefrontFormdataRequestBody defines body for PostIntegrationCreateWavefront for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateWavefrontFormdataRequestBody = IntegrationWavefront

// PostIntegrationCreateWavefrontMultipartRequestBody defines body for PostIntegrationCreateWavefront for multipart/form-data ContentType.
type PostIntegrationCreateWavefrontMultipartRequestBody = IntegrationWavefront

// PostIntegrationCreateWebhookJSONRequestBody defines body for PostIntegrationCreateWebhook for application/json ContentType.
type PostIntegrationCreateWebhookJSONRequestBody = IntegrationWebhook

// PostIntegrationCreateWebhookFormdataRequestBody defines body for PostIntegrationCreateWebhook for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateWebhookFormdataRequestBody = IntegrationWebhook

// PostIntegrationCreateWebhookMultipartRequestBody defines body for PostIntegrationCreateWebhook for multipart/form-data ContentType.
type PostIntegrationCreateWebhookMultipartRequestBody = IntegrationWebhook

// PostIntegrationCreateZapierJSONRequestBody defines body for PostIntegrationCreateZapier for application/json ContentType.
type PostIntegrationCreateZapierJSONRequestBody = IntegrationZapier

// PostIntegrationCreateZapierFormdataRequestBody defines body for PostIntegrationCreateZapier for application/x-www-form-urlencoded ContentType.
type PostIntegrationCreateZapierFormdataRequestBody = IntegrationZapier

// PostIntegrationCreateZapierMultipartRequestBody defines body for PostIntegrationCreateZapier for multipart/form-data ContentType.
type PostIntegrationCreateZapierMultipartRequestBody = IntegrationZapier

// PatchIntegrationDetailJSONRequestBody defines body for PatchIntegrationDetail for application/json ContentType.
type PatchIntegrationDetailJSONRequestBody = Integration

// PatchIntegrationDetailFormdataRequestBody defines body for PatchIntegrationDetail for application/x-www-form-urlencoded ContentType.
type PatchIntegrationDetailFormdataRequestBody = Integration

// PatchIntegrationDetailMultipartRequestBody defines body for PatchIntegrationDetail for multipart/form-data ContentType.
type PatchIntegrationDetailMultipartRequestBody = Integration

// PutIntegrationDetailJSONRequestBody defines body for PutIntegrationDetail for application/json ContentType.
type PutIntegrationDetailJSONRequestBody = Integration

// PutIntegrationDetailFormdataRequestBody defines body for PutIntegrationDetail for application/x-www-form-urlencoded ContentType.
type PutIntegrationDetailFormdataRequestBody = Integration

// PutIntegrationDetailMultipartRequestBody defines body for PutIntegrationDetail for multipart/form-data ContentType.
type PutIntegrationDetailMultipartRequestBody = Integration

// PostPushnotificationlistJSONRequestBody defines body for PostPushnotificationlist for application/json ContentType.
type PostPushnotificationlistJSONRequestBody = PushNotificationProfileCreate

// PostPushnotificationlistFormdataRequestBody defines body for PostPushnotificationlist for application/x-www-form-urlencoded ContentType.
type PostPushnotificationlistFormdataRequestBody = PushNotificationProfileCreate

// PostPushnotificationlistMultipartRequestBody defines body for PostPushnotificationlist for multipart/form-data ContentType.
type PostPushnotificationlistMultipartRequestBody = PushNotificationProfileCreate

// PatchPushNotificationDetailJSONRequestBody defines body for PatchPushNotificationDetail for application/json ContentType.
type PatchPushNotificationDetailJSONRequestBody = PushNotificationProfile

// PatchPushNotificationDetailFormdataRequestBody defines body for PatchPushNotificationDetail for application/x-www-form-urlencoded ContentType.
type PatchPushNotificationDetailFormdataRequestBody = PushNotificationProfile

// PatchPushNotificationDetailMultipartRequestBody defines body for PatchPushNotificationDetail for multipart/form-data ContentType.
type PatchPushNotificationDetailMultipartRequestBody = PushNotificationProfile

// PutPushNotificationDetailJSONRequestBody defines body for PutPushNotificationDetail for application/json ContentType.
type PutPushNotificationDetailJSONRequestBody = PushNotificationProfile

// PutPushNotificationDetailFormdataRequestBody defines body for PutPushNotificationDetail for application/x-www-form-urlencoded ContentType.
type PutPushNotificationDetailFormdataRequestBody = PushNotificationProfile

// PutPushNotificationDetailMultipartRequestBody defines body for PutPushNotificationDetail for multipart/form-data ContentType.
type PutPushNotificationDetailMultipartRequestBody = PushNotificationProfile

// PostScheduledreportlistJSONRequestBody defines body for PostScheduledreportlist for application/json ContentType.
type PostScheduledreportlistJSONRequestBody = ScheduledReport

// PostScheduledreportlistFormdataRequestBody defines body for PostScheduledreportlist for application/x-www-form-urlencoded ContentType.
type PostScheduledreportlistFormdataRequestBody = ScheduledReport

// PostScheduledreportlistMultipartRequestBody defines body for PostScheduledreportlist for multipart/form-data ContentType.
type PostScheduledreportlistMultipartRequestBody = ScheduledReport

// PatchScheduledReportDetailJSONRequestBody defines body for PatchScheduledReportDetail for application/json ContentType.
type PatchScheduledReportDetailJSONRequestBody = ScheduledReport

// PatchScheduledReportDetailFormdataRequestBody defines body for PatchScheduledReportDetail for application/x-www-form-urlencoded ContentType.
type PatchScheduledReportDetailFormdataRequestBody = ScheduledReport

// PatchScheduledReportDetailMultipartRequestBody defines body for PatchScheduledReportDetail for multipart/form-data ContentType.
type PatchScheduledReportDetailMultipartRequestBody = ScheduledReport

// PutScheduledReportDetailJSONRequestBody defines body for PutScheduledReportDetail for application/json ContentType.
type PutScheduledReportDetailJSONRequestBody = ScheduledReport

// PutScheduledReportDetailFormdataRequestBody defines body for PutScheduledReportDetail for application/x-www-form-urlencoded ContentType.
type PutScheduledReportDetailFormdataRequestBody = ScheduledReport

// PutScheduledReportDetailMultipartRequestBody defines body for PutScheduledReportDetail for multipart/form-data ContentType.
type PutScheduledReportDetailMultipartRequestBody = ScheduledReport

// PostSlareportlistJSONRequestBody defines body for PostSlareportlist for application/json ContentType.
type PostSlareportlistJSONRequestBody = SLAReport

// PostSlareportlistFormdataRequestBody defines body for PostSlareportlist for application/x-www-form-urlencoded ContentType.
type PostSlareportlistFormdataRequestBody = SLAReport

// PostSlareportlistMultipartRequestBody defines body for PostSlareportlist for multipart/form-data ContentType.
type PostSlareportlistMultipartRequestBody = SLAReport

// PatchSlaReportDetailJSONRequestBody defines body for PatchSlaReportDetail for application/json ContentType.
type PatchSlaReportDetailJSONRequestBody = SLAReport

// PatchSlaReportDetailFormdataRequestBody defines body for PatchSlaReportDetail for application/x-www-form-urlencoded ContentType.
type PatchSlaReportDetailFormdataRequestBody = SLAReport

// PatchSlaReportDetailMultipartRequestBody defines body for PatchSlaReportDetail for multipart/form-data ContentType.
type PatchSlaReportDetailMultipartRequestBody = SLAReport

// PutSlaReportDetailJSONRequestBody defines body for PutSlaReportDetail for application/json ContentType.
type PutSlaReportDetailJSONRequestBody = SLAReport

// PutSlaReportDetailFormdataRequestBody defines body for PutSlaReportDetail for application/x-www-form-urlencoded ContentType.
type PutSlaReportDetailFormdataRequestBody = SLAReport

// PutSlaReportDetailMultipartRequestBody defines body for PutSlaReportDetail for multipart/form-data ContentType.
type PutSlaReportDetailMultipartRequestBody = SLAReport

// PostStatuspagelistJSONRequestBody defines body for PostStatuspagelist for application/json ContentType.
type PostStatuspagelistJSONRequestBody = StatusPage

// PostStatuspagelistFormdataRequestBody defines body for PostStatuspagelist for application/x-www-form-urlencoded ContentType.
type PostStatuspagelistFormdataRequestBody = StatusPage

// PostStatuspagelistMultipartRequestBody defines body for PostStatuspagelist for multipart/form-data ContentType.
type PostStatuspagelistMultipartRequestBody = StatusPage

// PatchStatuspageDetailJSONRequestBody defines body for PatchStatuspageDetail for application/json ContentType.
type PatchStatuspageDetailJSONRequestBody = StatusPage

// PatchStatuspageDetailFormdataRequestBody defines body for PatchStatuspageDetail for application/x-www-form-urlencoded ContentType.
type PatchStatuspageDetailFormdataRequestBody = StatusPage

// PatchStatuspageDetailMultipartRequestBody defines body for PatchStatuspageDetail for multipart/form-data ContentType.
type PatchStatuspageDetailMultipartRequestBody = StatusPage

// PutStatuspageDetailJSONRequestBody defines body for PutStatuspageDetail for application/json ContentType.
type PutStatuspageDetailJSONRequestBody = StatusPage

// PutStatuspageDetailFormdataRequestBody defines body for PutStatuspageDetail for application/x-www-form-urlencoded ContentType.
type PutStatuspageDetailFormdataRequestBody = StatusPage

// PutStatuspageDetailMultipartRequestBody defines body for PutStatuspageDetail for multipart/form-data ContentType.
type PutStatuspageDetailMultipartRequestBody = StatusPage

// PostComponentslistJSONRequestBody defines body for PostComponentslist for application/json ContentType.
type PostComponentslistJSONRequestBody = Component

// PostComponentslistFormdataRequestBody defines body for PostComponentslist for application/x-www-form-urlencoded ContentType.
type PostComponentslistFormdataRequestBody = Component

// PostComponentslistMultipartRequestBody defines body for PostComponentslist for multipart/form-data ContentType.
type PostComponentslistMultipartRequestBody = Component

// PatchComponentDetailJSONRequestBody defines body for PatchComponentDetail for application/json ContentType.
type PatchComponentDetailJSONRequestBody = Component

// PatchComponentDetailFormdataRequestBody defines body for PatchComponentDetail for application/x-www-form-urlencoded ContentType.
type PatchComponentDetailFormdataRequestBody = Component

// PatchComponentDetailMultipartRequestBody defines body for PatchComponentDetail for multipart/form-data ContentType.
type PatchComponentDetailMultipartRequestBody = Component

// PutComponentDetailJSONRequestBody defines body for PutComponentDetail for application/json ContentType.
type PutComponentDetailJSONRequestBody = Component

// PutComponentDetailFormdataRequestBody defines body for PutComponentDetail for application/x-www-form-urlencoded ContentType.
type PutComponentDetailFormdataRequestBody = Component

// PutComponentDetailMultipartRequestBody defines body for PutComponentDetail for multipart/form-data ContentType.
type PutComponentDetailMultipartRequestBody = Component

// PostIncidentlistJSONRequestBody defines body for PostIncidentlist for application/json ContentType.
type PostIncidentlistJSONRequestBody = Incident

// PostIncidentlistFormdataRequestBody defines body for PostIncidentlist for application/x-www-form-urlencoded ContentType.
type PostIncidentlistFormdataRequestBody = Incident

// PostIncidentlistMultipartRequestBody defines body for PostIncidentlist for multipart/form-data ContentType.
type PostIncidentlistMultipartRequestBody = Incident

// PatchIncidentDetailJSONRequestBody defines body for PatchIncidentDetail for application/json ContentType.
type PatchIncidentDetailJSONRequestBody = Incident

// PatchIncidentDetailFormdataRequestBody defines body for PatchIncidentDetail for application/x-www-form-urlencoded ContentType.
type PatchIncidentDetailFormdataRequestBody = Incident

// PatchIncidentDetailMultipartRequestBody defines body for PatchIncidentDetail for multipart/form-data ContentType.
type PatchIncidentDetailMultipartRequestBody = Incident

// PutIncidentDetailJSONRequestBody defines body for PutIncidentDetail for application/json ContentType.
type PutIncidentDetailJSONRequestBody = Incident

// PutIncidentDetailFormdataRequestBody defines body for PutIncidentDetail for application/x-www-form-urlencoded ContentType.
type PutIncidentDetailFormdataRequestBody = Incident

// PutIncidentDetailMultipartRequestBody defines body for PutIncidentDetail for multipart/form-data ContentType.
type PutIncidentDetailMultipartRequestBody = Incident

// PostMetricslistJSONRequestBody defines body for PostMetricslist for application/json ContentType.
type PostMetricslistJSONRequestBody = Metric

// PostMetricslistFormdataRequestBody defines body for PostMetricslist for application/x-www-form-urlencoded ContentType.
type PostMetricslistFormdataRequestBody = Metric

// PostMetricslistMultipartRequestBody defines body for PostMetricslist for multipart/form-data ContentType.
type PostMetricslistMultipartRequestBody = Metric

// PatchMetricDetailJSONRequestBody defines body for PatchMetricDetail for application/json ContentType.
type PatchMetricDetailJSONRequestBody = Metric

// PatchMetricDetailFormdataRequestBody defines body for PatchMetricDetail for application/x-www-form-urlencoded ContentType.
type PatchMetricDetailFormdataRequestBody = Metric

// PatchMetricDetailMultipartRequestBody defines body for PatchMetricDetail for multipart/form-data ContentType.
type PatchMetricDetailMultipartRequestBody = Metric

// PutMetricDetailJSONRequestBody defines body for PutMetricDetail for application/json ContentType.
type PutMetricDetailJSONRequestBody = Metric

// PutMetricDetailFormdataRequestBody defines body for PutMetricDetail for application/x-www-form-urlencoded ContentType.
type PutMetricDetailFormdataRequestBody = Metric

// PutMetricDetailMultipartRequestBody defines body for PutMetricDetail for multipart/form-data ContentType.
type PutMetricDetailMultipartRequestBody = Metric

// PostUserlistJSONRequestBody defines body for PostUserlist for application/json ContentType.
type PostUserlistJSONRequestBody = User

// PostUserlistFormdataRequestBody defines body for PostUserlist for application/x-www-form-urlencoded ContentType.
type PostUserlistFormdataRequestBody = User

// PostUserlistMultipartRequestBody defines body for PostUserlist for multipart/form-data ContentType.
type PostUserlistMultipartRequestBody = User

// PatchUserDetailJSONRequestBody defines body for PatchUserDetail for application/json ContentType.
type PatchUserDetailJSONRequestBody = User

// PatchUserDetailFormdataRequestBody defines body for PatchUserDetail for application/x-www-form-urlencoded ContentType.
type PatchUserDetailFormdataRequestBody = User

// PatchUserDetailMultipartRequestBody defines body for PatchUserDetail for multipart/form-data ContentType.
type PatchUserDetailMultipartRequestBody = User

// PutUserDetailJSONRequestBody defines body for PutUserDetail for application/json ContentType.
type PutUserDetailJSONRequestBody = User

// PutUserDetailFormdataRequestBody defines body for PutUserDetail for application/x-www-form-urlencoded ContentType.
type PutUserDetailFormdataRequestBody = User

// PutUserDetailMultipartRequestBody defines body for PutUserDetail for multipart/form-data ContentType.
type PutUserDetailMultipartRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAlertlist request
	GetAlertlist(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertAlertRootCause request
	GetAlertAlertRootCause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertDetail request
	GetAlertDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAlertIgnore request
	PostAlertIgnore(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthList request
	GetAuthList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthAccountUsage request
	GetAuthAccountUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLogin request with any body
	PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLoginWithFormdataBody(ctx context.Context, body PostAuthLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestMagicLink request
	GetRequestMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthMe request
	GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthResetPassword request
	GetAuthResetPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthResetPassword request with any body
	PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthResetPasswordWithFormdataBody(ctx context.Context, body PostAuthResetPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSendMagicLink request with any body
	PostSendMagicLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendMagicLink(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSendMagicLinkWithFormdataBody(ctx context.Context, body PostSendMagicLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSubaccounts request
	GetAuthSubaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSubaccounts request with any body
	PostAuthSubaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccounts(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccountsWithFormdataBody(ctx context.Context, body PostAuthSubaccountsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthSubaccount request
	GetAuthSubaccount(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAuthSubaccount request with any body
	PatchAuthSubaccountWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAuthSubaccount(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAuthSubaccountWithFormdataBody(ctx context.Context, pk string, body PatchAuthSubaccountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSubaccountPacks request with any body
	PostAuthSubaccountPacksWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccountPacks(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSubaccountPacksWithFormdataBody(ctx context.Context, pk string, body PostAuthSubaccountPacksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostValidateMagicLink request
	PostValidateMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicetaglist request
	GetServicetaglist(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicetaglist request with any body
	PostServicetaglistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicetaglist(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServicetaglistWithFormdataBody(ctx context.Context, body PostServicetaglistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceTagDetail request
	DeleteServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceTagDetail request
	GetServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceTagDetail request with any body
	PatchServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceTagDetail(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceTagDetailWithFormdataBody(ctx context.Context, pk string, body PatchServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceTagDetail request with any body
	PutServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceTagDetail(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceTagDetailWithFormdataBody(ctx context.Context, pk string, body PutServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServicelist request
	GetServicelist(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateApi request with any body
	PostServiceCreateApiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateApi(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateApiWithFormdataBody(ctx context.Context, body PostServiceCreateApiFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateBlacklist request with any body
	PostServiceCreateBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateBlacklist(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateBlacklistWithFormdataBody(ctx context.Context, body PostServiceCreateBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateDns request with any body
	PostServiceCreateDnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateDns(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateDnsWithFormdataBody(ctx context.Context, body PostServiceCreateDnsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateGroup request with any body
	PostServiceCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateGroup(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateGroupWithFormdataBody(ctx context.Context, body PostServiceCreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateHeartbeat request with any body
	PostServiceCreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHeartbeat(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHeartbeatWithFormdataBody(ctx context.Context, body PostServiceCreateHeartbeatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateHttp request with any body
	PostServiceCreateHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHttp(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateHttpWithFormdataBody(ctx context.Context, body PostServiceCreateHttpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateIcmp request with any body
	PostServiceCreateIcmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateIcmp(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateIcmpWithFormdataBody(ctx context.Context, body PostServiceCreateIcmpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateImap request with any body
	PostServiceCreateImapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateImap(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateImapWithFormdataBody(ctx context.Context, body PostServiceCreateImapFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateMalware request with any body
	PostServiceCreateMalwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateMalware(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateMalwareWithFormdataBody(ctx context.Context, body PostServiceCreateMalwareFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateNtp request with any body
	PostServiceCreateNtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateNtp(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateNtpWithFormdataBody(ctx context.Context, body PostServiceCreateNtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreatePop request with any body
	PostServiceCreatePopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreatePop(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreatePopWithFormdataBody(ctx context.Context, body PostServiceCreatePopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateRum request with any body
	PostServiceCreateRumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRum(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRumWithFormdataBody(ctx context.Context, body PostServiceCreateRumFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateRum2 request with any body
	PostServiceCreateRum2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRum2(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateRum2WithFormdataBody(ctx context.Context, body PostServiceCreateRum2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSmtp request with any body
	PostServiceCreateSmtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSmtp(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSmtpWithFormdataBody(ctx context.Context, body PostServiceCreateSmtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSsh request with any body
	PostServiceCreateSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSsh(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSshWithFormdataBody(ctx context.Context, body PostServiceCreateSshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateSslCert request with any body
	PostServiceCreateSslCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSslCert(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateSslCertWithFormdataBody(ctx context.Context, body PostServiceCreateSslCertFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateTcp request with any body
	PostServiceCreateTcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTcp(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTcpWithFormdataBody(ctx context.Context, body PostServiceCreateTcpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateTransaction request with any body
	PostServiceCreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTransaction(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateTransactionWithFormdataBody(ctx context.Context, body PostServiceCreateTransactionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateUdp request with any body
	PostServiceCreateUdpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateUdp(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateUdpWithFormdataBody(ctx context.Context, body PostServiceCreateUdpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateWebhook request with any body
	PostServiceCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWebhook(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWebhookWithFormdataBody(ctx context.Context, body PostServiceCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceCreateWhois request with any body
	PostServiceCreateWhoisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWhois(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostServiceCreateWhoisWithFormdataBody(ctx context.Context, body PostServiceCreateWhoisFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkEscalations request with any body
	PatchServiceBulkEscalationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkEscalations(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkEscalationsWithFormdataBody(ctx context.Context, body PatchServiceBulkEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkMaintenance request with any body
	PatchServiceBulkMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkMaintenance(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkMaintenanceWithFormdataBody(ctx context.Context, body PatchServiceBulkMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkPause request with any body
	PatchServiceBulkPauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkPause(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkPauseWithFormdataBody(ctx context.Context, body PatchServiceBulkPauseFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkResume request with any body
	PatchServiceBulkResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkResume(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkResumeWithFormdataBody(ctx context.Context, body PatchServiceBulkResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceBulkStats request
	GetServiceBulkStats(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceBulkUpdate request with any body
	PatchServiceBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkUpdate(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceBulkUpdateWithFormdataBody(ctx context.Context, body PatchServiceBulkUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceShowServiceDefs request
	GetServiceShowServiceDefs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceShowLocations request
	GetServiceShowLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteServiceDetail request
	DeleteServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceDetail request
	GetServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceDetail request with any body
	PatchServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceDetail(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceDetailWithFormdataBody(ctx context.Context, pk string, body PatchServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutServiceDetail request with any body
	PutServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceDetail(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutServiceDetailWithFormdataBody(ctx context.Context, pk string, body PutServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddContactGroups request with any body
	PatchServiceAddContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddContactGroups(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddContactGroupsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddLocations request with any body
	PatchServiceAddLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddLocations(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddLocationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceAddTags request with any body
	PatchServiceAddTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddTags(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceAddTagsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceAnalysis request
	GetServiceAnalysis(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceCurrentStatus request
	GetServiceCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceSetEscalations request with any body
	PatchServiceSetEscalationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetEscalations(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetEscalationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceSetEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceSetMaintenance request with any body
	PatchServiceSetMaintenanceWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetMaintenance(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceSetMaintenanceWithFormdataBody(ctx context.Context, pk string, body PatchServiceSetMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServicePause request
	PostServicePause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceContactGroups request with any body
	PatchServiceReplaceContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceContactGroups(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceContactGroupsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceLocations request with any body
	PatchServiceReplaceLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceLocations(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceLocationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchServiceReplaceTags request with any body
	PatchServiceReplaceTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceTags(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchServiceReplaceTagsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceResponseTimeDatapoints request
	GetServiceResponseTimeDatapoints(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostServiceResume request
	PostServiceResume(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceStats request
	GetServiceStats(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactgrouplist request
	GetContactgrouplist(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContactgrouplist request with any body
	PostContactgrouplistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactgrouplist(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostContactgrouplistWithFormdataBody(ctx context.Context, body PostContactgrouplistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContactGroupDetail request
	DeleteContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactGroupDetail request
	GetContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchContactGroupDetail request with any body
	PatchContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupDetail(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupDetailWithFormdataBody(ctx context.Context, pk string, body PatchContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutContactGroupDetail request with any body
	PutContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactGroupDetail(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutContactGroupDetailWithFormdataBody(ctx context.Context, pk string, body PutContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchContactGroupSetOnCallHours request with any body
	PatchContactGroupSetOnCallHoursWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupSetOnCallHours(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchContactGroupSetOnCallHoursWithFormdataBody(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardlist request
	GetDashboardlist(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDashboardlist request with any body
	PostDashboardlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardlist(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDashboardlistWithFormdataBody(ctx context.Context, body PostDashboardlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardDefault request
	GetDashboardDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDashboardDetail request
	DeleteDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardDetail request
	GetDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDashboardDetail request with any body
	PatchDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDashboardDetail(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDashboardDetailWithFormdataBody(ctx context.Context, pk string, body PatchDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDashboardDetail request with any body
	PutDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDashboardDetail(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDashboardDetailWithFormdataBody(ctx context.Context, pk string, body PutDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDashboardStats request
	GetDashboardStats(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationlist request
	GetIntegrationlist(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateCachet request with any body
	PostIntegrationCreateCachetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateCachet(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateCachetWithFormdataBody(ctx context.Context, body PostIntegrationCreateCachetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateDatadog request with any body
	PostIntegrationCreateDatadogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateDatadog(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateDatadogWithFormdataBody(ctx context.Context, body PostIntegrationCreateDatadogFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateGeckoboard request with any body
	PostIntegrationCreateGeckoboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateGeckoboard(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateGeckoboardWithFormdataBody(ctx context.Context, body PostIntegrationCreateGeckoboardFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateJiraservicedesk request with any body
	PostIntegrationCreateJiraservicedeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateJiraservicedesk(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateJiraservicedeskWithFormdataBody(ctx context.Context, body PostIntegrationCreateJiraservicedeskFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateKlipfolio request with any body
	PostIntegrationCreateKlipfolioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateKlipfolio(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateKlipfolioWithFormdataBody(ctx context.Context, body PostIntegrationCreateKlipfolioFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateLibrato request with any body
	PostIntegrationCreateLibratoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateLibrato(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateLibratoWithFormdataBody(ctx context.Context, body PostIntegrationCreateLibratoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateMicrosoftTeams request with any body
	PostIntegrationCreateMicrosoftTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateMicrosoftTeams(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateMicrosoftTeamsWithFormdataBody(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateOpsgenie request with any body
	PostIntegrationCreateOpsgenieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateOpsgenie(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateOpsgenieWithFormdataBody(ctx context.Context, body PostIntegrationCreateOpsgenieFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePagerduty request with any body
	PostIntegrationCreatePagerdutyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePagerduty(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePagerdutyWithFormdataBody(ctx context.Context, body PostIntegrationCreatePagerdutyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePushbullet request with any body
	PostIntegrationCreatePushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushbullet(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushbulletWithFormdataBody(ctx context.Context, body PostIntegrationCreatePushbulletFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreatePushover request with any body
	PostIntegrationCreatePushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushover(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreatePushoverWithFormdataBody(ctx context.Context, body PostIntegrationCreatePushoverFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateSlack request with any body
	PostIntegrationCreateSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateSlack(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateSlackWithFormdataBody(ctx context.Context, body PostIntegrationCreateSlackFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateStatus request with any body
	PostIntegrationCreateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatus(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatusWithFormdataBody(ctx context.Context, body PostIntegrationCreateStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateStatuspage request with any body
	PostIntegrationCreateStatuspageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatuspage(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateStatuspageWithFormdataBody(ctx context.Context, body PostIntegrationCreateStatuspageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateTwitter request with any body
	PostIntegrationCreateTwitterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateTwitter(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateTwitterWithFormdataBody(ctx context.Context, body PostIntegrationCreateTwitterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateVictorops request with any body
	PostIntegrationCreateVictoropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateVictorops(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateVictoropsWithFormdataBody(ctx context.Context, body PostIntegrationCreateVictoropsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateWavefront request with any body
	PostIntegrationCreateWavefrontWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWavefront(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWavefrontWithFormdataBody(ctx context.Context, body PostIntegrationCreateWavefrontFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateWebhook request with any body
	PostIntegrationCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWebhook(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateWebhookWithFormdataBody(ctx context.Context, body PostIntegrationCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIntegrationCreateZapier request with any body
	PostIntegrationCreateZapierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateZapier(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIntegrationCreateZapierWithFormdataBody(ctx context.Context, body PostIntegrationCreateZapierFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIntegrationDetail request
	DeleteIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIntegrationDetail request
	GetIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchIntegrationDetail request with any body
	PatchIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIntegrationDetail(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIntegrationDetailWithFormdataBody(ctx context.Context, pk string, body PatchIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIntegrationDetail request with any body
	PutIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIntegrationDetail(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIntegrationDetailWithFormdataBody(ctx context.Context, pk string, body PutIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutagelist request
	GetOutagelist(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOutageDetail request
	GetOutageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitoringServerList request
	GetMonitoringServerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPushnotificationlist request
	GetPushnotificationlist(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPushnotificationlist request with any body
	PostPushnotificationlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPushnotificationlist(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPushnotificationlistWithFormdataBody(ctx context.Context, body PostPushnotificationlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePushNotificationDetail request
	DeletePushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPushNotificationDetail request
	GetPushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPushNotificationDetail request with any body
	PatchPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPushNotificationDetail(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPushNotificationDetailWithFormdataBody(ctx context.Context, pk string, body PatchPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPushNotificationDetail request with any body
	PutPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPushNotificationDetail(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPushNotificationDetailWithFormdataBody(ctx context.Context, pk string, body PutPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduledreportlist request
	GetScheduledreportlist(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostScheduledreportlist request with any body
	PostScheduledreportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScheduledreportlist(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostScheduledreportlistWithFormdataBody(ctx context.Context, body PostScheduledreportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScheduledReportDetail request
	DeleteScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScheduledReportDetail request
	GetScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScheduledReportDetail request with any body
	PatchScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScheduledReportDetail(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScheduledReportDetailWithFormdataBody(ctx context.Context, pk string, body PatchScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutScheduledReportDetail request with any body
	PutScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScheduledReportDetail(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutScheduledReportDetailWithFormdataBody(ctx context.Context, pk string, body PutScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlareportlist request
	GetSlareportlist(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSlareportlist request with any body
	PostSlareportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSlareportlist(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSlareportlistWithFormdataBody(ctx context.Context, body PostSlareportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSlaReportDetail request
	DeleteSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlaReportDetail request
	GetSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSlaReportDetail request with any body
	PatchSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSlaReportDetail(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSlaReportDetailWithFormdataBody(ctx context.Context, pk string, body PatchSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSlaReportDetail request with any body
	PutSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSlaReportDetail(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSlaReportDetailWithFormdataBody(ctx context.Context, pk string, body PutSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSlaReportStats request
	GetSlaReportStats(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspagelist request
	GetStatuspagelist(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStatuspagelist request with any body
	PostStatuspagelistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatuspagelist(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStatuspagelistWithFormdataBody(ctx context.Context, body PostStatuspagelistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteStatuspageDetail request
	DeleteStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageDetail request
	GetStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchStatuspageDetail request with any body
	PatchStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchStatuspageDetail(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchStatuspageDetailWithFormdataBody(ctx context.Context, pk string, body PatchStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStatuspageDetail request with any body
	PutStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatuspageDetail(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStatuspageDetailWithFormdataBody(ctx context.Context, pk string, body PutStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageCurrentStatus request
	GetStatuspageCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatuspageHistory request
	GetStatuspageHistory(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentslist request
	GetComponentslist(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComponentslist request with any body
	PostComponentslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComponentslist(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComponentslistWithFormdataBody(ctx context.Context, statuspageId string, body PostComponentslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComponentDetail request
	DeleteComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComponentDetail request
	GetComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComponentDetail request with any body
	PatchComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComponentDetail(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComponentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComponentDetail request with any body
	PutComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComponentDetail(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComponentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentlist request
	GetIncidentlist(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIncidentlist request with any body
	PostIncidentlistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentlist(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIncidentlistWithFormdataBody(ctx context.Context, statuspageId string, body PostIncidentlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncidentDetail request
	DeleteIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentDetail request
	GetIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchIncidentDetail request with any body
	PatchIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIncidentDetail(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchIncidentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIncidentDetail request with any body
	PutIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIncidentDetail(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIncidentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricslist request
	GetMetricslist(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMetricslist request with any body
	PostMetricslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetricslist(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMetricslistWithFormdataBody(ctx context.Context, statuspageId string, body PostMetricslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMetricDetail request
	DeleteMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMetricDetail request
	GetMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchMetricDetail request with any body
	PatchMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMetricDetail(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchMetricDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMetricDetail request with any body
	PutMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMetricDetail(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMetricDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserlist request
	GetUserlist(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserlist request with any body
	PostUserlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserlist(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserlistWithFormdataBody(ctx context.Context, body PostUserlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserDetail request
	DeleteUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDetail request
	GetUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUserDetail request with any body
	PatchUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserDetail(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUserDetailWithFormdataBody(ctx context.Context, pk string, body PatchUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUserDetail request with any body
	PutUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserDetail(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUserDetailWithFormdataBody(ctx context.Context, pk string, body PutUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserDeactivate request
	PostUserDeactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserReactivate request
	PostUserReactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAlertlist(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertAlertRootCause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertAlertRootCauseRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAlertIgnore(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAlertIgnoreRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthAccountUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthAccountUsageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLoginWithFormdataBody(ctx context.Context, body PostAuthLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRequestMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestMagicLinkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthResetPassword(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthResetPasswordRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthResetPasswordWithFormdataBody(ctx context.Context, body PostAuthResetPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthResetPasswordRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMagicLinkWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMagicLinkRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMagicLink(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMagicLinkRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSendMagicLinkWithFormdataBody(ctx context.Context, body PostSendMagicLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSendMagicLinkRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSubaccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSubaccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccounts(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountsWithFormdataBody(ctx context.Context, body PostAuthSubaccountsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthSubaccount(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthSubaccountRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthSubaccountWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthSubaccountRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthSubaccount(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthSubaccountRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAuthSubaccountWithFormdataBody(ctx context.Context, pk string, body PatchAuthSubaccountFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAuthSubaccountRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountPacksWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountPacksRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountPacks(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountPacksRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSubaccountPacksWithFormdataBody(ctx context.Context, pk string, body PostAuthSubaccountPacksFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSubaccountPacksRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostValidateMagicLink(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostValidateMagicLinkRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicetaglist(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicetaglistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicetaglistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicetaglistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicetaglist(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicetaglistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicetaglistWithFormdataBody(ctx context.Context, body PostServicetaglistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicetaglistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceTagDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceTagDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceTagDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceTagDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceTagDetail(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceTagDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceTagDetailWithFormdataBody(ctx context.Context, pk string, body PatchServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceTagDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceTagDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceTagDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceTagDetail(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceTagDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceTagDetailWithFormdataBody(ctx context.Context, pk string, body PutServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceTagDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServicelist(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServicelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateApiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateApiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateApi(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateApiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateApiWithFormdataBody(ctx context.Context, body PostServiceCreateApiFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateApiRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateBlacklistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateBlacklistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateBlacklist(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateBlacklistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateBlacklistWithFormdataBody(ctx context.Context, body PostServiceCreateBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateBlacklistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateDnsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateDnsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateDns(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateDnsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateDnsWithFormdataBody(ctx context.Context, body PostServiceCreateDnsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateDnsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateGroup(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateGroupWithFormdataBody(ctx context.Context, body PostServiceCreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateGroupRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHeartbeatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHeartbeatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHeartbeat(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHeartbeatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHeartbeatWithFormdataBody(ctx context.Context, body PostServiceCreateHeartbeatFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHeartbeatRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHttpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHttpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHttp(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHttpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateHttpWithFormdataBody(ctx context.Context, body PostServiceCreateHttpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateHttpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateIcmpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateIcmpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateIcmp(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateIcmpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateIcmpWithFormdataBody(ctx context.Context, body PostServiceCreateIcmpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateIcmpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateImapWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateImapRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateImap(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateImapRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateImapWithFormdataBody(ctx context.Context, body PostServiceCreateImapFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateImapRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateMalwareWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateMalwareRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateMalware(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateMalwareRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateMalwareWithFormdataBody(ctx context.Context, body PostServiceCreateMalwareFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateMalwareRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateNtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateNtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateNtp(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateNtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateNtpWithFormdataBody(ctx context.Context, body PostServiceCreateNtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateNtpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreatePopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreatePopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreatePop(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreatePopRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreatePopWithFormdataBody(ctx context.Context, body PostServiceCreatePopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreatePopRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRumWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRumRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRumRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRumWithFormdataBody(ctx context.Context, body PostServiceCreateRumFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRumRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRum2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum2(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRum2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateRum2WithFormdataBody(ctx context.Context, body PostServiceCreateRum2FormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateRum2RequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSmtpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSmtpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSmtp(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSmtpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSmtpWithFormdataBody(ctx context.Context, body PostServiceCreateSmtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSmtpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSsh(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSshWithFormdataBody(ctx context.Context, body PostServiceCreateSshFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSshRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSslCertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSslCertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSslCert(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSslCertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateSslCertWithFormdataBody(ctx context.Context, body PostServiceCreateSslCertFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateSslCertRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTcpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTcpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTcp(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTcpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTcpWithFormdataBody(ctx context.Context, body PostServiceCreateTcpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTcpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTransactionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTransaction(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTransactionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateTransactionWithFormdataBody(ctx context.Context, body PostServiceCreateTransactionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateTransactionRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateUdpWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateUdpRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateUdp(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateUdpRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateUdpWithFormdataBody(ctx context.Context, body PostServiceCreateUdpFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateUdpRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWebhook(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWebhookWithFormdataBody(ctx context.Context, body PostServiceCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWebhookRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWhoisWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWhoisRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWhois(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWhoisRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceCreateWhoisWithFormdataBody(ctx context.Context, body PostServiceCreateWhoisFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceCreateWhoisRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkEscalationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkEscalationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkEscalations(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkEscalationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkEscalationsWithFormdataBody(ctx context.Context, body PatchServiceBulkEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkEscalationsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkMaintenanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkMaintenanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkMaintenance(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkMaintenanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkMaintenanceWithFormdataBody(ctx context.Context, body PatchServiceBulkMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkMaintenanceRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkPauseWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkPauseRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkPause(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkPauseRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkPauseWithFormdataBody(ctx context.Context, body PatchServiceBulkPauseFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkPauseRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkResumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkResumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkResume(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkResumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkResumeWithFormdataBody(ctx context.Context, body PatchServiceBulkResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkResumeRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceBulkStats(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceBulkStatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkUpdate(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceBulkUpdateWithFormdataBody(ctx context.Context, body PatchServiceBulkUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceBulkUpdateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceShowServiceDefs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceShowServiceDefsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceShowLocations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceShowLocationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceDetail(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceDetailWithFormdataBody(ctx context.Context, pk string, body PatchServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceDetail(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutServiceDetailWithFormdataBody(ctx context.Context, pk string, body PutServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutServiceDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddContactGroupsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddContactGroups(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddContactGroupsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddContactGroupsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddContactGroupsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddLocationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddLocations(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddLocationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddLocationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddLocationsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddTagsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddTags(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddTagsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceAddTagsWithFormdataBody(ctx context.Context, pk string, body PatchServiceAddTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceAddTagsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceAnalysis(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceAnalysisRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceCurrentStatusRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetEscalationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetEscalationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetEscalations(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetEscalationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetEscalationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceSetEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetEscalationsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetMaintenanceWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetMaintenanceRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetMaintenance(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetMaintenanceRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceSetMaintenanceWithFormdataBody(ctx context.Context, pk string, body PatchServiceSetMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceSetMaintenanceRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServicePause(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServicePauseRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceContactGroupsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceContactGroupsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceContactGroups(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceContactGroupsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceContactGroupsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceContactGroupsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceLocationsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceLocationsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceLocations(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceLocationsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceLocationsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceLocationsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceTagsWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceTagsRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceTags(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceTagsRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchServiceReplaceTagsWithFormdataBody(ctx context.Context, pk string, body PatchServiceReplaceTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchServiceReplaceTagsRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceResponseTimeDatapoints(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceResponseTimeDatapointsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostServiceResume(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostServiceResumeRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceStats(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceStatsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactgrouplist(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactgrouplistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactgrouplistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactgrouplistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactgrouplist(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactgrouplistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContactgrouplistWithFormdataBody(ctx context.Context, body PostContactgrouplistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContactgrouplistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContactGroupDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactGroupDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactGroupDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupDetail(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupDetailWithFormdataBody(ctx context.Context, pk string, body PatchContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactGroupDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactGroupDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactGroupDetail(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactGroupDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutContactGroupDetailWithFormdataBody(ctx context.Context, pk string, body PutContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutContactGroupDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupSetOnCallHoursWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupSetOnCallHoursRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupSetOnCallHours(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupSetOnCallHoursRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchContactGroupSetOnCallHoursWithFormdataBody(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchContactGroupSetOnCallHoursRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardlist(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardlist(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDashboardlistWithFormdataBody(ctx context.Context, body PostDashboardlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDashboardlistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardDefault(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardDefaultRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDashboardDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDashboardDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDashboardDetail(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDashboardDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDashboardDetailWithFormdataBody(ctx context.Context, pk string, body PatchDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDashboardDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardDetail(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDashboardDetailWithFormdataBody(ctx context.Context, pk string, body PutDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDashboardDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDashboardStats(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDashboardStatsRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationlist(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateCachetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateCachetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateCachet(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateCachetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateCachetWithFormdataBody(ctx context.Context, body PostIntegrationCreateCachetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateCachetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateDatadogWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateDatadogRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateDatadog(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateDatadogRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateDatadogWithFormdataBody(ctx context.Context, body PostIntegrationCreateDatadogFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateDatadogRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateGeckoboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateGeckoboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateGeckoboard(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateGeckoboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateGeckoboardWithFormdataBody(ctx context.Context, body PostIntegrationCreateGeckoboardFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateGeckoboardRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateJiraservicedeskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateJiraservicedeskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateJiraservicedesk(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateJiraservicedeskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateJiraservicedeskWithFormdataBody(ctx context.Context, body PostIntegrationCreateJiraservicedeskFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateJiraservicedeskRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateKlipfolioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateKlipfolioRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateKlipfolio(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateKlipfolioRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateKlipfolioWithFormdataBody(ctx context.Context, body PostIntegrationCreateKlipfolioFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateKlipfolioRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateLibratoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateLibratoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateLibrato(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateLibratoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateLibratoWithFormdataBody(ctx context.Context, body PostIntegrationCreateLibratoFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateLibratoRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateMicrosoftTeamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateMicrosoftTeams(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateMicrosoftTeamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateMicrosoftTeamsWithFormdataBody(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateMicrosoftTeamsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateOpsgenieWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateOpsgenieRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateOpsgenie(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateOpsgenieRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateOpsgenieWithFormdataBody(ctx context.Context, body PostIntegrationCreateOpsgenieFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateOpsgenieRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePagerdutyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePagerdutyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePagerduty(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePagerdutyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePagerdutyWithFormdataBody(ctx context.Context, body PostIntegrationCreatePagerdutyFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePagerdutyRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushbulletRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushbullet(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushbulletRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushbulletWithFormdataBody(ctx context.Context, body PostIntegrationCreatePushbulletFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushbulletRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushoverRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushover(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushoverRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreatePushoverWithFormdataBody(ctx context.Context, body PostIntegrationCreatePushoverFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreatePushoverRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSlackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSlack(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSlackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateSlackWithFormdataBody(ctx context.Context, body PostIntegrationCreateSlackFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateSlackRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatus(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatusWithFormdataBody(ctx context.Context, body PostIntegrationCreateStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatusRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatuspageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatuspageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatuspage(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatuspageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateStatuspageWithFormdataBody(ctx context.Context, body PostIntegrationCreateStatuspageFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateStatuspageRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateTwitterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateTwitterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateTwitter(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateTwitterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateTwitterWithFormdataBody(ctx context.Context, body PostIntegrationCreateTwitterFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateTwitterRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateVictoropsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateVictoropsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateVictorops(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateVictoropsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateVictoropsWithFormdataBody(ctx context.Context, body PostIntegrationCreateVictoropsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateVictoropsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWavefrontWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWavefrontRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWavefront(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWavefrontRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWavefrontWithFormdataBody(ctx context.Context, body PostIntegrationCreateWavefrontFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWavefrontRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWebhook(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateWebhookWithFormdataBody(ctx context.Context, body PostIntegrationCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateWebhookRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateZapierWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateZapierRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateZapier(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateZapierRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIntegrationCreateZapierWithFormdataBody(ctx context.Context, body PostIntegrationCreateZapierFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIntegrationCreateZapierRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIntegrationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIntegrationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIntegrationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIntegrationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIntegrationDetail(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIntegrationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIntegrationDetailWithFormdataBody(ctx context.Context, pk string, body PatchIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIntegrationDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIntegrationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIntegrationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIntegrationDetail(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIntegrationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIntegrationDetailWithFormdataBody(ctx context.Context, pk string, body PutIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIntegrationDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutagelist(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutagelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOutageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOutageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitoringServerList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitoringServerListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPushnotificationlist(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPushnotificationlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushnotificationlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushnotificationlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushnotificationlist(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushnotificationlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPushnotificationlistWithFormdataBody(ctx context.Context, body PostPushnotificationlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPushnotificationlistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePushNotificationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPushNotificationDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPushNotificationDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPushNotificationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPushNotificationDetail(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPushNotificationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPushNotificationDetailWithFormdataBody(ctx context.Context, pk string, body PatchPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPushNotificationDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushNotificationDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushNotificationDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushNotificationDetail(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushNotificationDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPushNotificationDetailWithFormdataBody(ctx context.Context, pk string, body PutPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPushNotificationDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduledreportlist(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduledreportlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScheduledreportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScheduledreportlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScheduledreportlist(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScheduledreportlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostScheduledreportlistWithFormdataBody(ctx context.Context, body PostScheduledreportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostScheduledreportlistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScheduledReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScheduledReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScheduledReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScheduledReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScheduledReportDetail(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScheduledReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScheduledReportDetailWithFormdataBody(ctx context.Context, pk string, body PatchScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScheduledReportDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScheduledReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScheduledReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScheduledReportDetail(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScheduledReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutScheduledReportDetailWithFormdataBody(ctx context.Context, pk string, body PutScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutScheduledReportDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlareportlist(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlareportlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSlareportlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSlareportlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSlareportlist(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSlareportlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSlareportlistWithFormdataBody(ctx context.Context, body PostSlareportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSlareportlistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSlaReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlaReportDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlaReportDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSlaReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSlaReportDetail(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSlaReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSlaReportDetailWithFormdataBody(ctx context.Context, pk string, body PatchSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSlaReportDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlaReportDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlaReportDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlaReportDetail(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlaReportDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSlaReportDetailWithFormdataBody(ctx context.Context, pk string, body PutSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSlaReportDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSlaReportStats(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSlaReportStatsRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspagelist(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspagelistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatuspagelistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatuspagelistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatuspagelist(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatuspagelistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStatuspagelistWithFormdataBody(ctx context.Context, body PostStatuspagelistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStatuspagelistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteStatuspageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStatuspageDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStatuspageDetail(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStatuspageDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchStatuspageDetailWithFormdataBody(ctx context.Context, pk string, body PatchStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchStatuspageDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatuspageDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatuspageDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatuspageDetail(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatuspageDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStatuspageDetailWithFormdataBody(ctx context.Context, pk string, body PutStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStatuspageDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageCurrentStatus(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageCurrentStatusRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatuspageHistory(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatuspageHistoryRequest(c.Server, pk, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentslist(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentslistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentslistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentslist(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentslistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComponentslistWithFormdataBody(ctx context.Context, statuspageId string, body PostComponentslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComponentslistRequestWithFormdataBody(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComponentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComponentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComponentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentDetail(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComponentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComponentDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentDetail(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComponentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComponentDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentlist(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentlistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentlistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentlistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentlist(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentlistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIncidentlistWithFormdataBody(ctx context.Context, statuspageId string, body PostIncidentlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIncidentlistRequestWithFormdataBody(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncidentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIncidentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIncidentDetail(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIncidentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchIncidentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchIncidentDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIncidentDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIncidentDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIncidentDetail(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIncidentDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIncidentDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIncidentDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricslist(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricslistRequest(c.Server, statuspageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetricslistWithBody(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetricslistRequestWithBody(c.Server, statuspageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetricslist(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetricslistRequest(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMetricslistWithFormdataBody(ctx context.Context, statuspageId string, body PostMetricslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMetricslistRequestWithFormdataBody(c.Server, statuspageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMetricDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMetricDetail(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMetricDetailRequest(c.Server, statuspageId, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMetricDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMetricDetail(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMetricDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchMetricDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchMetricDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMetricDetailWithBody(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMetricDetailRequestWithBody(c.Server, statuspageId, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMetricDetail(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMetricDetailRequest(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMetricDetailWithFormdataBody(ctx context.Context, statuspageId string, pk string, body PutMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMetricDetailRequestWithFormdataBody(c.Server, statuspageId, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserlist(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserlistRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserlist(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserlistRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserlistWithFormdataBody(ctx context.Context, body PostUserlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserlistRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDetail(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDetailRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserDetail(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUserDetailWithFormdataBody(ctx context.Context, pk string, body PatchUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUserDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDetailWithBody(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDetailRequestWithBody(c.Server, pk, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDetail(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDetailRequest(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUserDetailWithFormdataBody(ctx context.Context, pk string, body PutUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUserDetailRequestWithFormdataBody(c.Server, pk, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserDeactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserDeactivateRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserReactivate(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserReactivateRequest(c.Server, pk)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAlertlistRequest generates requests for GetAlertlist
func NewGetAlertlistRequest(server string, params *GetAlertlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIsUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_is_up", runtime.ParamLocationQuery, *params.StateIsUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckPk != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_pk", runtime.ParamLocationQuery, *params.CheckPk); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckMonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_monitoring_service_type", runtime.ParamLocationQuery, *params.CheckMonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_tag", runtime.ParamLocationQuery, *params.CheckTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertAlertRootCauseRequest generates requests for GetAlertAlertRootCause
func NewGetAlertAlertRootCauseRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/alert/%s/root-cause/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertDetailRequest generates requests for GetAlertDetail
func NewGetAlertDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAlertIgnoreRequest generates requests for PostAlertIgnore
func NewPostAlertIgnoreRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/alerts/%s/ignore/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthListRequest generates requests for GetAuthList
func NewGetAuthListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthAccountUsageRequest generates requests for GetAuthAccountUsage
func NewGetAuthAccountUsageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account-usage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthLoginRequest calls the generic PostAuthLogin builder with application/json body
func NewPostAuthLoginRequest(server string, body PostAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLoginRequestWithFormdataBody calls the generic PostAuthLogin builder with application/x-www-form-urlencoded body
func NewPostAuthLoginRequestWithFormdataBody(server string, body PostAuthLoginFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthLoginRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequestMagicLinkRequest generates requests for GetRequestMagicLink
func NewGetRequestMagicLinkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/magic-link/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthMeRequest generates requests for GetAuthMe
func NewGetAuthMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthResetPasswordRequest generates requests for GetAuthResetPassword
func NewGetAuthResetPasswordRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthResetPasswordRequest calls the generic PostAuthResetPassword builder with application/json body
func NewPostAuthResetPasswordRequest(server string, body PostAuthResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthResetPasswordRequestWithFormdataBody calls the generic PostAuthResetPassword builder with application/x-www-form-urlencoded body
func NewPostAuthResetPasswordRequestWithFormdataBody(server string, body PostAuthResetPasswordFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthResetPasswordRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthResetPasswordRequestWithBody generates requests for PostAuthResetPassword with any type of body
func NewPostAuthResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSendMagicLinkRequest calls the generic PostSendMagicLink builder with application/json body
func NewPostSendMagicLinkRequest(server string, body PostSendMagicLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSendMagicLinkRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSendMagicLinkRequestWithFormdataBody calls the generic PostSendMagicLink builder with application/x-www-form-urlencoded body
func NewPostSendMagicLinkRequestWithFormdataBody(server string, body PostSendMagicLinkFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSendMagicLinkRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSendMagicLinkRequestWithBody generates requests for PostSendMagicLink with any type of body
func NewPostSendMagicLinkRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/send-magic-link/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSubaccountsRequest generates requests for GetAuthSubaccounts
func NewGetAuthSubaccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthSubaccountsRequest calls the generic PostAuthSubaccounts builder with application/json body
func NewPostAuthSubaccountsRequest(server string, body PostAuthSubaccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSubaccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthSubaccountsRequestWithFormdataBody calls the generic PostAuthSubaccounts builder with application/x-www-form-urlencoded body
func NewPostAuthSubaccountsRequestWithFormdataBody(server string, body PostAuthSubaccountsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthSubaccountsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthSubaccountsRequestWithBody generates requests for PostAuthSubaccounts with any type of body
func NewPostAuthSubaccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuthSubaccountRequest generates requests for GetAuthSubaccount
func NewGetAuthSubaccountRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAuthSubaccountRequest calls the generic PatchAuthSubaccount builder with application/json body
func NewPatchAuthSubaccountRequest(server string, pk string, body PatchAuthSubaccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAuthSubaccountRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchAuthSubaccountRequestWithFormdataBody calls the generic PatchAuthSubaccount builder with application/x-www-form-urlencoded body
func NewPatchAuthSubaccountRequestWithFormdataBody(server string, pk string, body PatchAuthSubaccountFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchAuthSubaccountRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchAuthSubaccountRequestWithBody generates requests for PatchAuthSubaccount with any type of body
func NewPatchAuthSubaccountRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthSubaccountPacksRequest calls the generic PostAuthSubaccountPacks builder with application/json body
func NewPostAuthSubaccountPacksRequest(server string, pk string, body PostAuthSubaccountPacksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSubaccountPacksRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPostAuthSubaccountPacksRequestWithFormdataBody calls the generic PostAuthSubaccountPacks builder with application/x-www-form-urlencoded body
func NewPostAuthSubaccountPacksRequestWithFormdataBody(server string, pk string, body PostAuthSubaccountPacksFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAuthSubaccountPacksRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAuthSubaccountPacksRequestWithBody generates requests for PostAuthSubaccountPacks with any type of body
func NewPostAuthSubaccountPacksRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/subaccounts/%s/allocation/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostValidateMagicLinkRequest generates requests for PostValidateMagicLink
func NewPostValidateMagicLinkRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/validate-magic-link/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServicetaglistRequest generates requests for GetServicetaglist
func NewGetServicetaglistRequest(server string, params *GetServicetaglistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServicetaglistRequest calls the generic PostServicetaglist builder with application/json body
func NewPostServicetaglistRequest(server string, body PostServicetaglistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServicetaglistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServicetaglistRequestWithFormdataBody calls the generic PostServicetaglist builder with application/x-www-form-urlencoded body
func NewPostServicetaglistRequestWithFormdataBody(server string, body PostServicetaglistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServicetaglistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServicetaglistRequestWithBody generates requests for PostServicetaglist with any type of body
func NewPostServicetaglistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteServiceTagDetailRequest generates requests for DeleteServiceTagDetail
func NewDeleteServiceTagDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceTagDetailRequest generates requests for GetServiceTagDetail
func NewGetServiceTagDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceTagDetailRequest calls the generic PatchServiceTagDetail builder with application/json body
func NewPatchServiceTagDetailRequest(server string, pk string, body PatchServiceTagDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceTagDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceTagDetailRequestWithFormdataBody calls the generic PatchServiceTagDetail builder with application/x-www-form-urlencoded body
func NewPatchServiceTagDetailRequestWithFormdataBody(server string, pk string, body PatchServiceTagDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceTagDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceTagDetailRequestWithBody generates requests for PatchServiceTagDetail with any type of body
func NewPatchServiceTagDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceTagDetailRequest calls the generic PutServiceTagDetail builder with application/json body
func NewPutServiceTagDetailRequest(server string, pk string, body PutServiceTagDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceTagDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutServiceTagDetailRequestWithFormdataBody calls the generic PutServiceTagDetail builder with application/x-www-form-urlencoded body
func NewPutServiceTagDetailRequestWithFormdataBody(server string, pk string, body PutServiceTagDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutServiceTagDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutServiceTagDetailRequestWithBody generates requests for PutServiceTagDetail with any type of body
func NewPutServiceTagDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/check-tags/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServicelistRequest generates requests for GetServicelist
func NewGetServicelistRequest(server string, params *GetServicelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "monitoring_service_type", runtime.ParamLocationQuery, *params.MonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsPaused != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_paused", runtime.ParamLocationQuery, *params.IsPaused); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsUnderMaintenance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_under_maintenance", runtime.ParamLocationQuery, *params.IsUnderMaintenance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StateIsUp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state_is_up", runtime.ParamLocationQuery, *params.StateIsUp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasMaintenanceSchedule != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_maintenance_schedule", runtime.ParamLocationQuery, *params.HasMaintenanceSchedule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Tag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceCreateApiRequest calls the generic PostServiceCreateApi builder with application/json body
func NewPostServiceCreateApiRequest(server string, body PostServiceCreateApiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateApiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateApiRequestWithFormdataBody calls the generic PostServiceCreateApi builder with application/x-www-form-urlencoded body
func NewPostServiceCreateApiRequestWithFormdataBody(server string, body PostServiceCreateApiFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateApiRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateApiRequestWithBody generates requests for PostServiceCreateApi with any type of body
func NewPostServiceCreateApiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-api/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateBlacklistRequest calls the generic PostServiceCreateBlacklist builder with application/json body
func NewPostServiceCreateBlacklistRequest(server string, body PostServiceCreateBlacklistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateBlacklistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateBlacklistRequestWithFormdataBody calls the generic PostServiceCreateBlacklist builder with application/x-www-form-urlencoded body
func NewPostServiceCreateBlacklistRequestWithFormdataBody(server string, body PostServiceCreateBlacklistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateBlacklistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateBlacklistRequestWithBody generates requests for PostServiceCreateBlacklist with any type of body
func NewPostServiceCreateBlacklistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-blacklist/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateDnsRequest calls the generic PostServiceCreateDns builder with application/json body
func NewPostServiceCreateDnsRequest(server string, body PostServiceCreateDnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateDnsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateDnsRequestWithFormdataBody calls the generic PostServiceCreateDns builder with application/x-www-form-urlencoded body
func NewPostServiceCreateDnsRequestWithFormdataBody(server string, body PostServiceCreateDnsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateDnsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateDnsRequestWithBody generates requests for PostServiceCreateDns with any type of body
func NewPostServiceCreateDnsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-dns/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateGroupRequest calls the generic PostServiceCreateGroup builder with application/json body
func NewPostServiceCreateGroupRequest(server string, body PostServiceCreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateGroupRequestWithFormdataBody calls the generic PostServiceCreateGroup builder with application/x-www-form-urlencoded body
func NewPostServiceCreateGroupRequestWithFormdataBody(server string, body PostServiceCreateGroupFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateGroupRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateGroupRequestWithBody generates requests for PostServiceCreateGroup with any type of body
func NewPostServiceCreateGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateHeartbeatRequest calls the generic PostServiceCreateHeartbeat builder with application/json body
func NewPostServiceCreateHeartbeatRequest(server string, body PostServiceCreateHeartbeatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateHeartbeatRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateHeartbeatRequestWithFormdataBody calls the generic PostServiceCreateHeartbeat builder with application/x-www-form-urlencoded body
func NewPostServiceCreateHeartbeatRequestWithFormdataBody(server string, body PostServiceCreateHeartbeatFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateHeartbeatRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateHeartbeatRequestWithBody generates requests for PostServiceCreateHeartbeat with any type of body
func NewPostServiceCreateHeartbeatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-heartbeat/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateHttpRequest calls the generic PostServiceCreateHttp builder with application/json body
func NewPostServiceCreateHttpRequest(server string, body PostServiceCreateHttpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateHttpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateHttpRequestWithFormdataBody calls the generic PostServiceCreateHttp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateHttpRequestWithFormdataBody(server string, body PostServiceCreateHttpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateHttpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateHttpRequestWithBody generates requests for PostServiceCreateHttp with any type of body
func NewPostServiceCreateHttpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-http/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateIcmpRequest calls the generic PostServiceCreateIcmp builder with application/json body
func NewPostServiceCreateIcmpRequest(server string, body PostServiceCreateIcmpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateIcmpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateIcmpRequestWithFormdataBody calls the generic PostServiceCreateIcmp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateIcmpRequestWithFormdataBody(server string, body PostServiceCreateIcmpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateIcmpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateIcmpRequestWithBody generates requests for PostServiceCreateIcmp with any type of body
func NewPostServiceCreateIcmpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-icmp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateImapRequest calls the generic PostServiceCreateImap builder with application/json body
func NewPostServiceCreateImapRequest(server string, body PostServiceCreateImapJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateImapRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateImapRequestWithFormdataBody calls the generic PostServiceCreateImap builder with application/x-www-form-urlencoded body
func NewPostServiceCreateImapRequestWithFormdataBody(server string, body PostServiceCreateImapFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateImapRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateImapRequestWithBody generates requests for PostServiceCreateImap with any type of body
func NewPostServiceCreateImapRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-imap/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateMalwareRequest calls the generic PostServiceCreateMalware builder with application/json body
func NewPostServiceCreateMalwareRequest(server string, body PostServiceCreateMalwareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateMalwareRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateMalwareRequestWithFormdataBody calls the generic PostServiceCreateMalware builder with application/x-www-form-urlencoded body
func NewPostServiceCreateMalwareRequestWithFormdataBody(server string, body PostServiceCreateMalwareFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateMalwareRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateMalwareRequestWithBody generates requests for PostServiceCreateMalware with any type of body
func NewPostServiceCreateMalwareRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-malware/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateNtpRequest calls the generic PostServiceCreateNtp builder with application/json body
func NewPostServiceCreateNtpRequest(server string, body PostServiceCreateNtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateNtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateNtpRequestWithFormdataBody calls the generic PostServiceCreateNtp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateNtpRequestWithFormdataBody(server string, body PostServiceCreateNtpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateNtpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateNtpRequestWithBody generates requests for PostServiceCreateNtp with any type of body
func NewPostServiceCreateNtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ntp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreatePopRequest calls the generic PostServiceCreatePop builder with application/json body
func NewPostServiceCreatePopRequest(server string, body PostServiceCreatePopJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreatePopRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreatePopRequestWithFormdataBody calls the generic PostServiceCreatePop builder with application/x-www-form-urlencoded body
func NewPostServiceCreatePopRequestWithFormdataBody(server string, body PostServiceCreatePopFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreatePopRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreatePopRequestWithBody generates requests for PostServiceCreatePop with any type of body
func NewPostServiceCreatePopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-pop/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateRumRequest calls the generic PostServiceCreateRum builder with application/json body
func NewPostServiceCreateRumRequest(server string, body PostServiceCreateRumJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateRumRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateRumRequestWithFormdataBody calls the generic PostServiceCreateRum builder with application/x-www-form-urlencoded body
func NewPostServiceCreateRumRequestWithFormdataBody(server string, body PostServiceCreateRumFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateRumRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateRumRequestWithBody generates requests for PostServiceCreateRum with any type of body
func NewPostServiceCreateRumRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-rum/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateRum2Request calls the generic PostServiceCreateRum2 builder with application/json body
func NewPostServiceCreateRum2Request(server string, body PostServiceCreateRum2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateRum2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateRum2RequestWithFormdataBody calls the generic PostServiceCreateRum2 builder with application/x-www-form-urlencoded body
func NewPostServiceCreateRum2RequestWithFormdataBody(server string, body PostServiceCreateRum2FormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateRum2RequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateRum2RequestWithBody generates requests for PostServiceCreateRum2 with any type of body
func NewPostServiceCreateRum2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-rum2/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSmtpRequest calls the generic PostServiceCreateSmtp builder with application/json body
func NewPostServiceCreateSmtpRequest(server string, body PostServiceCreateSmtpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSmtpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSmtpRequestWithFormdataBody calls the generic PostServiceCreateSmtp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateSmtpRequestWithFormdataBody(server string, body PostServiceCreateSmtpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateSmtpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateSmtpRequestWithBody generates requests for PostServiceCreateSmtp with any type of body
func NewPostServiceCreateSmtpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-smtp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSshRequest calls the generic PostServiceCreateSsh builder with application/json body
func NewPostServiceCreateSshRequest(server string, body PostServiceCreateSshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSshRequestWithFormdataBody calls the generic PostServiceCreateSsh builder with application/x-www-form-urlencoded body
func NewPostServiceCreateSshRequestWithFormdataBody(server string, body PostServiceCreateSshFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateSshRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateSshRequestWithBody generates requests for PostServiceCreateSsh with any type of body
func NewPostServiceCreateSshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ssh/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateSslCertRequest calls the generic PostServiceCreateSslCert builder with application/json body
func NewPostServiceCreateSslCertRequest(server string, body PostServiceCreateSslCertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateSslCertRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateSslCertRequestWithFormdataBody calls the generic PostServiceCreateSslCert builder with application/x-www-form-urlencoded body
func NewPostServiceCreateSslCertRequestWithFormdataBody(server string, body PostServiceCreateSslCertFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateSslCertRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateSslCertRequestWithBody generates requests for PostServiceCreateSslCert with any type of body
func NewPostServiceCreateSslCertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-ssl-cert/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateTcpRequest calls the generic PostServiceCreateTcp builder with application/json body
func NewPostServiceCreateTcpRequest(server string, body PostServiceCreateTcpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateTcpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateTcpRequestWithFormdataBody calls the generic PostServiceCreateTcp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateTcpRequestWithFormdataBody(server string, body PostServiceCreateTcpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateTcpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateTcpRequestWithBody generates requests for PostServiceCreateTcp with any type of body
func NewPostServiceCreateTcpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-tcp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateTransactionRequest calls the generic PostServiceCreateTransaction builder with application/json body
func NewPostServiceCreateTransactionRequest(server string, body PostServiceCreateTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateTransactionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateTransactionRequestWithFormdataBody calls the generic PostServiceCreateTransaction builder with application/x-www-form-urlencoded body
func NewPostServiceCreateTransactionRequestWithFormdataBody(server string, body PostServiceCreateTransactionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateTransactionRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateTransactionRequestWithBody generates requests for PostServiceCreateTransaction with any type of body
func NewPostServiceCreateTransactionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-transaction/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateUdpRequest calls the generic PostServiceCreateUdp builder with application/json body
func NewPostServiceCreateUdpRequest(server string, body PostServiceCreateUdpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateUdpRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateUdpRequestWithFormdataBody calls the generic PostServiceCreateUdp builder with application/x-www-form-urlencoded body
func NewPostServiceCreateUdpRequestWithFormdataBody(server string, body PostServiceCreateUdpFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateUdpRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateUdpRequestWithBody generates requests for PostServiceCreateUdp with any type of body
func NewPostServiceCreateUdpRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-udp/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateWebhookRequest calls the generic PostServiceCreateWebhook builder with application/json body
func NewPostServiceCreateWebhookRequest(server string, body PostServiceCreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateWebhookRequestWithFormdataBody calls the generic PostServiceCreateWebhook builder with application/x-www-form-urlencoded body
func NewPostServiceCreateWebhookRequestWithFormdataBody(server string, body PostServiceCreateWebhookFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateWebhookRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateWebhookRequestWithBody generates requests for PostServiceCreateWebhook with any type of body
func NewPostServiceCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-webhook/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServiceCreateWhoisRequest calls the generic PostServiceCreateWhois builder with application/json body
func NewPostServiceCreateWhoisRequest(server string, body PostServiceCreateWhoisJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostServiceCreateWhoisRequestWithBody(server, "application/json", bodyReader)
}

// NewPostServiceCreateWhoisRequestWithFormdataBody calls the generic PostServiceCreateWhois builder with application/x-www-form-urlencoded body
func NewPostServiceCreateWhoisRequestWithFormdataBody(server string, body PostServiceCreateWhoisFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostServiceCreateWhoisRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostServiceCreateWhoisRequestWithBody generates requests for PostServiceCreateWhois with any type of body
func NewPostServiceCreateWhoisRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/add-whois/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkEscalationsRequest calls the generic PatchServiceBulkEscalations builder with application/json body
func NewPatchServiceBulkEscalationsRequest(server string, body PatchServiceBulkEscalationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkEscalationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkEscalationsRequestWithFormdataBody calls the generic PatchServiceBulkEscalations builder with application/x-www-form-urlencoded body
func NewPatchServiceBulkEscalationsRequestWithFormdataBody(server string, body PatchServiceBulkEscalationsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceBulkEscalationsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceBulkEscalationsRequestWithBody generates requests for PatchServiceBulkEscalations with any type of body
func NewPatchServiceBulkEscalationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/escalations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkMaintenanceRequest calls the generic PatchServiceBulkMaintenance builder with application/json body
func NewPatchServiceBulkMaintenanceRequest(server string, body PatchServiceBulkMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkMaintenanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkMaintenanceRequestWithFormdataBody calls the generic PatchServiceBulkMaintenance builder with application/x-www-form-urlencoded body
func NewPatchServiceBulkMaintenanceRequestWithFormdataBody(server string, body PatchServiceBulkMaintenanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceBulkMaintenanceRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceBulkMaintenanceRequestWithBody generates requests for PatchServiceBulkMaintenance with any type of body
func NewPatchServiceBulkMaintenanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/maintenance/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkPauseRequest calls the generic PatchServiceBulkPause builder with application/json body
func NewPatchServiceBulkPauseRequest(server string, body PatchServiceBulkPauseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkPauseRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkPauseRequestWithFormdataBody calls the generic PatchServiceBulkPause builder with application/x-www-form-urlencoded body
func NewPatchServiceBulkPauseRequestWithFormdataBody(server string, body PatchServiceBulkPauseFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceBulkPauseRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceBulkPauseRequestWithBody generates requests for PatchServiceBulkPause with any type of body
func NewPatchServiceBulkPauseRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/pause/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceBulkResumeRequest calls the generic PatchServiceBulkResume builder with application/json body
func NewPatchServiceBulkResumeRequest(server string, body PatchServiceBulkResumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkResumeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkResumeRequestWithFormdataBody calls the generic PatchServiceBulkResume builder with application/x-www-form-urlencoded body
func NewPatchServiceBulkResumeRequestWithFormdataBody(server string, body PatchServiceBulkResumeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceBulkResumeRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceBulkResumeRequestWithBody generates requests for PatchServiceBulkResume with any type of body
func NewPatchServiceBulkResumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/resume/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceBulkStatsRequest generates requests for GetServiceBulkStats
func NewGetServiceBulkStatsRequest(server string, params *GetServiceBulkStatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/stats/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pk", runtime.ParamLocationQuery, params.Pk); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeAlerts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_alerts", runtime.ParamLocationQuery, *params.IncludeAlerts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceBulkUpdateRequest calls the generic PatchServiceBulkUpdate builder with application/json body
func NewPatchServiceBulkUpdateRequest(server string, body PatchServiceBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchServiceBulkUpdateRequestWithFormdataBody calls the generic PatchServiceBulkUpdate builder with application/x-www-form-urlencoded body
func NewPatchServiceBulkUpdateRequestWithFormdataBody(server string, body PatchServiceBulkUpdateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceBulkUpdateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceBulkUpdateRequestWithBody generates requests for PatchServiceBulkUpdate with any type of body
func NewPatchServiceBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/bulk/update/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceShowServiceDefsRequest generates requests for GetServiceShowServiceDefs
func NewGetServiceShowServiceDefsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/check-definitions/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceShowLocationsRequest generates requests for GetServiceShowLocations
func NewGetServiceShowLocationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteServiceDetailRequest generates requests for DeleteServiceDetail
func NewDeleteServiceDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceDetailRequest generates requests for GetServiceDetail
func NewGetServiceDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceDetailRequest calls the generic PatchServiceDetail builder with application/json body
func NewPatchServiceDetailRequest(server string, pk string, body PatchServiceDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceDetailRequestWithFormdataBody calls the generic PatchServiceDetail builder with application/x-www-form-urlencoded body
func NewPatchServiceDetailRequestWithFormdataBody(server string, pk string, body PatchServiceDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceDetailRequestWithBody generates requests for PatchServiceDetail with any type of body
func NewPatchServiceDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutServiceDetailRequest calls the generic PutServiceDetail builder with application/json body
func NewPutServiceDetailRequest(server string, pk string, body PutServiceDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutServiceDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutServiceDetailRequestWithFormdataBody calls the generic PutServiceDetail builder with application/x-www-form-urlencoded body
func NewPutServiceDetailRequestWithFormdataBody(server string, pk string, body PutServiceDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutServiceDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutServiceDetailRequestWithBody generates requests for PutServiceDetail with any type of body
func NewPutServiceDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddContactGroupsRequest calls the generic PatchServiceAddContactGroups builder with application/json body
func NewPatchServiceAddContactGroupsRequest(server string, pk string, body PatchServiceAddContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddContactGroupsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddContactGroupsRequestWithFormdataBody calls the generic PatchServiceAddContactGroups builder with application/x-www-form-urlencoded body
func NewPatchServiceAddContactGroupsRequestWithFormdataBody(server string, pk string, body PatchServiceAddContactGroupsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceAddContactGroupsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceAddContactGroupsRequestWithBody generates requests for PatchServiceAddContactGroups with any type of body
func NewPatchServiceAddContactGroupsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-contact-groups/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddLocationsRequest calls the generic PatchServiceAddLocations builder with application/json body
func NewPatchServiceAddLocationsRequest(server string, pk string, body PatchServiceAddLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddLocationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddLocationsRequestWithFormdataBody calls the generic PatchServiceAddLocations builder with application/x-www-form-urlencoded body
func NewPatchServiceAddLocationsRequestWithFormdataBody(server string, pk string, body PatchServiceAddLocationsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceAddLocationsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceAddLocationsRequestWithBody generates requests for PatchServiceAddLocations with any type of body
func NewPatchServiceAddLocationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-locations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceAddTagsRequest calls the generic PatchServiceAddTags builder with application/json body
func NewPatchServiceAddTagsRequest(server string, pk string, body PatchServiceAddTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceAddTagsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceAddTagsRequestWithFormdataBody calls the generic PatchServiceAddTags builder with application/x-www-form-urlencoded body
func NewPatchServiceAddTagsRequestWithFormdataBody(server string, pk string, body PatchServiceAddTagsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceAddTagsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceAddTagsRequestWithBody generates requests for PatchServiceAddTags with any type of body
func NewPatchServiceAddTagsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/add-tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceAnalysisRequest generates requests for GetServiceAnalysis
func NewGetServiceAnalysisRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/analysis/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceCurrentStatusRequest generates requests for GetServiceCurrentStatus
func NewGetServiceCurrentStatusRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/current-status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceSetEscalationsRequest calls the generic PatchServiceSetEscalations builder with application/json body
func NewPatchServiceSetEscalationsRequest(server string, pk string, body PatchServiceSetEscalationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceSetEscalationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceSetEscalationsRequestWithFormdataBody calls the generic PatchServiceSetEscalations builder with application/x-www-form-urlencoded body
func NewPatchServiceSetEscalationsRequestWithFormdataBody(server string, pk string, body PatchServiceSetEscalationsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceSetEscalationsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceSetEscalationsRequestWithBody generates requests for PatchServiceSetEscalations with any type of body
func NewPatchServiceSetEscalationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/escalations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceSetMaintenanceRequest calls the generic PatchServiceSetMaintenance builder with application/json body
func NewPatchServiceSetMaintenanceRequest(server string, pk string, body PatchServiceSetMaintenanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceSetMaintenanceRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceSetMaintenanceRequestWithFormdataBody calls the generic PatchServiceSetMaintenance builder with application/x-www-form-urlencoded body
func NewPatchServiceSetMaintenanceRequestWithFormdataBody(server string, pk string, body PatchServiceSetMaintenanceFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceSetMaintenanceRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceSetMaintenanceRequestWithBody generates requests for PatchServiceSetMaintenance with any type of body
func NewPatchServiceSetMaintenanceRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/maintenance/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostServicePauseRequest generates requests for PostServicePause
func NewPostServicePauseRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/pause/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchServiceReplaceContactGroupsRequest calls the generic PatchServiceReplaceContactGroups builder with application/json body
func NewPatchServiceReplaceContactGroupsRequest(server string, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceContactGroupsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceContactGroupsRequestWithFormdataBody calls the generic PatchServiceReplaceContactGroups builder with application/x-www-form-urlencoded body
func NewPatchServiceReplaceContactGroupsRequestWithFormdataBody(server string, pk string, body PatchServiceReplaceContactGroupsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceReplaceContactGroupsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceReplaceContactGroupsRequestWithBody generates requests for PatchServiceReplaceContactGroups with any type of body
func NewPatchServiceReplaceContactGroupsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-contact-groups/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceReplaceLocationsRequest calls the generic PatchServiceReplaceLocations builder with application/json body
func NewPatchServiceReplaceLocationsRequest(server string, pk string, body PatchServiceReplaceLocationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceLocationsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceLocationsRequestWithFormdataBody calls the generic PatchServiceReplaceLocations builder with application/x-www-form-urlencoded body
func NewPatchServiceReplaceLocationsRequestWithFormdataBody(server string, pk string, body PatchServiceReplaceLocationsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceReplaceLocationsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceReplaceLocationsRequestWithBody generates requests for PatchServiceReplaceLocations with any type of body
func NewPatchServiceReplaceLocationsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-locations/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchServiceReplaceTagsRequest calls the generic PatchServiceReplaceTags builder with application/json body
func NewPatchServiceReplaceTagsRequest(server string, pk string, body PatchServiceReplaceTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchServiceReplaceTagsRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchServiceReplaceTagsRequestWithFormdataBody calls the generic PatchServiceReplaceTags builder with application/x-www-form-urlencoded body
func NewPatchServiceReplaceTagsRequestWithFormdataBody(server string, pk string, body PatchServiceReplaceTagsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchServiceReplaceTagsRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchServiceReplaceTagsRequestWithBody generates requests for PatchServiceReplaceTags with any type of body
func NewPatchServiceReplaceTagsRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/replace-tags/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceResponseTimeDatapointsRequest generates requests for GetServiceResponseTimeDatapoints
func NewGetServiceResponseTimeDatapointsRequest(server string, pk string, params *GetServiceResponseTimeDatapointsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/response-time/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostServiceResumeRequest generates requests for PostServiceResume
func NewPostServiceResumeRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/resume/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceStatsRequest generates requests for GetServiceStats
func NewGetServiceStatsRequest(server string, pk string, params *GetServiceStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/checks/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Location != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.LocationsResponseTimes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "locations_response_times", runtime.ParamLocationQuery, *params.LocationsResponseTimes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeAlerts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_alerts", runtime.ParamLocationQuery, *params.IncludeAlerts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Download != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "download", runtime.ParamLocationQuery, *params.Download); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Pdf != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pdf", runtime.ParamLocationQuery, *params.Pdf); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactgrouplistRequest generates requests for GetContactgrouplist
func NewGetContactgrouplistRequest(server string, params *GetContactgrouplistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.HasOnCallSchedule != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "has_on_call_schedule", runtime.ParamLocationQuery, *params.HasOnCallSchedule); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostContactgrouplistRequest calls the generic PostContactgrouplist builder with application/json body
func NewPostContactgrouplistRequest(server string, body PostContactgrouplistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostContactgrouplistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostContactgrouplistRequestWithFormdataBody calls the generic PostContactgrouplist builder with application/x-www-form-urlencoded body
func NewPostContactgrouplistRequestWithFormdataBody(server string, body PostContactgrouplistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostContactgrouplistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostContactgrouplistRequestWithBody generates requests for PostContactgrouplist with any type of body
func NewPostContactgrouplistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContactGroupDetailRequest generates requests for DeleteContactGroupDetail
func NewDeleteContactGroupDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactGroupDetailRequest generates requests for GetContactGroupDetail
func NewGetContactGroupDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchContactGroupDetailRequest calls the generic PatchContactGroupDetail builder with application/json body
func NewPatchContactGroupDetailRequest(server string, pk string, body PatchContactGroupDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchContactGroupDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchContactGroupDetailRequestWithFormdataBody calls the generic PatchContactGroupDetail builder with application/x-www-form-urlencoded body
func NewPatchContactGroupDetailRequestWithFormdataBody(server string, pk string, body PatchContactGroupDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchContactGroupDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchContactGroupDetailRequestWithBody generates requests for PatchContactGroupDetail with any type of body
func NewPatchContactGroupDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutContactGroupDetailRequest calls the generic PutContactGroupDetail builder with application/json body
func NewPutContactGroupDetailRequest(server string, pk string, body PutContactGroupDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutContactGroupDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutContactGroupDetailRequestWithFormdataBody calls the generic PutContactGroupDetail builder with application/x-www-form-urlencoded body
func NewPutContactGroupDetailRequestWithFormdataBody(server string, pk string, body PutContactGroupDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutContactGroupDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutContactGroupDetailRequestWithBody generates requests for PutContactGroupDetail with any type of body
func NewPutContactGroupDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchContactGroupSetOnCallHoursRequest calls the generic PatchContactGroupSetOnCallHours builder with application/json body
func NewPatchContactGroupSetOnCallHoursRequest(server string, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchContactGroupSetOnCallHoursRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchContactGroupSetOnCallHoursRequestWithFormdataBody calls the generic PatchContactGroupSetOnCallHours builder with application/x-www-form-urlencoded body
func NewPatchContactGroupSetOnCallHoursRequestWithFormdataBody(server string, pk string, body PatchContactGroupSetOnCallHoursFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchContactGroupSetOnCallHoursRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchContactGroupSetOnCallHoursRequestWithBody generates requests for PatchContactGroupSetOnCallHours with any type of body
func NewPatchContactGroupSetOnCallHoursRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/contacts/%s/oncall/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardlistRequest generates requests for GetDashboardlist
func NewGetDashboardlistRequest(server string, params *GetDashboardlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDashboardlistRequest calls the generic PostDashboardlist builder with application/json body
func NewPostDashboardlistRequest(server string, body PostDashboardlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDashboardlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDashboardlistRequestWithFormdataBody calls the generic PostDashboardlist builder with application/x-www-form-urlencoded body
func NewPostDashboardlistRequestWithFormdataBody(server string, body PostDashboardlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostDashboardlistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostDashboardlistRequestWithBody generates requests for PostDashboardlist with any type of body
func NewPostDashboardlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardDefaultRequest generates requests for GetDashboardDefault
func NewGetDashboardDefaultRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/default/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDashboardDetailRequest generates requests for DeleteDashboardDetail
func NewDeleteDashboardDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDashboardDetailRequest generates requests for GetDashboardDetail
func NewGetDashboardDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDashboardDetailRequest calls the generic PatchDashboardDetail builder with application/json body
func NewPatchDashboardDetailRequest(server string, pk string, body PatchDashboardDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDashboardDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchDashboardDetailRequestWithFormdataBody calls the generic PatchDashboardDetail builder with application/x-www-form-urlencoded body
func NewPatchDashboardDetailRequestWithFormdataBody(server string, pk string, body PatchDashboardDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchDashboardDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchDashboardDetailRequestWithBody generates requests for PatchDashboardDetail with any type of body
func NewPatchDashboardDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutDashboardDetailRequest calls the generic PutDashboardDetail builder with application/json body
func NewPutDashboardDetailRequest(server string, pk string, body PutDashboardDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDashboardDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutDashboardDetailRequestWithFormdataBody calls the generic PutDashboardDetail builder with application/x-www-form-urlencoded body
func NewPutDashboardDetailRequestWithFormdataBody(server string, pk string, body PutDashboardDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutDashboardDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutDashboardDetailRequestWithBody generates requests for PutDashboardDetail with any type of body
func NewPutDashboardDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDashboardStatsRequest generates requests for GetDashboardStats
func NewGetDashboardStatsRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dashboards/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationlistRequest generates requests for GetIntegrationlist
func NewGetIntegrationlistRequest(server string, params *GetIntegrationlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Module != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "module", runtime.ParamLocationQuery, *params.Module); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsErrored != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_errored", runtime.ParamLocationQuery, *params.IsErrored); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIntegrationCreateCachetRequest calls the generic PostIntegrationCreateCachet builder with application/json body
func NewPostIntegrationCreateCachetRequest(server string, body PostIntegrationCreateCachetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateCachetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateCachetRequestWithFormdataBody calls the generic PostIntegrationCreateCachet builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateCachetRequestWithFormdataBody(server string, body PostIntegrationCreateCachetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateCachetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateCachetRequestWithBody generates requests for PostIntegrationCreateCachet with any type of body
func NewPostIntegrationCreateCachetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-cachet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateDatadogRequest calls the generic PostIntegrationCreateDatadog builder with application/json body
func NewPostIntegrationCreateDatadogRequest(server string, body PostIntegrationCreateDatadogJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateDatadogRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateDatadogRequestWithFormdataBody calls the generic PostIntegrationCreateDatadog builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateDatadogRequestWithFormdataBody(server string, body PostIntegrationCreateDatadogFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateDatadogRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateDatadogRequestWithBody generates requests for PostIntegrationCreateDatadog with any type of body
func NewPostIntegrationCreateDatadogRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-datadog/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateGeckoboardRequest calls the generic PostIntegrationCreateGeckoboard builder with application/json body
func NewPostIntegrationCreateGeckoboardRequest(server string, body PostIntegrationCreateGeckoboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateGeckoboardRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateGeckoboardRequestWithFormdataBody calls the generic PostIntegrationCreateGeckoboard builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateGeckoboardRequestWithFormdataBody(server string, body PostIntegrationCreateGeckoboardFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateGeckoboardRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateGeckoboardRequestWithBody generates requests for PostIntegrationCreateGeckoboard with any type of body
func NewPostIntegrationCreateGeckoboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-geckoboard/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateJiraservicedeskRequest calls the generic PostIntegrationCreateJiraservicedesk builder with application/json body
func NewPostIntegrationCreateJiraservicedeskRequest(server string, body PostIntegrationCreateJiraservicedeskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateJiraservicedeskRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateJiraservicedeskRequestWithFormdataBody calls the generic PostIntegrationCreateJiraservicedesk builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateJiraservicedeskRequestWithFormdataBody(server string, body PostIntegrationCreateJiraservicedeskFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateJiraservicedeskRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateJiraservicedeskRequestWithBody generates requests for PostIntegrationCreateJiraservicedesk with any type of body
func NewPostIntegrationCreateJiraservicedeskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-jiraservicedesk/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateKlipfolioRequest calls the generic PostIntegrationCreateKlipfolio builder with application/json body
func NewPostIntegrationCreateKlipfolioRequest(server string, body PostIntegrationCreateKlipfolioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateKlipfolioRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateKlipfolioRequestWithFormdataBody calls the generic PostIntegrationCreateKlipfolio builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateKlipfolioRequestWithFormdataBody(server string, body PostIntegrationCreateKlipfolioFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateKlipfolioRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateKlipfolioRequestWithBody generates requests for PostIntegrationCreateKlipfolio with any type of body
func NewPostIntegrationCreateKlipfolioRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-klipfolio/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateLibratoRequest calls the generic PostIntegrationCreateLibrato builder with application/json body
func NewPostIntegrationCreateLibratoRequest(server string, body PostIntegrationCreateLibratoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateLibratoRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateLibratoRequestWithFormdataBody calls the generic PostIntegrationCreateLibrato builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateLibratoRequestWithFormdataBody(server string, body PostIntegrationCreateLibratoFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateLibratoRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateLibratoRequestWithBody generates requests for PostIntegrationCreateLibrato with any type of body
func NewPostIntegrationCreateLibratoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-librato/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateMicrosoftTeamsRequest calls the generic PostIntegrationCreateMicrosoftTeams builder with application/json body
func NewPostIntegrationCreateMicrosoftTeamsRequest(server string, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateMicrosoftTeamsRequestWithFormdataBody calls the generic PostIntegrationCreateMicrosoftTeams builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateMicrosoftTeamsRequestWithFormdataBody(server string, body PostIntegrationCreateMicrosoftTeamsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateMicrosoftTeamsRequestWithBody generates requests for PostIntegrationCreateMicrosoftTeams with any type of body
func NewPostIntegrationCreateMicrosoftTeamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-microsoft-teams/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateOpsgenieRequest calls the generic PostIntegrationCreateOpsgenie builder with application/json body
func NewPostIntegrationCreateOpsgenieRequest(server string, body PostIntegrationCreateOpsgenieJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateOpsgenieRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateOpsgenieRequestWithFormdataBody calls the generic PostIntegrationCreateOpsgenie builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateOpsgenieRequestWithFormdataBody(server string, body PostIntegrationCreateOpsgenieFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateOpsgenieRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateOpsgenieRequestWithBody generates requests for PostIntegrationCreateOpsgenie with any type of body
func NewPostIntegrationCreateOpsgenieRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-opsgenie/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePagerdutyRequest calls the generic PostIntegrationCreatePagerduty builder with application/json body
func NewPostIntegrationCreatePagerdutyRequest(server string, body PostIntegrationCreatePagerdutyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePagerdutyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePagerdutyRequestWithFormdataBody calls the generic PostIntegrationCreatePagerduty builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreatePagerdutyRequestWithFormdataBody(server string, body PostIntegrationCreatePagerdutyFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreatePagerdutyRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreatePagerdutyRequestWithBody generates requests for PostIntegrationCreatePagerduty with any type of body
func NewPostIntegrationCreatePagerdutyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pagerduty/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePushbulletRequest calls the generic PostIntegrationCreatePushbullet builder with application/json body
func NewPostIntegrationCreatePushbulletRequest(server string, body PostIntegrationCreatePushbulletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePushbulletRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePushbulletRequestWithFormdataBody calls the generic PostIntegrationCreatePushbullet builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreatePushbulletRequestWithFormdataBody(server string, body PostIntegrationCreatePushbulletFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreatePushbulletRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreatePushbulletRequestWithBody generates requests for PostIntegrationCreatePushbullet with any type of body
func NewPostIntegrationCreatePushbulletRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pushbullet/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreatePushoverRequest calls the generic PostIntegrationCreatePushover builder with application/json body
func NewPostIntegrationCreatePushoverRequest(server string, body PostIntegrationCreatePushoverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreatePushoverRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreatePushoverRequestWithFormdataBody calls the generic PostIntegrationCreatePushover builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreatePushoverRequestWithFormdataBody(server string, body PostIntegrationCreatePushoverFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreatePushoverRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreatePushoverRequestWithBody generates requests for PostIntegrationCreatePushover with any type of body
func NewPostIntegrationCreatePushoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-pushover/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateSlackRequest calls the generic PostIntegrationCreateSlack builder with application/json body
func NewPostIntegrationCreateSlackRequest(server string, body PostIntegrationCreateSlackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateSlackRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateSlackRequestWithFormdataBody calls the generic PostIntegrationCreateSlack builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateSlackRequestWithFormdataBody(server string, body PostIntegrationCreateSlackFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateSlackRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateSlackRequestWithBody generates requests for PostIntegrationCreateSlack with any type of body
func NewPostIntegrationCreateSlackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-slack/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateStatusRequest calls the generic PostIntegrationCreateStatus builder with application/json body
func NewPostIntegrationCreateStatusRequest(server string, body PostIntegrationCreateStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateStatusRequestWithFormdataBody calls the generic PostIntegrationCreateStatus builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateStatusRequestWithFormdataBody(server string, body PostIntegrationCreateStatusFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateStatusRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateStatusRequestWithBody generates requests for PostIntegrationCreateStatus with any type of body
func NewPostIntegrationCreateStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-status/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateStatuspageRequest calls the generic PostIntegrationCreateStatuspage builder with application/json body
func NewPostIntegrationCreateStatuspageRequest(server string, body PostIntegrationCreateStatuspageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateStatuspageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateStatuspageRequestWithFormdataBody calls the generic PostIntegrationCreateStatuspage builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateStatuspageRequestWithFormdataBody(server string, body PostIntegrationCreateStatuspageFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateStatuspageRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateStatuspageRequestWithBody generates requests for PostIntegrationCreateStatuspage with any type of body
func NewPostIntegrationCreateStatuspageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-statuspage/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateTwitterRequest calls the generic PostIntegrationCreateTwitter builder with application/json body
func NewPostIntegrationCreateTwitterRequest(server string, body PostIntegrationCreateTwitterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateTwitterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateTwitterRequestWithFormdataBody calls the generic PostIntegrationCreateTwitter builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateTwitterRequestWithFormdataBody(server string, body PostIntegrationCreateTwitterFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateTwitterRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateTwitterRequestWithBody generates requests for PostIntegrationCreateTwitter with any type of body
func NewPostIntegrationCreateTwitterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-twitter/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateVictoropsRequest calls the generic PostIntegrationCreateVictorops builder with application/json body
func NewPostIntegrationCreateVictoropsRequest(server string, body PostIntegrationCreateVictoropsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateVictoropsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateVictoropsRequestWithFormdataBody calls the generic PostIntegrationCreateVictorops builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateVictoropsRequestWithFormdataBody(server string, body PostIntegrationCreateVictoropsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateVictoropsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateVictoropsRequestWithBody generates requests for PostIntegrationCreateVictorops with any type of body
func NewPostIntegrationCreateVictoropsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-victorops/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateWavefrontRequest calls the generic PostIntegrationCreateWavefront builder with application/json body
func NewPostIntegrationCreateWavefrontRequest(server string, body PostIntegrationCreateWavefrontJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateWavefrontRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateWavefrontRequestWithFormdataBody calls the generic PostIntegrationCreateWavefront builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateWavefrontRequestWithFormdataBody(server string, body PostIntegrationCreateWavefrontFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateWavefrontRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateWavefrontRequestWithBody generates requests for PostIntegrationCreateWavefront with any type of body
func NewPostIntegrationCreateWavefrontRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-wavefront/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateWebhookRequest calls the generic PostIntegrationCreateWebhook builder with application/json body
func NewPostIntegrationCreateWebhookRequest(server string, body PostIntegrationCreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateWebhookRequestWithFormdataBody calls the generic PostIntegrationCreateWebhook builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateWebhookRequestWithFormdataBody(server string, body PostIntegrationCreateWebhookFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateWebhookRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateWebhookRequestWithBody generates requests for PostIntegrationCreateWebhook with any type of body
func NewPostIntegrationCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-webhook/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostIntegrationCreateZapierRequest calls the generic PostIntegrationCreateZapier builder with application/json body
func NewPostIntegrationCreateZapierRequest(server string, body PostIntegrationCreateZapierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIntegrationCreateZapierRequestWithBody(server, "application/json", bodyReader)
}

// NewPostIntegrationCreateZapierRequestWithFormdataBody calls the generic PostIntegrationCreateZapier builder with application/x-www-form-urlencoded body
func NewPostIntegrationCreateZapierRequestWithFormdataBody(server string, body PostIntegrationCreateZapierFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIntegrationCreateZapierRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIntegrationCreateZapierRequestWithBody generates requests for PostIntegrationCreateZapier with any type of body
func NewPostIntegrationCreateZapierRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/add-zapier/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIntegrationDetailRequest generates requests for DeleteIntegrationDetail
func NewDeleteIntegrationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIntegrationDetailRequest generates requests for GetIntegrationDetail
func NewGetIntegrationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchIntegrationDetailRequest calls the generic PatchIntegrationDetail builder with application/json body
func NewPatchIntegrationDetailRequest(server string, pk string, body PatchIntegrationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchIntegrationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchIntegrationDetailRequestWithFormdataBody calls the generic PatchIntegrationDetail builder with application/x-www-form-urlencoded body
func NewPatchIntegrationDetailRequestWithFormdataBody(server string, pk string, body PatchIntegrationDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchIntegrationDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchIntegrationDetailRequestWithBody generates requests for PatchIntegrationDetail with any type of body
func NewPatchIntegrationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutIntegrationDetailRequest calls the generic PutIntegrationDetail builder with application/json body
func NewPutIntegrationDetailRequest(server string, pk string, body PutIntegrationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIntegrationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutIntegrationDetailRequestWithFormdataBody calls the generic PutIntegrationDetail builder with application/x-www-form-urlencoded body
func NewPutIntegrationDetailRequestWithFormdataBody(server string, pk string, body PutIntegrationDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutIntegrationDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutIntegrationDetailRequestWithBody generates requests for PutIntegrationDetail with any type of body
func NewPutIntegrationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/integrations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOutagelistRequest generates requests for GetOutagelist
func NewGetOutagelistRequest(server string, params *GetOutagelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/outages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckPk != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_pk", runtime.ParamLocationQuery, *params.CheckPk); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckMonitoringServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_monitoring_service_type", runtime.ParamLocationQuery, *params.CheckMonitoringServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CheckTag != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "check_tag", runtime.ParamLocationQuery, *params.CheckTag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ongoing != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ongoing", runtime.ParamLocationQuery, *params.Ongoing); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOutageDetailRequest generates requests for GetOutageDetail
func NewGetOutageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/outages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonitoringServerListRequest generates requests for GetMonitoringServerList
func NewGetMonitoringServerListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/probe-servers/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPushnotificationlistRequest generates requests for GetPushnotificationlist
func NewGetPushnotificationlistRequest(server string, params *GetPushnotificationlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPushnotificationlistRequest calls the generic PostPushnotificationlist builder with application/json body
func NewPostPushnotificationlistRequest(server string, body PostPushnotificationlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPushnotificationlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPushnotificationlistRequestWithFormdataBody calls the generic PostPushnotificationlist builder with application/x-www-form-urlencoded body
func NewPostPushnotificationlistRequestWithFormdataBody(server string, body PostPushnotificationlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPushnotificationlistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPushnotificationlistRequestWithBody generates requests for PostPushnotificationlist with any type of body
func NewPostPushnotificationlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePushNotificationDetailRequest generates requests for DeletePushNotificationDetail
func NewDeletePushNotificationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPushNotificationDetailRequest generates requests for GetPushNotificationDetail
func NewGetPushNotificationDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPushNotificationDetailRequest calls the generic PatchPushNotificationDetail builder with application/json body
func NewPatchPushNotificationDetailRequest(server string, pk string, body PatchPushNotificationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPushNotificationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchPushNotificationDetailRequestWithFormdataBody calls the generic PatchPushNotificationDetail builder with application/x-www-form-urlencoded body
func NewPatchPushNotificationDetailRequestWithFormdataBody(server string, pk string, body PatchPushNotificationDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchPushNotificationDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchPushNotificationDetailRequestWithBody generates requests for PatchPushNotificationDetail with any type of body
func NewPatchPushNotificationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPushNotificationDetailRequest calls the generic PutPushNotificationDetail builder with application/json body
func NewPutPushNotificationDetailRequest(server string, pk string, body PutPushNotificationDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPushNotificationDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutPushNotificationDetailRequestWithFormdataBody calls the generic PutPushNotificationDetail builder with application/x-www-form-urlencoded body
func NewPutPushNotificationDetailRequestWithFormdataBody(server string, pk string, body PutPushNotificationDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutPushNotificationDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutPushNotificationDetailRequestWithBody generates requests for PutPushNotificationDetail with any type of body
func NewPutPushNotificationDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/push-notifications/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetScheduledreportlistRequest generates requests for GetScheduledreportlist
func NewGetScheduledreportlistRequest(server string, params *GetScheduledreportlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostScheduledreportlistRequest calls the generic PostScheduledreportlist builder with application/json body
func NewPostScheduledreportlistRequest(server string, body PostScheduledreportlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostScheduledreportlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostScheduledreportlistRequestWithFormdataBody calls the generic PostScheduledreportlist builder with application/x-www-form-urlencoded body
func NewPostScheduledreportlistRequestWithFormdataBody(server string, body PostScheduledreportlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostScheduledreportlistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostScheduledreportlistRequestWithBody generates requests for PostScheduledreportlist with any type of body
func NewPostScheduledreportlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScheduledReportDetailRequest generates requests for DeleteScheduledReportDetail
func NewDeleteScheduledReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScheduledReportDetailRequest generates requests for GetScheduledReportDetail
func NewGetScheduledReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScheduledReportDetailRequest calls the generic PatchScheduledReportDetail builder with application/json body
func NewPatchScheduledReportDetailRequest(server string, pk string, body PatchScheduledReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScheduledReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchScheduledReportDetailRequestWithFormdataBody calls the generic PatchScheduledReportDetail builder with application/x-www-form-urlencoded body
func NewPatchScheduledReportDetailRequestWithFormdataBody(server string, pk string, body PatchScheduledReportDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchScheduledReportDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchScheduledReportDetailRequestWithBody generates requests for PatchScheduledReportDetail with any type of body
func NewPatchScheduledReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutScheduledReportDetailRequest calls the generic PutScheduledReportDetail builder with application/json body
func NewPutScheduledReportDetailRequest(server string, pk string, body PutScheduledReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutScheduledReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutScheduledReportDetailRequestWithFormdataBody calls the generic PutScheduledReportDetail builder with application/x-www-form-urlencoded body
func NewPutScheduledReportDetailRequestWithFormdataBody(server string, pk string, body PutScheduledReportDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutScheduledReportDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutScheduledReportDetailRequestWithBody generates requests for PutScheduledReportDetail with any type of body
func NewPutScheduledReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/scheduled-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSlareportlistRequest generates requests for GetSlareportlist
func NewGetSlareportlistRequest(server string, params *GetSlareportlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSlareportlistRequest calls the generic PostSlareportlist builder with application/json body
func NewPostSlareportlistRequest(server string, body PostSlareportlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSlareportlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSlareportlistRequestWithFormdataBody calls the generic PostSlareportlist builder with application/x-www-form-urlencoded body
func NewPostSlareportlistRequestWithFormdataBody(server string, body PostSlareportlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSlareportlistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSlareportlistRequestWithBody generates requests for PostSlareportlist with any type of body
func NewPostSlareportlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSlaReportDetailRequest generates requests for DeleteSlaReportDetail
func NewDeleteSlaReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSlaReportDetailRequest generates requests for GetSlaReportDetail
func NewGetSlaReportDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSlaReportDetailRequest calls the generic PatchSlaReportDetail builder with application/json body
func NewPatchSlaReportDetailRequest(server string, pk string, body PatchSlaReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSlaReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchSlaReportDetailRequestWithFormdataBody calls the generic PatchSlaReportDetail builder with application/x-www-form-urlencoded body
func NewPatchSlaReportDetailRequestWithFormdataBody(server string, pk string, body PatchSlaReportDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchSlaReportDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchSlaReportDetailRequestWithBody generates requests for PatchSlaReportDetail with any type of body
func NewPatchSlaReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSlaReportDetailRequest calls the generic PutSlaReportDetail builder with application/json body
func NewPutSlaReportDetailRequest(server string, pk string, body PutSlaReportDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSlaReportDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutSlaReportDetailRequestWithFormdataBody calls the generic PutSlaReportDetail builder with application/x-www-form-urlencoded body
func NewPutSlaReportDetailRequestWithFormdataBody(server string, pk string, body PutSlaReportDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutSlaReportDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutSlaReportDetailRequestWithBody generates requests for PutSlaReportDetail with any type of body
func NewPutSlaReportDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSlaReportStatsRequest generates requests for GetSlaReportStats
func NewGetSlaReportStatsRequest(server string, pk string, params *GetSlaReportStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/sla-reports/%s/stats/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Output != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "output", runtime.ParamLocationQuery, *params.Output); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspagelistRequest generates requests for GetStatuspagelist
func NewGetStatuspagelistRequest(server string, params *GetStatuspagelistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VisibilityLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility_level", runtime.ParamLocationQuery, *params.VisibilityLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStatuspagelistRequest calls the generic PostStatuspagelist builder with application/json body
func NewPostStatuspagelistRequest(server string, body PostStatuspagelistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStatuspagelistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStatuspagelistRequestWithFormdataBody calls the generic PostStatuspagelist builder with application/x-www-form-urlencoded body
func NewPostStatuspagelistRequestWithFormdataBody(server string, body PostStatuspagelistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostStatuspagelistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostStatuspagelistRequestWithBody generates requests for PostStatuspagelist with any type of body
func NewPostStatuspagelistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteStatuspageDetailRequest generates requests for DeleteStatuspageDetail
func NewDeleteStatuspageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspageDetailRequest generates requests for GetStatuspageDetail
func NewGetStatuspageDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchStatuspageDetailRequest calls the generic PatchStatuspageDetail builder with application/json body
func NewPatchStatuspageDetailRequest(server string, pk string, body PatchStatuspageDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchStatuspageDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchStatuspageDetailRequestWithFormdataBody calls the generic PatchStatuspageDetail builder with application/x-www-form-urlencoded body
func NewPatchStatuspageDetailRequestWithFormdataBody(server string, pk string, body PatchStatuspageDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchStatuspageDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchStatuspageDetailRequestWithBody generates requests for PatchStatuspageDetail with any type of body
func NewPatchStatuspageDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutStatuspageDetailRequest calls the generic PutStatuspageDetail builder with application/json body
func NewPutStatuspageDetailRequest(server string, pk string, body PutStatuspageDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStatuspageDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutStatuspageDetailRequestWithFormdataBody calls the generic PutStatuspageDetail builder with application/x-www-form-urlencoded body
func NewPutStatuspageDetailRequestWithFormdataBody(server string, pk string, body PutStatuspageDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutStatuspageDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutStatuspageDetailRequestWithBody generates requests for PutStatuspageDetail with any type of body
func NewPutStatuspageDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatuspageCurrentStatusRequest generates requests for GetStatuspageCurrentStatus
func NewGetStatuspageCurrentStatusRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/current-status/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatuspageHistoryRequest generates requests for GetStatuspageHistory
func NewGetStatuspageHistoryRequest(server string, pk string, params *GetStatuspageHistoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/history/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentslistRequest generates requests for GetComponentslist
func NewGetComponentslistRequest(server string, statuspageId string, params *GetComponentslistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GroupId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_id", runtime.ParamLocationQuery, *params.GroupId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsGroup != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_group", runtime.ParamLocationQuery, *params.IsGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComponentslistRequest calls the generic PostComponentslist builder with application/json body
func NewPostComponentslistRequest(server string, statuspageId string, body PostComponentslistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComponentslistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostComponentslistRequestWithFormdataBody calls the generic PostComponentslist builder with application/x-www-form-urlencoded body
func NewPostComponentslistRequestWithFormdataBody(server string, statuspageId string, body PostComponentslistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostComponentslistRequestWithBody(server, statuspageId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostComponentslistRequestWithBody generates requests for PostComponentslist with any type of body
func NewPostComponentslistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteComponentDetailRequest generates requests for DeleteComponentDetail
func NewDeleteComponentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComponentDetailRequest generates requests for GetComponentDetail
func NewGetComponentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchComponentDetailRequest calls the generic PatchComponentDetail builder with application/json body
func NewPatchComponentDetailRequest(server string, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchComponentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchComponentDetailRequestWithFormdataBody calls the generic PatchComponentDetail builder with application/x-www-form-urlencoded body
func NewPatchComponentDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PatchComponentDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchComponentDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchComponentDetailRequestWithBody generates requests for PatchComponentDetail with any type of body
func NewPatchComponentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutComponentDetailRequest calls the generic PutComponentDetail builder with application/json body
func NewPutComponentDetailRequest(server string, statuspageId string, pk string, body PutComponentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComponentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutComponentDetailRequestWithFormdataBody calls the generic PutComponentDetail builder with application/x-www-form-urlencoded body
func NewPutComponentDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PutComponentDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutComponentDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutComponentDetailRequestWithBody generates requests for PutComponentDetail with any type of body
func NewPutComponentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/components/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIncidentlistRequest generates requests for GetIncidentlist
func NewGetIncidentlistRequest(server string, statuspageId string, params *GetIncidentlistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncidentType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "incident_type", runtime.ParamLocationQuery, *params.IncidentType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_date", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_date", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIncidentlistRequest calls the generic PostIncidentlist builder with application/json body
func NewPostIncidentlistRequest(server string, statuspageId string, body PostIncidentlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIncidentlistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostIncidentlistRequestWithFormdataBody calls the generic PostIncidentlist builder with application/x-www-form-urlencoded body
func NewPostIncidentlistRequestWithFormdataBody(server string, statuspageId string, body PostIncidentlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostIncidentlistRequestWithBody(server, statuspageId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostIncidentlistRequestWithBody generates requests for PostIncidentlist with any type of body
func NewPostIncidentlistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIncidentDetailRequest generates requests for DeleteIncidentDetail
func NewDeleteIncidentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentDetailRequest generates requests for GetIncidentDetail
func NewGetIncidentDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchIncidentDetailRequest calls the generic PatchIncidentDetail builder with application/json body
func NewPatchIncidentDetailRequest(server string, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchIncidentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchIncidentDetailRequestWithFormdataBody calls the generic PatchIncidentDetail builder with application/x-www-form-urlencoded body
func NewPatchIncidentDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PatchIncidentDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchIncidentDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchIncidentDetailRequestWithBody generates requests for PatchIncidentDetail with any type of body
func NewPatchIncidentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutIncidentDetailRequest calls the generic PutIncidentDetail builder with application/json body
func NewPutIncidentDetailRequest(server string, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIncidentDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutIncidentDetailRequestWithFormdataBody calls the generic PutIncidentDetail builder with application/x-www-form-urlencoded body
func NewPutIncidentDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PutIncidentDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutIncidentDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutIncidentDetailRequestWithBody generates requests for PutIncidentDetail with any type of body
func NewPutIncidentDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/incidents/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMetricslistRequest generates requests for GetMetricslist
func NewGetMetricslistRequest(server string, statuspageId string, params *GetMetricslistParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsVisible != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_visible", runtime.ParamLocationQuery, *params.IsVisible); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMetricslistRequest calls the generic PostMetricslist builder with application/json body
func NewPostMetricslistRequest(server string, statuspageId string, body PostMetricslistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMetricslistRequestWithBody(server, statuspageId, "application/json", bodyReader)
}

// NewPostMetricslistRequestWithFormdataBody calls the generic PostMetricslist builder with application/x-www-form-urlencoded body
func NewPostMetricslistRequestWithFormdataBody(server string, statuspageId string, body PostMetricslistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostMetricslistRequestWithBody(server, statuspageId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostMetricslistRequestWithBody generates requests for PostMetricslist with any type of body
func NewPostMetricslistRequestWithBody(server string, statuspageId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMetricDetailRequest generates requests for DeleteMetricDetail
func NewDeleteMetricDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMetricDetailRequest generates requests for GetMetricDetail
func NewGetMetricDetailRequest(server string, statuspageId string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchMetricDetailRequest calls the generic PatchMetricDetail builder with application/json body
func NewPatchMetricDetailRequest(server string, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchMetricDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPatchMetricDetailRequestWithFormdataBody calls the generic PatchMetricDetail builder with application/x-www-form-urlencoded body
func NewPatchMetricDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PatchMetricDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchMetricDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchMetricDetailRequestWithBody generates requests for PatchMetricDetail with any type of body
func NewPatchMetricDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutMetricDetailRequest calls the generic PutMetricDetail builder with application/json body
func NewPutMetricDetailRequest(server string, statuspageId string, pk string, body PutMetricDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMetricDetailRequestWithBody(server, statuspageId, pk, "application/json", bodyReader)
}

// NewPutMetricDetailRequestWithFormdataBody calls the generic PutMetricDetail builder with application/x-www-form-urlencoded body
func NewPutMetricDetailRequestWithFormdataBody(server string, statuspageId string, pk string, body PutMetricDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutMetricDetailRequestWithBody(server, statuspageId, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutMetricDetailRequestWithBody generates requests for PutMetricDetail with any type of body
func NewPutMetricDetailRequestWithBody(server string, statuspageId string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statuspage_id", runtime.ParamLocationPath, statuspageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/statuspages/%s/metrics/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserlistRequest generates requests for GetUserlist
func NewGetUserlistRequest(server string, params *GetUserlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Search != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ordering != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.AccessLevel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "access_level", runtime.ParamLocationQuery, *params.AccessLevel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Subaccount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subaccount", runtime.ParamLocationQuery, *params.Subaccount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsActive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsApiEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_api_enabled", runtime.ParamLocationQuery, *params.IsApiEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NotifyPaidInvoices != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notify_paid_invoices", runtime.ParamLocationQuery, *params.NotifyPaidInvoices); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserlistRequest calls the generic PostUserlist builder with application/json body
func NewPostUserlistRequest(server string, body PostUserlistJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserlistRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserlistRequestWithFormdataBody calls the generic PostUserlist builder with application/x-www-form-urlencoded body
func NewPostUserlistRequestWithFormdataBody(server string, body PostUserlistFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostUserlistRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostUserlistRequestWithBody generates requests for PostUserlist with any type of body
func NewPostUserlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserDetailRequest generates requests for DeleteUserDetail
func NewDeleteUserDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDetailRequest generates requests for GetUserDetail
func NewGetUserDetailRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUserDetailRequest calls the generic PatchUserDetail builder with application/json body
func NewPatchUserDetailRequest(server string, pk string, body PatchUserDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUserDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPatchUserDetailRequestWithFormdataBody calls the generic PatchUserDetail builder with application/x-www-form-urlencoded body
func NewPatchUserDetailRequestWithFormdataBody(server string, pk string, body PatchUserDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPatchUserDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPatchUserDetailRequestWithBody generates requests for PatchUserDetail with any type of body
func NewPatchUserDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutUserDetailRequest calls the generic PutUserDetail builder with application/json body
func NewPutUserDetailRequest(server string, pk string, body PutUserDetailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUserDetailRequestWithBody(server, pk, "application/json", bodyReader)
}

// NewPutUserDetailRequestWithFormdataBody calls the generic PutUserDetail builder with application/x-www-form-urlencoded body
func NewPutUserDetailRequestWithFormdataBody(server string, pk string, body PutUserDetailFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPutUserDetailRequestWithBody(server, pk, "application/x-www-form-urlencoded", bodyReader)
}

// NewPutUserDetailRequestWithBody generates requests for PutUserDetail with any type of body
func NewPutUserDetailRequestWithBody(server string, pk string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserDeactivateRequest generates requests for PostUserDeactivate
func NewPostUserDeactivateRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/deactivate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserReactivateRequest generates requests for PostUserReactivate
func NewPostUserReactivateRequest(server string, pk string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pk", runtime.ParamLocationPath, pk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s/reactivate/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAlertlist request
	GetAlertlistWithResponse(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*GetAlertlistResponse, error)

	// GetAlertAlertRootCause request
	GetAlertAlertRootCauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertAlertRootCauseResponse, error)

	// GetAlertDetail request
	GetAlertDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertDetailResponse, error)

	// PostAlertIgnore request
	PostAlertIgnoreWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostAlertIgnoreResponse, error)

	// GetAuthList request
	GetAuthListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthListResponse, error)

	// GetAuthAccountUsage request
	GetAuthAccountUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthAccountUsageResponse, error)

	// PostAuthLogin request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithFormdataBodyWithResponse(ctx context.Context, body PostAuthLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// GetRequestMagicLink request
	GetRequestMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequestMagicLinkResponse, error)

	// GetAuthMe request
	GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error)

	// GetAuthResetPassword request
	GetAuthResetPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResetPasswordResponse, error)

	// PostAuthResetPassword request with any body
	PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error)

	PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error)

	PostAuthResetPasswordWithFormdataBodyWithResponse(ctx context.Context, body PostAuthResetPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error)

	// PostSendMagicLink request with any body
	PostSendMagicLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error)

	PostSendMagicLinkWithResponse(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error)

	PostSendMagicLinkWithFormdataBodyWithResponse(ctx context.Context, body PostSendMagicLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error)

	// GetAuthSubaccounts request
	GetAuthSubaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthSubaccountsResponse, error)

	// PostAuthSubaccounts request with any body
	PostAuthSubaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error)

	PostAuthSubaccountsWithResponse(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error)

	PostAuthSubaccountsWithFormdataBodyWithResponse(ctx context.Context, body PostAuthSubaccountsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error)

	// GetAuthSubaccount request
	GetAuthSubaccountWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAuthSubaccountResponse, error)

	// PatchAuthSubaccount request with any body
	PatchAuthSubaccountWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error)

	PatchAuthSubaccountWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error)

	PatchAuthSubaccountWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error)

	// PostAuthSubaccountPacks request with any body
	PostAuthSubaccountPacksWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error)

	PostAuthSubaccountPacksWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error)

	PostAuthSubaccountPacksWithFormdataBodyWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error)

	// PostValidateMagicLink request
	PostValidateMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostValidateMagicLinkResponse, error)

	// GetServicetaglist request
	GetServicetaglistWithResponse(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*GetServicetaglistResponse, error)

	// PostServicetaglist request with any body
	PostServicetaglistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error)

	PostServicetaglistWithResponse(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error)

	PostServicetaglistWithFormdataBodyWithResponse(ctx context.Context, body PostServicetaglistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error)

	// DeleteServiceTagDetail request
	DeleteServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceTagDetailResponse, error)

	// GetServiceTagDetail request
	GetServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceTagDetailResponse, error)

	// PatchServiceTagDetail request with any body
	PatchServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error)

	PatchServiceTagDetailWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error)

	PatchServiceTagDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error)

	// PutServiceTagDetail request with any body
	PutServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error)

	PutServiceTagDetailWithResponse(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error)

	PutServiceTagDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error)

	// GetServicelist request
	GetServicelistWithResponse(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*GetServicelistResponse, error)

	// PostServiceCreateApi request with any body
	PostServiceCreateApiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error)

	PostServiceCreateApiWithResponse(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error)

	PostServiceCreateApiWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateApiFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error)

	// PostServiceCreateBlacklist request with any body
	PostServiceCreateBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error)

	PostServiceCreateBlacklistWithResponse(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error)

	PostServiceCreateBlacklistWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error)

	// PostServiceCreateDns request with any body
	PostServiceCreateDnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error)

	PostServiceCreateDnsWithResponse(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error)

	PostServiceCreateDnsWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateDnsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error)

	// PostServiceCreateGroup request with any body
	PostServiceCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error)

	PostServiceCreateGroupWithResponse(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error)

	PostServiceCreateGroupWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error)

	// PostServiceCreateHeartbeat request with any body
	PostServiceCreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error)

	PostServiceCreateHeartbeatWithResponse(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error)

	PostServiceCreateHeartbeatWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateHeartbeatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error)

	// PostServiceCreateHttp request with any body
	PostServiceCreateHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error)

	PostServiceCreateHttpWithResponse(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error)

	PostServiceCreateHttpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateHttpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error)

	// PostServiceCreateIcmp request with any body
	PostServiceCreateIcmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error)

	PostServiceCreateIcmpWithResponse(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error)

	PostServiceCreateIcmpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateIcmpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error)

	// PostServiceCreateImap request with any body
	PostServiceCreateImapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error)

	PostServiceCreateImapWithResponse(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error)

	PostServiceCreateImapWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateImapFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error)

	// PostServiceCreateMalware request with any body
	PostServiceCreateMalwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error)

	PostServiceCreateMalwareWithResponse(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error)

	PostServiceCreateMalwareWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateMalwareFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error)

	// PostServiceCreateNtp request with any body
	PostServiceCreateNtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error)

	PostServiceCreateNtpWithResponse(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error)

	PostServiceCreateNtpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateNtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error)

	// PostServiceCreatePop request with any body
	PostServiceCreatePopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error)

	PostServiceCreatePopWithResponse(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error)

	PostServiceCreatePopWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreatePopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error)

	// PostServiceCreateRum request with any body
	PostServiceCreateRumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error)

	PostServiceCreateRumWithResponse(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error)

	PostServiceCreateRumWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateRumFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error)

	// PostServiceCreateRum2 request with any body
	PostServiceCreateRum2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error)

	PostServiceCreateRum2WithResponse(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error)

	PostServiceCreateRum2WithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateRum2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error)

	// PostServiceCreateSmtp request with any body
	PostServiceCreateSmtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error)

	PostServiceCreateSmtpWithResponse(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error)

	PostServiceCreateSmtpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSmtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error)

	// PostServiceCreateSsh request with any body
	PostServiceCreateSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error)

	PostServiceCreateSshWithResponse(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error)

	PostServiceCreateSshWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSshFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error)

	// PostServiceCreateSslCert request with any body
	PostServiceCreateSslCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error)

	PostServiceCreateSslCertWithResponse(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error)

	PostServiceCreateSslCertWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSslCertFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error)

	// PostServiceCreateTcp request with any body
	PostServiceCreateTcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error)

	PostServiceCreateTcpWithResponse(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error)

	PostServiceCreateTcpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateTcpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error)

	// PostServiceCreateTransaction request with any body
	PostServiceCreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error)

	PostServiceCreateTransactionWithResponse(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error)

	PostServiceCreateTransactionWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateTransactionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error)

	// PostServiceCreateUdp request with any body
	PostServiceCreateUdpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error)

	PostServiceCreateUdpWithResponse(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error)

	PostServiceCreateUdpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateUdpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error)

	// PostServiceCreateWebhook request with any body
	PostServiceCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error)

	PostServiceCreateWebhookWithResponse(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error)

	PostServiceCreateWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error)

	// PostServiceCreateWhois request with any body
	PostServiceCreateWhoisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error)

	PostServiceCreateWhoisWithResponse(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error)

	PostServiceCreateWhoisWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateWhoisFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error)

	// PatchServiceBulkEscalations request with any body
	PatchServiceBulkEscalationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error)

	PatchServiceBulkEscalationsWithResponse(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error)

	PatchServiceBulkEscalationsWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error)

	// PatchServiceBulkMaintenance request with any body
	PatchServiceBulkMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error)

	PatchServiceBulkMaintenanceWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error)

	PatchServiceBulkMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error)

	// PatchServiceBulkPause request with any body
	PatchServiceBulkPauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error)

	PatchServiceBulkPauseWithResponse(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error)

	PatchServiceBulkPauseWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkPauseFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error)

	// PatchServiceBulkResume request with any body
	PatchServiceBulkResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error)

	PatchServiceBulkResumeWithResponse(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error)

	PatchServiceBulkResumeWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error)

	// GetServiceBulkStats request
	GetServiceBulkStatsWithResponse(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*GetServiceBulkStatsResponse, error)

	// PatchServiceBulkUpdate request with any body
	PatchServiceBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error)

	PatchServiceBulkUpdateWithResponse(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error)

	PatchServiceBulkUpdateWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error)

	// GetServiceShowServiceDefs request
	GetServiceShowServiceDefsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowServiceDefsResponse, error)

	// GetServiceShowLocations request
	GetServiceShowLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowLocationsResponse, error)

	// DeleteServiceDetail request
	DeleteServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceDetailResponse, error)

	// GetServiceDetail request
	GetServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceDetailResponse, error)

	// PatchServiceDetail request with any body
	PatchServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error)

	PatchServiceDetailWithResponse(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error)

	PatchServiceDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error)

	// PutServiceDetail request with any body
	PutServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error)

	PutServiceDetailWithResponse(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error)

	PutServiceDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error)

	// PatchServiceAddContactGroups request with any body
	PatchServiceAddContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error)

	PatchServiceAddContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error)

	PatchServiceAddContactGroupsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error)

	// PatchServiceAddLocations request with any body
	PatchServiceAddLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error)

	PatchServiceAddLocationsWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error)

	PatchServiceAddLocationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error)

	// PatchServiceAddTags request with any body
	PatchServiceAddTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error)

	PatchServiceAddTagsWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error)

	PatchServiceAddTagsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error)

	// GetServiceAnalysis request
	GetServiceAnalysisWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceAnalysisResponse, error)

	// GetServiceCurrentStatus request
	GetServiceCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceCurrentStatusResponse, error)

	// PatchServiceSetEscalations request with any body
	PatchServiceSetEscalationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error)

	PatchServiceSetEscalationsWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error)

	PatchServiceSetEscalationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error)

	// PatchServiceSetMaintenance request with any body
	PatchServiceSetMaintenanceWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error)

	PatchServiceSetMaintenanceWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error)

	PatchServiceSetMaintenanceWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error)

	// PostServicePause request
	PostServicePauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServicePauseResponse, error)

	// PatchServiceReplaceContactGroups request with any body
	PatchServiceReplaceContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error)

	PatchServiceReplaceContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error)

	PatchServiceReplaceContactGroupsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error)

	// PatchServiceReplaceLocations request with any body
	PatchServiceReplaceLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error)

	PatchServiceReplaceLocationsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error)

	PatchServiceReplaceLocationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error)

	// PatchServiceReplaceTags request with any body
	PatchServiceReplaceTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error)

	PatchServiceReplaceTagsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error)

	PatchServiceReplaceTagsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error)

	// GetServiceResponseTimeDatapoints request
	GetServiceResponseTimeDatapointsWithResponse(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*GetServiceResponseTimeDatapointsResponse, error)

	// PostServiceResume request
	PostServiceResumeWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServiceResumeResponse, error)

	// GetServiceStats request
	GetServiceStatsWithResponse(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*GetServiceStatsResponse, error)

	// GetContactgrouplist request
	GetContactgrouplistWithResponse(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*GetContactgrouplistResponse, error)

	// PostContactgrouplist request with any body
	PostContactgrouplistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error)

	PostContactgrouplistWithResponse(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error)

	PostContactgrouplistWithFormdataBodyWithResponse(ctx context.Context, body PostContactgrouplistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error)

	// DeleteContactGroupDetail request
	DeleteContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteContactGroupDetailResponse, error)

	// GetContactGroupDetail request
	GetContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetContactGroupDetailResponse, error)

	// PatchContactGroupDetail request with any body
	PatchContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error)

	PatchContactGroupDetailWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error)

	PatchContactGroupDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error)

	// PutContactGroupDetail request with any body
	PutContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error)

	PutContactGroupDetailWithResponse(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error)

	PutContactGroupDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error)

	// PatchContactGroupSetOnCallHours request with any body
	PatchContactGroupSetOnCallHoursWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error)

	PatchContactGroupSetOnCallHoursWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error)

	PatchContactGroupSetOnCallHoursWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error)

	// GetDashboardlist request
	GetDashboardlistWithResponse(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*GetDashboardlistResponse, error)

	// PostDashboardlist request with any body
	PostDashboardlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error)

	PostDashboardlistWithResponse(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error)

	PostDashboardlistWithFormdataBodyWithResponse(ctx context.Context, body PostDashboardlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error)

	// GetDashboardDefault request
	GetDashboardDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardDefaultResponse, error)

	// DeleteDashboardDetail request
	DeleteDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteDashboardDetailResponse, error)

	// GetDashboardDetail request
	GetDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardDetailResponse, error)

	// PatchDashboardDetail request with any body
	PatchDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error)

	PatchDashboardDetailWithResponse(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error)

	PatchDashboardDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error)

	// PutDashboardDetail request with any body
	PutDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error)

	PutDashboardDetailWithResponse(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error)

	PutDashboardDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error)

	// GetDashboardStats request
	GetDashboardStatsWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardStatsResponse, error)

	// GetIntegrationlist request
	GetIntegrationlistWithResponse(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*GetIntegrationlistResponse, error)

	// PostIntegrationCreateCachet request with any body
	PostIntegrationCreateCachetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error)

	PostIntegrationCreateCachetWithResponse(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error)

	PostIntegrationCreateCachetWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateCachetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error)

	// PostIntegrationCreateDatadog request with any body
	PostIntegrationCreateDatadogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error)

	PostIntegrationCreateDatadogWithResponse(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error)

	PostIntegrationCreateDatadogWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateDatadogFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error)

	// PostIntegrationCreateGeckoboard request with any body
	PostIntegrationCreateGeckoboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error)

	PostIntegrationCreateGeckoboardWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error)

	PostIntegrationCreateGeckoboardWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error)

	// PostIntegrationCreateJiraservicedesk request with any body
	PostIntegrationCreateJiraservicedeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error)

	PostIntegrationCreateJiraservicedeskWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error)

	PostIntegrationCreateJiraservicedeskWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error)

	// PostIntegrationCreateKlipfolio request with any body
	PostIntegrationCreateKlipfolioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error)

	PostIntegrationCreateKlipfolioWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error)

	PostIntegrationCreateKlipfolioWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error)

	// PostIntegrationCreateLibrato request with any body
	PostIntegrationCreateLibratoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error)

	PostIntegrationCreateLibratoWithResponse(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error)

	PostIntegrationCreateLibratoWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateLibratoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error)

	// PostIntegrationCreateMicrosoftTeams request with any body
	PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error)

	PostIntegrationCreateMicrosoftTeamsWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error)

	PostIntegrationCreateMicrosoftTeamsWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error)

	// PostIntegrationCreateOpsgenie request with any body
	PostIntegrationCreateOpsgenieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error)

	PostIntegrationCreateOpsgenieWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error)

	PostIntegrationCreateOpsgenieWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error)

	// PostIntegrationCreatePagerduty request with any body
	PostIntegrationCreatePagerdutyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error)

	PostIntegrationCreatePagerdutyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error)

	PostIntegrationCreatePagerdutyWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error)

	// PostIntegrationCreatePushbullet request with any body
	PostIntegrationCreatePushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error)

	PostIntegrationCreatePushbulletWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error)

	PostIntegrationCreatePushbulletWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error)

	// PostIntegrationCreatePushover request with any body
	PostIntegrationCreatePushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error)

	PostIntegrationCreatePushoverWithResponse(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error)

	PostIntegrationCreatePushoverWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePushoverFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error)

	// PostIntegrationCreateSlack request with any body
	PostIntegrationCreateSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error)

	PostIntegrationCreateSlackWithResponse(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error)

	PostIntegrationCreateSlackWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateSlackFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error)

	// PostIntegrationCreateStatus request with any body
	PostIntegrationCreateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error)

	PostIntegrationCreateStatusWithResponse(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error)

	PostIntegrationCreateStatusWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error)

	// PostIntegrationCreateStatuspage request with any body
	PostIntegrationCreateStatuspageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error)

	PostIntegrationCreateStatuspageWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error)

	PostIntegrationCreateStatuspageWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error)

	// PostIntegrationCreateTwitter request with any body
	PostIntegrationCreateTwitterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error)

	PostIntegrationCreateTwitterWithResponse(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error)

	PostIntegrationCreateTwitterWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateTwitterFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error)

	// PostIntegrationCreateVictorops request with any body
	PostIntegrationCreateVictoropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error)

	PostIntegrationCreateVictoropsWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error)

	PostIntegrationCreateVictoropsWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error)

	// PostIntegrationCreateWavefront request with any body
	PostIntegrationCreateWavefrontWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error)

	PostIntegrationCreateWavefrontWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error)

	PostIntegrationCreateWavefrontWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error)

	// PostIntegrationCreateWebhook request with any body
	PostIntegrationCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error)

	PostIntegrationCreateWebhookWithResponse(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error)

	PostIntegrationCreateWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error)

	// PostIntegrationCreateZapier request with any body
	PostIntegrationCreateZapierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error)

	PostIntegrationCreateZapierWithResponse(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error)

	PostIntegrationCreateZapierWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateZapierFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error)

	// DeleteIntegrationDetail request
	DeleteIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteIntegrationDetailResponse, error)

	// GetIntegrationDetail request
	GetIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetIntegrationDetailResponse, error)

	// PatchIntegrationDetail request with any body
	PatchIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error)

	PatchIntegrationDetailWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error)

	PatchIntegrationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error)

	// PutIntegrationDetail request with any body
	PutIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error)

	PutIntegrationDetailWithResponse(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error)

	PutIntegrationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error)

	// GetOutagelist request
	GetOutagelistWithResponse(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*GetOutagelistResponse, error)

	// GetOutageDetail request
	GetOutageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetOutageDetailResponse, error)

	// GetMonitoringServerList request
	GetMonitoringServerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMonitoringServerListResponse, error)

	// GetPushnotificationlist request
	GetPushnotificationlistWithResponse(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*GetPushnotificationlistResponse, error)

	// PostPushnotificationlist request with any body
	PostPushnotificationlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error)

	PostPushnotificationlistWithResponse(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error)

	PostPushnotificationlistWithFormdataBodyWithResponse(ctx context.Context, body PostPushnotificationlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error)

	// DeletePushNotificationDetail request
	DeletePushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeletePushNotificationDetailResponse, error)

	// GetPushNotificationDetail request
	GetPushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetPushNotificationDetailResponse, error)

	// PatchPushNotificationDetail request with any body
	PatchPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error)

	PatchPushNotificationDetailWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error)

	PatchPushNotificationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error)

	// PutPushNotificationDetail request with any body
	PutPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error)

	PutPushNotificationDetailWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error)

	PutPushNotificationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error)

	// GetScheduledreportlist request
	GetScheduledreportlistWithResponse(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*GetScheduledreportlistResponse, error)

	// PostScheduledreportlist request with any body
	PostScheduledreportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error)

	PostScheduledreportlistWithResponse(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error)

	PostScheduledreportlistWithFormdataBodyWithResponse(ctx context.Context, body PostScheduledreportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error)

	// DeleteScheduledReportDetail request
	DeleteScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteScheduledReportDetailResponse, error)

	// GetScheduledReportDetail request
	GetScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetScheduledReportDetailResponse, error)

	// PatchScheduledReportDetail request with any body
	PatchScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error)

	PatchScheduledReportDetailWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error)

	PatchScheduledReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error)

	// PutScheduledReportDetail request with any body
	PutScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error)

	PutScheduledReportDetailWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error)

	PutScheduledReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error)

	// GetSlareportlist request
	GetSlareportlistWithResponse(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*GetSlareportlistResponse, error)

	// PostSlareportlist request with any body
	PostSlareportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error)

	PostSlareportlistWithResponse(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error)

	PostSlareportlistWithFormdataBodyWithResponse(ctx context.Context, body PostSlareportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error)

	// DeleteSlaReportDetail request
	DeleteSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteSlaReportDetailResponse, error)

	// GetSlaReportDetail request
	GetSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetSlaReportDetailResponse, error)

	// PatchSlaReportDetail request with any body
	PatchSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error)

	PatchSlaReportDetailWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error)

	PatchSlaReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error)

	// PutSlaReportDetail request with any body
	PutSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error)

	PutSlaReportDetailWithResponse(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error)

	PutSlaReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error)

	// GetSlaReportStats request
	GetSlaReportStatsWithResponse(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*GetSlaReportStatsResponse, error)

	// GetStatuspagelist request
	GetStatuspagelistWithResponse(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*GetStatuspagelistResponse, error)

	// PostStatuspagelist request with any body
	PostStatuspagelistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error)

	PostStatuspagelistWithResponse(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error)

	PostStatuspagelistWithFormdataBodyWithResponse(ctx context.Context, body PostStatuspagelistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error)

	// DeleteStatuspageDetail request
	DeleteStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteStatuspageDetailResponse, error)

	// GetStatuspageDetail request
	GetStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageDetailResponse, error)

	// PatchStatuspageDetail request with any body
	PatchStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error)

	PatchStatuspageDetailWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error)

	PatchStatuspageDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error)

	// PutStatuspageDetail request with any body
	PutStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error)

	PutStatuspageDetailWithResponse(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error)

	PutStatuspageDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error)

	// GetStatuspageCurrentStatus request
	GetStatuspageCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageCurrentStatusResponse, error)

	// GetStatuspageHistory request
	GetStatuspageHistoryWithResponse(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*GetStatuspageHistoryResponse, error)

	// GetComponentslist request
	GetComponentslistWithResponse(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*GetComponentslistResponse, error)

	// PostComponentslist request with any body
	PostComponentslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error)

	PostComponentslistWithResponse(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error)

	PostComponentslistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostComponentslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error)

	// DeleteComponentDetail request
	DeleteComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteComponentDetailResponse, error)

	// GetComponentDetail request
	GetComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetComponentDetailResponse, error)

	// PatchComponentDetail request with any body
	PatchComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error)

	PatchComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error)

	PatchComponentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error)

	// PutComponentDetail request with any body
	PutComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error)

	PutComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error)

	PutComponentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error)

	// GetIncidentlist request
	GetIncidentlistWithResponse(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*GetIncidentlistResponse, error)

	// PostIncidentlist request with any body
	PostIncidentlistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error)

	PostIncidentlistWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error)

	PostIncidentlistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error)

	// DeleteIncidentDetail request
	DeleteIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteIncidentDetailResponse, error)

	// GetIncidentDetail request
	GetIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetIncidentDetailResponse, error)

	// PatchIncidentDetail request with any body
	PatchIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error)

	PatchIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error)

	PatchIncidentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error)

	// PutIncidentDetail request with any body
	PutIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error)

	PutIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error)

	PutIncidentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error)

	// GetMetricslist request
	GetMetricslistWithResponse(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*GetMetricslistResponse, error)

	// PostMetricslist request with any body
	PostMetricslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error)

	PostMetricslistWithResponse(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error)

	PostMetricslistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostMetricslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error)

	// DeleteMetricDetail request
	DeleteMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteMetricDetailResponse, error)

	// GetMetricDetail request
	GetMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetMetricDetailResponse, error)

	// PatchMetricDetail request with any body
	PatchMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error)

	PatchMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error)

	PatchMetricDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error)

	// PutMetricDetail request with any body
	PutMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error)

	PutMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error)

	PutMetricDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error)

	// GetUserlist request
	GetUserlistWithResponse(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error)

	// PostUserlist request with any body
	PostUserlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error)

	PostUserlistWithResponse(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error)

	PostUserlistWithFormdataBodyWithResponse(ctx context.Context, body PostUserlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error)

	// DeleteUserDetail request
	DeleteUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteUserDetailResponse, error)

	// GetUserDetail request
	GetUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetUserDetailResponse, error)

	// PatchUserDetail request with any body
	PatchUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error)

	PatchUserDetailWithResponse(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error)

	PatchUserDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error)

	// PutUserDetail request with any body
	PutUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error)

	PutUserDetailWithResponse(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error)

	PutUserDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error)

	// PostUserDeactivate request
	PostUserDeactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserDeactivateResponse, error)

	// PostUserReactivate request
	PostUserReactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserReactivateResponse, error)
}

type GetAlertlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Incidents `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAlertlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertAlertRootCauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAlertAlertRootCauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertAlertRootCauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incidents
}

// Status returns HTTPResponse.Status
func (r GetAlertDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAlertIgnoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAlertIgnoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAlertIgnoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthAccountUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthAccountUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthAccountUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthTokenWithTOTP
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestMagicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRequestMagicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestMagicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetAuthMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PasswordReset
}

// Status returns HTTPResponse.Status
func (r GetAuthResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PasswordReset
}

// Status returns HTTPResponse.Status
func (r PostAuthResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSendMagicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MagicLink
}

// Status returns HTTPResponse.Status
func (r PostSendMagicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSendMagicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSubaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r GetAuthSubaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSubaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSubaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r PostAuthSubaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSubaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthSubaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r GetAuthSubaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthSubaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAuthSubaccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Subaccount
}

// Status returns HTTPResponse.Status
func (r PatchAuthSubaccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAuthSubaccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSubaccountPacksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubaccountPacks
}

// Status returns HTTPResponse.Status
func (r PostAuthSubaccountPacksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSubaccountPacksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostValidateMagicLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostValidateMagicLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostValidateMagicLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicetaglistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int        `json:"count,omitempty"`
		Next     *string     `json:"next"`
		Previous *string     `json:"previous"`
		Results  *[]CheckTag `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServicetaglistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicetaglistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicetaglistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PostServicetaglistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicetaglistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r GetServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PatchServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceTagDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTag
}

// Status returns HTTPResponse.Status
func (r PutServiceTagDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceTagDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServicelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int      `json:"count,omitempty"`
		Next     *string   `json:"next"`
		Previous *string   `json:"previous"`
		Results  *[]Checks `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetServicelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServicelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksAPI
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateBlacklistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBLACKLIST
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateBlacklistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateBlacklistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateDnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksDNS
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateDnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateDnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksGROUP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateHeartbeatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksHEARTBEAT
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateHeartbeatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateHeartbeatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateHttpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksHTTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateHttpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateHttpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateIcmpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksICMP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateIcmpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateIcmpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateImapResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksIMAP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateImapResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateImapResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateMalwareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksMALWARE
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateMalwareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateMalwareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateNtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksNTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateNtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateNtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreatePopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksPOP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreatePopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreatePopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateRumResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksRUM
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateRumResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateRumResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateRum2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksRUM2
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateRum2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateRum2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSmtpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSMTP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSmtpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSmtpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSSH
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateSslCertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksSSLCERT
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateSslCertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateSslCertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateTcpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksTCP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateTcpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateTcpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksTRANSACTION
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateUdpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksUDP
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateUdpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateUdpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksWEBHOOK
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceCreateWhoisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksWHOIS
}

// Status returns HTTPResponse.Status
func (r PostServiceCreateWhoisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceCreateWhoisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkEscalationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdateEscalations
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkEscalationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkEscalationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdateMaintenance
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkChecksAction
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BulkChecksAction
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceBulkStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkStats
}

// Status returns HTTPResponse.Status
func (r GetServiceBulkStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceBulkStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChecksBulkUpdate
}

// Status returns HTTPResponse.Status
func (r PatchServiceBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceShowServiceDefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceShowServiceDefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceShowServiceDefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceShowLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceShowLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceShowLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r GetServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r PatchServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutServiceDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Checks
}

// Status returns HTTPResponse.Status
func (r PutServiceDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutServiceDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckContactGroups
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckLocations
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceAddTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTags
}

// Status returns HTTPResponse.Status
func (r PatchServiceAddTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceAddTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceAnalysisResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceAnalysisResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceAnalysisResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceCurrentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetServiceCurrentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceCurrentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceSetEscalationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckEscalations
}

// Status returns HTTPResponse.Status
func (r PatchServiceSetEscalationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceSetEscalationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceSetMaintenanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckMaintenance
}

// Status returns HTTPResponse.Status
func (r PatchServiceSetMaintenanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceSetMaintenanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServicePauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServicePauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServicePauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceContactGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckContactGroups
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceContactGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceContactGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckLocations
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchServiceReplaceTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckTags
}

// Status returns HTTPResponse.Status
func (r PatchServiceReplaceTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchServiceReplaceTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceResponseTimeDatapointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseTime
}

// Status returns HTTPResponse.Status
func (r GetServiceResponseTimeDatapointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceResponseTimeDatapointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostServiceResumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostServiceResumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostServiceResumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckStats
}

// Status returns HTTPResponse.Status
func (r GetServiceStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactgrouplistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int            `json:"count,omitempty"`
		Next     *string         `json:"next"`
		Previous *string         `json:"previous"`
		Results  *[]ContactGroup `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContactgrouplistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactgrouplistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContactgrouplistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PostContactgrouplistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContactgrouplistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r GetContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PatchContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutContactGroupDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroup
}

// Status returns HTTPResponse.Status
func (r PutContactGroupDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutContactGroupDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchContactGroupSetOnCallHoursResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactGroupOnCallSchedule
}

// Status returns HTTPResponse.Status
func (r PatchContactGroupSetOnCallHoursResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchContactGroupSetOnCallHoursResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Dashboard `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDashboardlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDashboardlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PostDashboardlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDashboardlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardDefaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r GetDashboardDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r GetDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PatchDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDashboardDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dashboard
}

// Status returns HTTPResponse.Status
func (r PutDashboardDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDashboardDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDashboardStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DashboardStats
}

// Status returns HTTPResponse.Status
func (r GetDashboardStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDashboardStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int           `json:"count,omitempty"`
		Next     *string        `json:"next"`
		Previous *string        `json:"previous"`
		Results  *[]Integration `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIntegrationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateCachetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationCachet
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateCachetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateCachetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateDatadogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationDatadog
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateDatadogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateDatadogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateGeckoboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationGeckoboard
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateGeckoboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateGeckoboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateJiraservicedeskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationJiraservicedesk
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateJiraservicedeskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateJiraservicedeskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateKlipfolioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationKlipfolio
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateKlipfolioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateKlipfolioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateLibratoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationLibrato
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateLibratoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateLibratoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateMicrosoftTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationMicrosoftTeams
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateMicrosoftTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateMicrosoftTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateOpsgenieResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationOpsgenie
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateOpsgenieResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateOpsgenieResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePagerdutyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPagerduty
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePagerdutyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePagerdutyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePushbulletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPushbullet
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePushbulletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePushbulletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreatePushoverResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationPushover
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreatePushoverResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreatePushoverResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateSlackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationSlack
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateSlackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateSlackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationStatus
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateStatuspageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationStatuspage
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateStatuspageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateStatuspageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateTwitterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationTwitter
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateTwitterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateTwitterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateVictoropsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationVictorops
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateVictoropsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateVictoropsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateWavefrontResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationWavefront
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateWavefrontResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateWavefrontResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationWebhook
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIntegrationCreateZapierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IntegrationZapier
}

// Status returns HTTPResponse.Status
func (r PostIntegrationCreateZapierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIntegrationCreateZapierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r GetIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r PatchIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIntegrationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Integration
}

// Status returns HTTPResponse.Status
func (r PutIntegrationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIntegrationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int       `json:"count,omitempty"`
		Next     *string    `json:"next"`
		Previous *string    `json:"previous"`
		Results  *[]Outages `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetOutagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOutageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Outages
}

// Status returns HTTPResponse.Status
func (r GetOutageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOutageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitoringServerListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMonitoringServerListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitoringServerListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPushnotificationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int                             `json:"count,omitempty"`
		Next     *string                          `json:"next"`
		Previous *string                          `json:"previous"`
		Results  *[]PushNotificationProfileCreate `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPushnotificationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPushnotificationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPushnotificationlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfileCreate
}

// Status returns HTTPResponse.Status
func (r PostPushnotificationlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPushnotificationlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r GetPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r PatchPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPushNotificationDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PushNotificationProfile
}

// Status returns HTTPResponse.Status
func (r PutPushNotificationDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPushNotificationDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduledreportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int               `json:"count,omitempty"`
		Next     *string            `json:"next"`
		Previous *string            `json:"previous"`
		Results  *[]ScheduledReport `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetScheduledreportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduledreportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostScheduledreportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PostScheduledreportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostScheduledreportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r GetScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PatchScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutScheduledReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledReport
}

// Status returns HTTPResponse.Status
func (r PutScheduledReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutScheduledReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlareportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]SLAReport `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSlareportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlareportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSlareportlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PostSlareportlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSlareportlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r GetSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PatchSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSlaReportDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReport
}

// Status returns HTTPResponse.Status
func (r PutSlaReportDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSlaReportDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSlaReportStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SLAReportStats
}

// Status returns HTTPResponse.Status
func (r GetSlaReportStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSlaReportStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int          `json:"count,omitempty"`
		Next     *string       `json:"next"`
		Previous *string       `json:"previous"`
		Results  *[]StatusPage `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetStatuspagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStatuspagelistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PostStatuspagelistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStatuspagelistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r GetStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PatchStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStatuspageDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPage
}

// Status returns HTTPResponse.Status
func (r PutStatuspageDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStatuspageDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageCurrentStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPageCurrentStatus
}

// Status returns HTTPResponse.Status
func (r GetStatuspageCurrentStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageCurrentStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatuspageHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusPageHistory
}

// Status returns HTTPResponse.Status
func (r GetStatuspageHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatuspageHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int         `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Component `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetComponentslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComponentslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PostComponentslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComponentslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r GetComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PatchComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComponentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
}

// Status returns HTTPResponse.Status
func (r PutComponentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComponentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int        `json:"count,omitempty"`
		Next     *string     `json:"next"`
		Previous *string     `json:"previous"`
		Results  *[]Incident `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetIncidentlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIncidentlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PostIncidentlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIncidentlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r GetIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PatchIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIncidentDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Incident
}

// Status returns HTTPResponse.Status
func (r PutIncidentDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIncidentDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int      `json:"count,omitempty"`
		Next     *string   `json:"next"`
		Previous *string   `json:"previous"`
		Results  *[]Metric `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMetricslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMetricslistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PostMetricslistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMetricslistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r GetMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PatchMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMetricDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Metric
}

// Status returns HTTPResponse.Status
func (r PutMetricDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMetricDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *int    `json:"count,omitempty"`
		Next     *string `json:"next"`
		Previous *string `json:"previous"`
		Results  *[]User `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PatchUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUserDetailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutUserDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserDeactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserDeactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserDeactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserReactivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserReactivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserReactivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAlertlistWithResponse request returning *GetAlertlistResponse
func (c *ClientWithResponses) GetAlertlistWithResponse(ctx context.Context, params *GetAlertlistParams, reqEditors ...RequestEditorFn) (*GetAlertlistResponse, error) {
	rsp, err := c.GetAlertlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertlistResponse(rsp)
}

// GetAlertAlertRootCauseWithResponse request returning *GetAlertAlertRootCauseResponse
func (c *ClientWithResponses) GetAlertAlertRootCauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertAlertRootCauseResponse, error) {
	rsp, err := c.GetAlertAlertRootCause(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertAlertRootCauseResponse(rsp)
}

// GetAlertDetailWithResponse request returning *GetAlertDetailResponse
func (c *ClientWithResponses) GetAlertDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAlertDetailResponse, error) {
	rsp, err := c.GetAlertDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertDetailResponse(rsp)
}

// PostAlertIgnoreWithResponse request returning *PostAlertIgnoreResponse
func (c *ClientWithResponses) PostAlertIgnoreWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostAlertIgnoreResponse, error) {
	rsp, err := c.PostAlertIgnore(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAlertIgnoreResponse(rsp)
}

// GetAuthListWithResponse request returning *GetAuthListResponse
func (c *ClientWithResponses) GetAuthListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthListResponse, error) {
	rsp, err := c.GetAuthList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthListResponse(rsp)
}

// GetAuthAccountUsageWithResponse request returning *GetAuthAccountUsageResponse
func (c *ClientWithResponses) GetAuthAccountUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthAccountUsageResponse, error) {
	rsp, err := c.GetAuthAccountUsage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthAccountUsageResponse(rsp)
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithFormdataBodyWithResponse(ctx context.Context, body PostAuthLoginFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// GetRequestMagicLinkWithResponse request returning *GetRequestMagicLinkResponse
func (c *ClientWithResponses) GetRequestMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRequestMagicLinkResponse, error) {
	rsp, err := c.GetRequestMagicLink(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestMagicLinkResponse(rsp)
}

// GetAuthMeWithResponse request returning *GetAuthMeResponse
func (c *ClientWithResponses) GetAuthMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthMeResponse, error) {
	rsp, err := c.GetAuthMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthMeResponse(rsp)
}

// GetAuthResetPasswordWithResponse request returning *GetAuthResetPasswordResponse
func (c *ClientWithResponses) GetAuthResetPasswordWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthResetPasswordResponse, error) {
	rsp, err := c.GetAuthResetPassword(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResetPasswordResponse(rsp)
}

// PostAuthResetPasswordWithBodyWithResponse request with arbitrary body returning *PostAuthResetPasswordResponse
func (c *ClientWithResponses) PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
	rsp, err := c.PostAuthResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
	rsp, err := c.PostAuthResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PostAuthResetPasswordWithFormdataBodyWithResponse(ctx context.Context, body PostAuthResetPasswordFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
	rsp, err := c.PostAuthResetPasswordWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthResetPasswordResponse(rsp)
}

// PostSendMagicLinkWithBodyWithResponse request with arbitrary body returning *PostSendMagicLinkResponse
func (c *ClientWithResponses) PostSendMagicLinkWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error) {
	rsp, err := c.PostSendMagicLinkWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMagicLinkResponse(rsp)
}

func (c *ClientWithResponses) PostSendMagicLinkWithResponse(ctx context.Context, body PostSendMagicLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error) {
	rsp, err := c.PostSendMagicLink(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMagicLinkResponse(rsp)
}

func (c *ClientWithResponses) PostSendMagicLinkWithFormdataBodyWithResponse(ctx context.Context, body PostSendMagicLinkFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSendMagicLinkResponse, error) {
	rsp, err := c.PostSendMagicLinkWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSendMagicLinkResponse(rsp)
}

// GetAuthSubaccountsWithResponse request returning *GetAuthSubaccountsResponse
func (c *ClientWithResponses) GetAuthSubaccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthSubaccountsResponse, error) {
	rsp, err := c.GetAuthSubaccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSubaccountsResponse(rsp)
}

// PostAuthSubaccountsWithBodyWithResponse request with arbitrary body returning *PostAuthSubaccountsResponse
func (c *ClientWithResponses) PostAuthSubaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error) {
	rsp, err := c.PostAuthSubaccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountsResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountsWithResponse(ctx context.Context, body PostAuthSubaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error) {
	rsp, err := c.PostAuthSubaccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountsResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountsWithFormdataBodyWithResponse(ctx context.Context, body PostAuthSubaccountsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountsResponse, error) {
	rsp, err := c.PostAuthSubaccountsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountsResponse(rsp)
}

// GetAuthSubaccountWithResponse request returning *GetAuthSubaccountResponse
func (c *ClientWithResponses) GetAuthSubaccountWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetAuthSubaccountResponse, error) {
	rsp, err := c.GetAuthSubaccount(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthSubaccountResponse(rsp)
}

// PatchAuthSubaccountWithBodyWithResponse request with arbitrary body returning *PatchAuthSubaccountResponse
func (c *ClientWithResponses) PatchAuthSubaccountWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error) {
	rsp, err := c.PatchAuthSubaccountWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthSubaccountResponse(rsp)
}

func (c *ClientWithResponses) PatchAuthSubaccountWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error) {
	rsp, err := c.PatchAuthSubaccount(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthSubaccountResponse(rsp)
}

func (c *ClientWithResponses) PatchAuthSubaccountWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchAuthSubaccountFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchAuthSubaccountResponse, error) {
	rsp, err := c.PatchAuthSubaccountWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAuthSubaccountResponse(rsp)
}

// PostAuthSubaccountPacksWithBodyWithResponse request with arbitrary body returning *PostAuthSubaccountPacksResponse
func (c *ClientWithResponses) PostAuthSubaccountPacksWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error) {
	rsp, err := c.PostAuthSubaccountPacksWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountPacksResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountPacksWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error) {
	rsp, err := c.PostAuthSubaccountPacks(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountPacksResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSubaccountPacksWithFormdataBodyWithResponse(ctx context.Context, pk string, body PostAuthSubaccountPacksFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSubaccountPacksResponse, error) {
	rsp, err := c.PostAuthSubaccountPacksWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSubaccountPacksResponse(rsp)
}

// PostValidateMagicLinkWithResponse request returning *PostValidateMagicLinkResponse
func (c *ClientWithResponses) PostValidateMagicLinkWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostValidateMagicLinkResponse, error) {
	rsp, err := c.PostValidateMagicLink(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostValidateMagicLinkResponse(rsp)
}

// GetServicetaglistWithResponse request returning *GetServicetaglistResponse
func (c *ClientWithResponses) GetServicetaglistWithResponse(ctx context.Context, params *GetServicetaglistParams, reqEditors ...RequestEditorFn) (*GetServicetaglistResponse, error) {
	rsp, err := c.GetServicetaglist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicetaglistResponse(rsp)
}

// PostServicetaglistWithBodyWithResponse request with arbitrary body returning *PostServicetaglistResponse
func (c *ClientWithResponses) PostServicetaglistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error) {
	rsp, err := c.PostServicetaglistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicetaglistResponse(rsp)
}

func (c *ClientWithResponses) PostServicetaglistWithResponse(ctx context.Context, body PostServicetaglistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error) {
	rsp, err := c.PostServicetaglist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicetaglistResponse(rsp)
}

func (c *ClientWithResponses) PostServicetaglistWithFormdataBodyWithResponse(ctx context.Context, body PostServicetaglistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServicetaglistResponse, error) {
	rsp, err := c.PostServicetaglistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicetaglistResponse(rsp)
}

// DeleteServiceTagDetailWithResponse request returning *DeleteServiceTagDetailResponse
func (c *ClientWithResponses) DeleteServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceTagDetailResponse, error) {
	rsp, err := c.DeleteServiceTagDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceTagDetailResponse(rsp)
}

// GetServiceTagDetailWithResponse request returning *GetServiceTagDetailResponse
func (c *ClientWithResponses) GetServiceTagDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceTagDetailResponse, error) {
	rsp, err := c.GetServiceTagDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceTagDetailResponse(rsp)
}

// PatchServiceTagDetailWithBodyWithResponse request with arbitrary body returning *PatchServiceTagDetailResponse
func (c *ClientWithResponses) PatchServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error) {
	rsp, err := c.PatchServiceTagDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceTagDetailWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error) {
	rsp, err := c.PatchServiceTagDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceTagDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceTagDetailResponse, error) {
	rsp, err := c.PatchServiceTagDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceTagDetailResponse(rsp)
}

// PutServiceTagDetailWithBodyWithResponse request with arbitrary body returning *PutServiceTagDetailResponse
func (c *ClientWithResponses) PutServiceTagDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error) {
	rsp, err := c.PutServiceTagDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceTagDetailWithResponse(ctx context.Context, pk string, body PutServiceTagDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error) {
	rsp, err := c.PutServiceTagDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceTagDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceTagDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutServiceTagDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutServiceTagDetailResponse, error) {
	rsp, err := c.PutServiceTagDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceTagDetailResponse(rsp)
}

// GetServicelistWithResponse request returning *GetServicelistResponse
func (c *ClientWithResponses) GetServicelistWithResponse(ctx context.Context, params *GetServicelistParams, reqEditors ...RequestEditorFn) (*GetServicelistResponse, error) {
	rsp, err := c.GetServicelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServicelistResponse(rsp)
}

// PostServiceCreateApiWithBodyWithResponse request with arbitrary body returning *PostServiceCreateApiResponse
func (c *ClientWithResponses) PostServiceCreateApiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error) {
	rsp, err := c.PostServiceCreateApiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateApiResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateApiWithResponse(ctx context.Context, body PostServiceCreateApiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error) {
	rsp, err := c.PostServiceCreateApi(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateApiResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateApiWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateApiFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateApiResponse, error) {
	rsp, err := c.PostServiceCreateApiWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateApiResponse(rsp)
}

// PostServiceCreateBlacklistWithBodyWithResponse request with arbitrary body returning *PostServiceCreateBlacklistResponse
func (c *ClientWithResponses) PostServiceCreateBlacklistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error) {
	rsp, err := c.PostServiceCreateBlacklistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateBlacklistResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateBlacklistWithResponse(ctx context.Context, body PostServiceCreateBlacklistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error) {
	rsp, err := c.PostServiceCreateBlacklist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateBlacklistResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateBlacklistWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateBlacklistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateBlacklistResponse, error) {
	rsp, err := c.PostServiceCreateBlacklistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateBlacklistResponse(rsp)
}

// PostServiceCreateDnsWithBodyWithResponse request with arbitrary body returning *PostServiceCreateDnsResponse
func (c *ClientWithResponses) PostServiceCreateDnsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error) {
	rsp, err := c.PostServiceCreateDnsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateDnsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateDnsWithResponse(ctx context.Context, body PostServiceCreateDnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error) {
	rsp, err := c.PostServiceCreateDns(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateDnsResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateDnsWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateDnsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateDnsResponse, error) {
	rsp, err := c.PostServiceCreateDnsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateDnsResponse(rsp)
}

// PostServiceCreateGroupWithBodyWithResponse request with arbitrary body returning *PostServiceCreateGroupResponse
func (c *ClientWithResponses) PostServiceCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error) {
	rsp, err := c.PostServiceCreateGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateGroupWithResponse(ctx context.Context, body PostServiceCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error) {
	rsp, err := c.PostServiceCreateGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateGroupWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateGroupFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateGroupResponse, error) {
	rsp, err := c.PostServiceCreateGroupWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateGroupResponse(rsp)
}

// PostServiceCreateHeartbeatWithBodyWithResponse request with arbitrary body returning *PostServiceCreateHeartbeatResponse
func (c *ClientWithResponses) PostServiceCreateHeartbeatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error) {
	rsp, err := c.PostServiceCreateHeartbeatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHeartbeatWithResponse(ctx context.Context, body PostServiceCreateHeartbeatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error) {
	rsp, err := c.PostServiceCreateHeartbeat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHeartbeatResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHeartbeatWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateHeartbeatFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHeartbeatResponse, error) {
	rsp, err := c.PostServiceCreateHeartbeatWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHeartbeatResponse(rsp)
}

// PostServiceCreateHttpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateHttpResponse
func (c *ClientWithResponses) PostServiceCreateHttpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error) {
	rsp, err := c.PostServiceCreateHttpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHttpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHttpWithResponse(ctx context.Context, body PostServiceCreateHttpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error) {
	rsp, err := c.PostServiceCreateHttp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHttpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateHttpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateHttpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateHttpResponse, error) {
	rsp, err := c.PostServiceCreateHttpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateHttpResponse(rsp)
}

// PostServiceCreateIcmpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateIcmpResponse
func (c *ClientWithResponses) PostServiceCreateIcmpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error) {
	rsp, err := c.PostServiceCreateIcmpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateIcmpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateIcmpWithResponse(ctx context.Context, body PostServiceCreateIcmpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error) {
	rsp, err := c.PostServiceCreateIcmp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateIcmpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateIcmpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateIcmpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateIcmpResponse, error) {
	rsp, err := c.PostServiceCreateIcmpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateIcmpResponse(rsp)
}

// PostServiceCreateImapWithBodyWithResponse request with arbitrary body returning *PostServiceCreateImapResponse
func (c *ClientWithResponses) PostServiceCreateImapWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error) {
	rsp, err := c.PostServiceCreateImapWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateImapResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateImapWithResponse(ctx context.Context, body PostServiceCreateImapJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error) {
	rsp, err := c.PostServiceCreateImap(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateImapResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateImapWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateImapFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateImapResponse, error) {
	rsp, err := c.PostServiceCreateImapWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateImapResponse(rsp)
}

// PostServiceCreateMalwareWithBodyWithResponse request with arbitrary body returning *PostServiceCreateMalwareResponse
func (c *ClientWithResponses) PostServiceCreateMalwareWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error) {
	rsp, err := c.PostServiceCreateMalwareWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateMalwareResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateMalwareWithResponse(ctx context.Context, body PostServiceCreateMalwareJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error) {
	rsp, err := c.PostServiceCreateMalware(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateMalwareResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateMalwareWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateMalwareFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateMalwareResponse, error) {
	rsp, err := c.PostServiceCreateMalwareWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateMalwareResponse(rsp)
}

// PostServiceCreateNtpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateNtpResponse
func (c *ClientWithResponses) PostServiceCreateNtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error) {
	rsp, err := c.PostServiceCreateNtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateNtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateNtpWithResponse(ctx context.Context, body PostServiceCreateNtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error) {
	rsp, err := c.PostServiceCreateNtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateNtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateNtpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateNtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateNtpResponse, error) {
	rsp, err := c.PostServiceCreateNtpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateNtpResponse(rsp)
}

// PostServiceCreatePopWithBodyWithResponse request with arbitrary body returning *PostServiceCreatePopResponse
func (c *ClientWithResponses) PostServiceCreatePopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error) {
	rsp, err := c.PostServiceCreatePopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreatePopResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreatePopWithResponse(ctx context.Context, body PostServiceCreatePopJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error) {
	rsp, err := c.PostServiceCreatePop(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreatePopResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreatePopWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreatePopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreatePopResponse, error) {
	rsp, err := c.PostServiceCreatePopWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreatePopResponse(rsp)
}

// PostServiceCreateRumWithBodyWithResponse request with arbitrary body returning *PostServiceCreateRumResponse
func (c *ClientWithResponses) PostServiceCreateRumWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error) {
	rsp, err := c.PostServiceCreateRumWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRumResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRumWithResponse(ctx context.Context, body PostServiceCreateRumJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error) {
	rsp, err := c.PostServiceCreateRum(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRumResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRumWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateRumFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRumResponse, error) {
	rsp, err := c.PostServiceCreateRumWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRumResponse(rsp)
}

// PostServiceCreateRum2WithBodyWithResponse request with arbitrary body returning *PostServiceCreateRum2Response
func (c *ClientWithResponses) PostServiceCreateRum2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error) {
	rsp, err := c.PostServiceCreateRum2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRum2Response(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRum2WithResponse(ctx context.Context, body PostServiceCreateRum2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error) {
	rsp, err := c.PostServiceCreateRum2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRum2Response(rsp)
}

func (c *ClientWithResponses) PostServiceCreateRum2WithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateRum2FormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateRum2Response, error) {
	rsp, err := c.PostServiceCreateRum2WithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateRum2Response(rsp)
}

// PostServiceCreateSmtpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSmtpResponse
func (c *ClientWithResponses) PostServiceCreateSmtpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error) {
	rsp, err := c.PostServiceCreateSmtpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSmtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSmtpWithResponse(ctx context.Context, body PostServiceCreateSmtpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error) {
	rsp, err := c.PostServiceCreateSmtp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSmtpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSmtpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSmtpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSmtpResponse, error) {
	rsp, err := c.PostServiceCreateSmtpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSmtpResponse(rsp)
}

// PostServiceCreateSshWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSshResponse
func (c *ClientWithResponses) PostServiceCreateSshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error) {
	rsp, err := c.PostServiceCreateSshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSshResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSshWithResponse(ctx context.Context, body PostServiceCreateSshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error) {
	rsp, err := c.PostServiceCreateSsh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSshResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSshWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSshFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSshResponse, error) {
	rsp, err := c.PostServiceCreateSshWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSshResponse(rsp)
}

// PostServiceCreateSslCertWithBodyWithResponse request with arbitrary body returning *PostServiceCreateSslCertResponse
func (c *ClientWithResponses) PostServiceCreateSslCertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error) {
	rsp, err := c.PostServiceCreateSslCertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSslCertResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSslCertWithResponse(ctx context.Context, body PostServiceCreateSslCertJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error) {
	rsp, err := c.PostServiceCreateSslCert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSslCertResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateSslCertWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateSslCertFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateSslCertResponse, error) {
	rsp, err := c.PostServiceCreateSslCertWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateSslCertResponse(rsp)
}

// PostServiceCreateTcpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateTcpResponse
func (c *ClientWithResponses) PostServiceCreateTcpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error) {
	rsp, err := c.PostServiceCreateTcpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTcpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTcpWithResponse(ctx context.Context, body PostServiceCreateTcpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error) {
	rsp, err := c.PostServiceCreateTcp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTcpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTcpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateTcpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTcpResponse, error) {
	rsp, err := c.PostServiceCreateTcpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTcpResponse(rsp)
}

// PostServiceCreateTransactionWithBodyWithResponse request with arbitrary body returning *PostServiceCreateTransactionResponse
func (c *ClientWithResponses) PostServiceCreateTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error) {
	rsp, err := c.PostServiceCreateTransactionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTransactionWithResponse(ctx context.Context, body PostServiceCreateTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error) {
	rsp, err := c.PostServiceCreateTransaction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateTransactionWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateTransactionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateTransactionResponse, error) {
	rsp, err := c.PostServiceCreateTransactionWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateTransactionResponse(rsp)
}

// PostServiceCreateUdpWithBodyWithResponse request with arbitrary body returning *PostServiceCreateUdpResponse
func (c *ClientWithResponses) PostServiceCreateUdpWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error) {
	rsp, err := c.PostServiceCreateUdpWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateUdpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateUdpWithResponse(ctx context.Context, body PostServiceCreateUdpJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error) {
	rsp, err := c.PostServiceCreateUdp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateUdpResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateUdpWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateUdpFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateUdpResponse, error) {
	rsp, err := c.PostServiceCreateUdpWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateUdpResponse(rsp)
}

// PostServiceCreateWebhookWithBodyWithResponse request with arbitrary body returning *PostServiceCreateWebhookResponse
func (c *ClientWithResponses) PostServiceCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error) {
	rsp, err := c.PostServiceCreateWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWebhookWithResponse(ctx context.Context, body PostServiceCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error) {
	rsp, err := c.PostServiceCreateWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWebhookResponse, error) {
	rsp, err := c.PostServiceCreateWebhookWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWebhookResponse(rsp)
}

// PostServiceCreateWhoisWithBodyWithResponse request with arbitrary body returning *PostServiceCreateWhoisResponse
func (c *ClientWithResponses) PostServiceCreateWhoisWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error) {
	rsp, err := c.PostServiceCreateWhoisWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWhoisResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWhoisWithResponse(ctx context.Context, body PostServiceCreateWhoisJSONRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error) {
	rsp, err := c.PostServiceCreateWhois(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWhoisResponse(rsp)
}

func (c *ClientWithResponses) PostServiceCreateWhoisWithFormdataBodyWithResponse(ctx context.Context, body PostServiceCreateWhoisFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostServiceCreateWhoisResponse, error) {
	rsp, err := c.PostServiceCreateWhoisWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceCreateWhoisResponse(rsp)
}

// PatchServiceBulkEscalationsWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkEscalationsResponse
func (c *ClientWithResponses) PatchServiceBulkEscalationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error) {
	rsp, err := c.PatchServiceBulkEscalationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkEscalationsWithResponse(ctx context.Context, body PatchServiceBulkEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error) {
	rsp, err := c.PatchServiceBulkEscalations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkEscalationsWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkEscalationsResponse, error) {
	rsp, err := c.PatchServiceBulkEscalationsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkEscalationsResponse(rsp)
}

// PatchServiceBulkMaintenanceWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkMaintenanceResponse
func (c *ClientWithResponses) PatchServiceBulkMaintenanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error) {
	rsp, err := c.PatchServiceBulkMaintenanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkMaintenanceWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error) {
	rsp, err := c.PatchServiceBulkMaintenance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkMaintenanceWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkMaintenanceResponse, error) {
	rsp, err := c.PatchServiceBulkMaintenanceWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkMaintenanceResponse(rsp)
}

// PatchServiceBulkPauseWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkPauseResponse
func (c *ClientWithResponses) PatchServiceBulkPauseWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error) {
	rsp, err := c.PatchServiceBulkPauseWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkPauseResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkPauseWithResponse(ctx context.Context, body PatchServiceBulkPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error) {
	rsp, err := c.PatchServiceBulkPause(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkPauseResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkPauseWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkPauseFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkPauseResponse, error) {
	rsp, err := c.PatchServiceBulkPauseWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkPauseResponse(rsp)
}

// PatchServiceBulkResumeWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkResumeResponse
func (c *ClientWithResponses) PatchServiceBulkResumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error) {
	rsp, err := c.PatchServiceBulkResumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkResumeResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkResumeWithResponse(ctx context.Context, body PatchServiceBulkResumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error) {
	rsp, err := c.PatchServiceBulkResume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkResumeResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkResumeWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkResumeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkResumeResponse, error) {
	rsp, err := c.PatchServiceBulkResumeWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkResumeResponse(rsp)
}

// GetServiceBulkStatsWithResponse request returning *GetServiceBulkStatsResponse
func (c *ClientWithResponses) GetServiceBulkStatsWithResponse(ctx context.Context, params *GetServiceBulkStatsParams, reqEditors ...RequestEditorFn) (*GetServiceBulkStatsResponse, error) {
	rsp, err := c.GetServiceBulkStats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceBulkStatsResponse(rsp)
}

// PatchServiceBulkUpdateWithBodyWithResponse request with arbitrary body returning *PatchServiceBulkUpdateResponse
func (c *ClientWithResponses) PatchServiceBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error) {
	rsp, err := c.PatchServiceBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkUpdateWithResponse(ctx context.Context, body PatchServiceBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error) {
	rsp, err := c.PatchServiceBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceBulkUpdateWithFormdataBodyWithResponse(ctx context.Context, body PatchServiceBulkUpdateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceBulkUpdateResponse, error) {
	rsp, err := c.PatchServiceBulkUpdateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceBulkUpdateResponse(rsp)
}

// GetServiceShowServiceDefsWithResponse request returning *GetServiceShowServiceDefsResponse
func (c *ClientWithResponses) GetServiceShowServiceDefsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowServiceDefsResponse, error) {
	rsp, err := c.GetServiceShowServiceDefs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceShowServiceDefsResponse(rsp)
}

// GetServiceShowLocationsWithResponse request returning *GetServiceShowLocationsResponse
func (c *ClientWithResponses) GetServiceShowLocationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceShowLocationsResponse, error) {
	rsp, err := c.GetServiceShowLocations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceShowLocationsResponse(rsp)
}

// DeleteServiceDetailWithResponse request returning *DeleteServiceDetailResponse
func (c *ClientWithResponses) DeleteServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteServiceDetailResponse, error) {
	rsp, err := c.DeleteServiceDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceDetailResponse(rsp)
}

// GetServiceDetailWithResponse request returning *GetServiceDetailResponse
func (c *ClientWithResponses) GetServiceDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceDetailResponse, error) {
	rsp, err := c.GetServiceDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceDetailResponse(rsp)
}

// PatchServiceDetailWithBodyWithResponse request with arbitrary body returning *PatchServiceDetailResponse
func (c *ClientWithResponses) PatchServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error) {
	rsp, err := c.PatchServiceDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceDetailWithResponse(ctx context.Context, pk string, body PatchServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error) {
	rsp, err := c.PatchServiceDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceDetailResponse, error) {
	rsp, err := c.PatchServiceDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceDetailResponse(rsp)
}

// PutServiceDetailWithBodyWithResponse request with arbitrary body returning *PutServiceDetailResponse
func (c *ClientWithResponses) PutServiceDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error) {
	rsp, err := c.PutServiceDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceDetailWithResponse(ctx context.Context, pk string, body PutServiceDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error) {
	rsp, err := c.PutServiceDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceDetailResponse(rsp)
}

func (c *ClientWithResponses) PutServiceDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutServiceDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutServiceDetailResponse, error) {
	rsp, err := c.PutServiceDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutServiceDetailResponse(rsp)
}

// PatchServiceAddContactGroupsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddContactGroupsResponse
func (c *ClientWithResponses) PatchServiceAddContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error) {
	rsp, err := c.PatchServiceAddContactGroupsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error) {
	rsp, err := c.PatchServiceAddContactGroups(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddContactGroupsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddContactGroupsResponse, error) {
	rsp, err := c.PatchServiceAddContactGroupsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddContactGroupsResponse(rsp)
}

// PatchServiceAddLocationsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddLocationsResponse
func (c *ClientWithResponses) PatchServiceAddLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error) {
	rsp, err := c.PatchServiceAddLocationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddLocationsWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error) {
	rsp, err := c.PatchServiceAddLocations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddLocationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddLocationsResponse, error) {
	rsp, err := c.PatchServiceAddLocationsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddLocationsResponse(rsp)
}

// PatchServiceAddTagsWithBodyWithResponse request with arbitrary body returning *PatchServiceAddTagsResponse
func (c *ClientWithResponses) PatchServiceAddTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error) {
	rsp, err := c.PatchServiceAddTagsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddTagsWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error) {
	rsp, err := c.PatchServiceAddTags(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceAddTagsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceAddTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceAddTagsResponse, error) {
	rsp, err := c.PatchServiceAddTagsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceAddTagsResponse(rsp)
}

// GetServiceAnalysisWithResponse request returning *GetServiceAnalysisResponse
func (c *ClientWithResponses) GetServiceAnalysisWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceAnalysisResponse, error) {
	rsp, err := c.GetServiceAnalysis(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceAnalysisResponse(rsp)
}

// GetServiceCurrentStatusWithResponse request returning *GetServiceCurrentStatusResponse
func (c *ClientWithResponses) GetServiceCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetServiceCurrentStatusResponse, error) {
	rsp, err := c.GetServiceCurrentStatus(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceCurrentStatusResponse(rsp)
}

// PatchServiceSetEscalationsWithBodyWithResponse request with arbitrary body returning *PatchServiceSetEscalationsResponse
func (c *ClientWithResponses) PatchServiceSetEscalationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error) {
	rsp, err := c.PatchServiceSetEscalationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetEscalationsWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error) {
	rsp, err := c.PatchServiceSetEscalations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetEscalationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetEscalationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceSetEscalationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetEscalationsResponse, error) {
	rsp, err := c.PatchServiceSetEscalationsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetEscalationsResponse(rsp)
}

// PatchServiceSetMaintenanceWithBodyWithResponse request with arbitrary body returning *PatchServiceSetMaintenanceResponse
func (c *ClientWithResponses) PatchServiceSetMaintenanceWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error) {
	rsp, err := c.PatchServiceSetMaintenanceWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetMaintenanceWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error) {
	rsp, err := c.PatchServiceSetMaintenance(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetMaintenanceResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceSetMaintenanceWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceSetMaintenanceFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceSetMaintenanceResponse, error) {
	rsp, err := c.PatchServiceSetMaintenanceWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceSetMaintenanceResponse(rsp)
}

// PostServicePauseWithResponse request returning *PostServicePauseResponse
func (c *ClientWithResponses) PostServicePauseWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServicePauseResponse, error) {
	rsp, err := c.PostServicePause(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServicePauseResponse(rsp)
}

// PatchServiceReplaceContactGroupsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceContactGroupsResponse
func (c *ClientWithResponses) PatchServiceReplaceContactGroupsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error) {
	rsp, err := c.PatchServiceReplaceContactGroupsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceContactGroupsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error) {
	rsp, err := c.PatchServiceReplaceContactGroups(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceContactGroupsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceContactGroupsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceContactGroupsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceContactGroupsResponse, error) {
	rsp, err := c.PatchServiceReplaceContactGroupsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceContactGroupsResponse(rsp)
}

// PatchServiceReplaceLocationsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceLocationsResponse
func (c *ClientWithResponses) PatchServiceReplaceLocationsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error) {
	rsp, err := c.PatchServiceReplaceLocationsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceLocationsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error) {
	rsp, err := c.PatchServiceReplaceLocations(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceLocationsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceLocationsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceLocationsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceLocationsResponse, error) {
	rsp, err := c.PatchServiceReplaceLocationsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceLocationsResponse(rsp)
}

// PatchServiceReplaceTagsWithBodyWithResponse request with arbitrary body returning *PatchServiceReplaceTagsResponse
func (c *ClientWithResponses) PatchServiceReplaceTagsWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error) {
	rsp, err := c.PatchServiceReplaceTagsWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceTagsWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error) {
	rsp, err := c.PatchServiceReplaceTags(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceTagsResponse(rsp)
}

func (c *ClientWithResponses) PatchServiceReplaceTagsWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchServiceReplaceTagsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchServiceReplaceTagsResponse, error) {
	rsp, err := c.PatchServiceReplaceTagsWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchServiceReplaceTagsResponse(rsp)
}

// GetServiceResponseTimeDatapointsWithResponse request returning *GetServiceResponseTimeDatapointsResponse
func (c *ClientWithResponses) GetServiceResponseTimeDatapointsWithResponse(ctx context.Context, pk string, params *GetServiceResponseTimeDatapointsParams, reqEditors ...RequestEditorFn) (*GetServiceResponseTimeDatapointsResponse, error) {
	rsp, err := c.GetServiceResponseTimeDatapoints(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceResponseTimeDatapointsResponse(rsp)
}

// PostServiceResumeWithResponse request returning *PostServiceResumeResponse
func (c *ClientWithResponses) PostServiceResumeWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostServiceResumeResponse, error) {
	rsp, err := c.PostServiceResume(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostServiceResumeResponse(rsp)
}

// GetServiceStatsWithResponse request returning *GetServiceStatsResponse
func (c *ClientWithResponses) GetServiceStatsWithResponse(ctx context.Context, pk string, params *GetServiceStatsParams, reqEditors ...RequestEditorFn) (*GetServiceStatsResponse, error) {
	rsp, err := c.GetServiceStats(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceStatsResponse(rsp)
}

// GetContactgrouplistWithResponse request returning *GetContactgrouplistResponse
func (c *ClientWithResponses) GetContactgrouplistWithResponse(ctx context.Context, params *GetContactgrouplistParams, reqEditors ...RequestEditorFn) (*GetContactgrouplistResponse, error) {
	rsp, err := c.GetContactgrouplist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactgrouplistResponse(rsp)
}

// PostContactgrouplistWithBodyWithResponse request with arbitrary body returning *PostContactgrouplistResponse
func (c *ClientWithResponses) PostContactgrouplistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error) {
	rsp, err := c.PostContactgrouplistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactgrouplistResponse(rsp)
}

func (c *ClientWithResponses) PostContactgrouplistWithResponse(ctx context.Context, body PostContactgrouplistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error) {
	rsp, err := c.PostContactgrouplist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactgrouplistResponse(rsp)
}

func (c *ClientWithResponses) PostContactgrouplistWithFormdataBodyWithResponse(ctx context.Context, body PostContactgrouplistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostContactgrouplistResponse, error) {
	rsp, err := c.PostContactgrouplistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContactgrouplistResponse(rsp)
}

// DeleteContactGroupDetailWithResponse request returning *DeleteContactGroupDetailResponse
func (c *ClientWithResponses) DeleteContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteContactGroupDetailResponse, error) {
	rsp, err := c.DeleteContactGroupDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContactGroupDetailResponse(rsp)
}

// GetContactGroupDetailWithResponse request returning *GetContactGroupDetailResponse
func (c *ClientWithResponses) GetContactGroupDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetContactGroupDetailResponse, error) {
	rsp, err := c.GetContactGroupDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactGroupDetailResponse(rsp)
}

// PatchContactGroupDetailWithBodyWithResponse request with arbitrary body returning *PatchContactGroupDetailResponse
func (c *ClientWithResponses) PatchContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error) {
	rsp, err := c.PatchContactGroupDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupDetailWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error) {
	rsp, err := c.PatchContactGroupDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupDetailResponse, error) {
	rsp, err := c.PatchContactGroupDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupDetailResponse(rsp)
}

// PutContactGroupDetailWithBodyWithResponse request with arbitrary body returning *PutContactGroupDetailResponse
func (c *ClientWithResponses) PutContactGroupDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error) {
	rsp, err := c.PutContactGroupDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PutContactGroupDetailWithResponse(ctx context.Context, pk string, body PutContactGroupDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error) {
	rsp, err := c.PutContactGroupDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactGroupDetailResponse(rsp)
}

func (c *ClientWithResponses) PutContactGroupDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutContactGroupDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutContactGroupDetailResponse, error) {
	rsp, err := c.PutContactGroupDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutContactGroupDetailResponse(rsp)
}

// PatchContactGroupSetOnCallHoursWithBodyWithResponse request with arbitrary body returning *PatchContactGroupSetOnCallHoursResponse
func (c *ClientWithResponses) PatchContactGroupSetOnCallHoursWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error) {
	rsp, err := c.PatchContactGroupSetOnCallHoursWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupSetOnCallHoursResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupSetOnCallHoursWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error) {
	rsp, err := c.PatchContactGroupSetOnCallHours(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupSetOnCallHoursResponse(rsp)
}

func (c *ClientWithResponses) PatchContactGroupSetOnCallHoursWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchContactGroupSetOnCallHoursFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchContactGroupSetOnCallHoursResponse, error) {
	rsp, err := c.PatchContactGroupSetOnCallHoursWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchContactGroupSetOnCallHoursResponse(rsp)
}

// GetDashboardlistWithResponse request returning *GetDashboardlistResponse
func (c *ClientWithResponses) GetDashboardlistWithResponse(ctx context.Context, params *GetDashboardlistParams, reqEditors ...RequestEditorFn) (*GetDashboardlistResponse, error) {
	rsp, err := c.GetDashboardlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardlistResponse(rsp)
}

// PostDashboardlistWithBodyWithResponse request with arbitrary body returning *PostDashboardlistResponse
func (c *ClientWithResponses) PostDashboardlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error) {
	rsp, err := c.PostDashboardlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardlistResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardlistWithResponse(ctx context.Context, body PostDashboardlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error) {
	rsp, err := c.PostDashboardlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardlistResponse(rsp)
}

func (c *ClientWithResponses) PostDashboardlistWithFormdataBodyWithResponse(ctx context.Context, body PostDashboardlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostDashboardlistResponse, error) {
	rsp, err := c.PostDashboardlistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDashboardlistResponse(rsp)
}

// GetDashboardDefaultWithResponse request returning *GetDashboardDefaultResponse
func (c *ClientWithResponses) GetDashboardDefaultWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDashboardDefaultResponse, error) {
	rsp, err := c.GetDashboardDefault(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardDefaultResponse(rsp)
}

// DeleteDashboardDetailWithResponse request returning *DeleteDashboardDetailResponse
func (c *ClientWithResponses) DeleteDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteDashboardDetailResponse, error) {
	rsp, err := c.DeleteDashboardDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDashboardDetailResponse(rsp)
}

// GetDashboardDetailWithResponse request returning *GetDashboardDetailResponse
func (c *ClientWithResponses) GetDashboardDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardDetailResponse, error) {
	rsp, err := c.GetDashboardDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardDetailResponse(rsp)
}

// PatchDashboardDetailWithBodyWithResponse request with arbitrary body returning *PatchDashboardDetailResponse
func (c *ClientWithResponses) PatchDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error) {
	rsp, err := c.PatchDashboardDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchDashboardDetailWithResponse(ctx context.Context, pk string, body PatchDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error) {
	rsp, err := c.PatchDashboardDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchDashboardDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchDashboardDetailResponse, error) {
	rsp, err := c.PatchDashboardDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDashboardDetailResponse(rsp)
}

// PutDashboardDetailWithBodyWithResponse request with arbitrary body returning *PutDashboardDetailResponse
func (c *ClientWithResponses) PutDashboardDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error) {
	rsp, err := c.PutDashboardDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PutDashboardDetailWithResponse(ctx context.Context, pk string, body PutDashboardDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error) {
	rsp, err := c.PutDashboardDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardDetailResponse(rsp)
}

func (c *ClientWithResponses) PutDashboardDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutDashboardDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutDashboardDetailResponse, error) {
	rsp, err := c.PutDashboardDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDashboardDetailResponse(rsp)
}

// GetDashboardStatsWithResponse request returning *GetDashboardStatsResponse
func (c *ClientWithResponses) GetDashboardStatsWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetDashboardStatsResponse, error) {
	rsp, err := c.GetDashboardStats(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDashboardStatsResponse(rsp)
}

// GetIntegrationlistWithResponse request returning *GetIntegrationlistResponse
func (c *ClientWithResponses) GetIntegrationlistWithResponse(ctx context.Context, params *GetIntegrationlistParams, reqEditors ...RequestEditorFn) (*GetIntegrationlistResponse, error) {
	rsp, err := c.GetIntegrationlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationlistResponse(rsp)
}

// PostIntegrationCreateCachetWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateCachetResponse
func (c *ClientWithResponses) PostIntegrationCreateCachetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error) {
	rsp, err := c.PostIntegrationCreateCachetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateCachetResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateCachetWithResponse(ctx context.Context, body PostIntegrationCreateCachetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error) {
	rsp, err := c.PostIntegrationCreateCachet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateCachetResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateCachetWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateCachetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateCachetResponse, error) {
	rsp, err := c.PostIntegrationCreateCachetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateCachetResponse(rsp)
}

// PostIntegrationCreateDatadogWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateDatadogResponse
func (c *ClientWithResponses) PostIntegrationCreateDatadogWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error) {
	rsp, err := c.PostIntegrationCreateDatadogWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateDatadogResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateDatadogWithResponse(ctx context.Context, body PostIntegrationCreateDatadogJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error) {
	rsp, err := c.PostIntegrationCreateDatadog(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateDatadogResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateDatadogWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateDatadogFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateDatadogResponse, error) {
	rsp, err := c.PostIntegrationCreateDatadogWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateDatadogResponse(rsp)
}

// PostIntegrationCreateGeckoboardWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateGeckoboardResponse
func (c *ClientWithResponses) PostIntegrationCreateGeckoboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error) {
	rsp, err := c.PostIntegrationCreateGeckoboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateGeckoboardResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateGeckoboardWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error) {
	rsp, err := c.PostIntegrationCreateGeckoboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateGeckoboardResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateGeckoboardWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateGeckoboardFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateGeckoboardResponse, error) {
	rsp, err := c.PostIntegrationCreateGeckoboardWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateGeckoboardResponse(rsp)
}

// PostIntegrationCreateJiraservicedeskWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateJiraservicedeskResponse
func (c *ClientWithResponses) PostIntegrationCreateJiraservicedeskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	rsp, err := c.PostIntegrationCreateJiraservicedeskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateJiraservicedeskResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateJiraservicedeskWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	rsp, err := c.PostIntegrationCreateJiraservicedesk(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateJiraservicedeskResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateJiraservicedeskWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateJiraservicedeskFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	rsp, err := c.PostIntegrationCreateJiraservicedeskWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateJiraservicedeskResponse(rsp)
}

// PostIntegrationCreateKlipfolioWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateKlipfolioResponse
func (c *ClientWithResponses) PostIntegrationCreateKlipfolioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error) {
	rsp, err := c.PostIntegrationCreateKlipfolioWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateKlipfolioResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateKlipfolioWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error) {
	rsp, err := c.PostIntegrationCreateKlipfolio(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateKlipfolioResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateKlipfolioWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateKlipfolioFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateKlipfolioResponse, error) {
	rsp, err := c.PostIntegrationCreateKlipfolioWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateKlipfolioResponse(rsp)
}

// PostIntegrationCreateLibratoWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateLibratoResponse
func (c *ClientWithResponses) PostIntegrationCreateLibratoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error) {
	rsp, err := c.PostIntegrationCreateLibratoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateLibratoResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateLibratoWithResponse(ctx context.Context, body PostIntegrationCreateLibratoJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error) {
	rsp, err := c.PostIntegrationCreateLibrato(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateLibratoResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateLibratoWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateLibratoFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateLibratoResponse, error) {
	rsp, err := c.PostIntegrationCreateLibratoWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateLibratoResponse(rsp)
}

// PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateMicrosoftTeamsResponse
func (c *ClientWithResponses) PostIntegrationCreateMicrosoftTeamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	rsp, err := c.PostIntegrationCreateMicrosoftTeamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateMicrosoftTeamsWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	rsp, err := c.PostIntegrationCreateMicrosoftTeams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateMicrosoftTeamsWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateMicrosoftTeamsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	rsp, err := c.PostIntegrationCreateMicrosoftTeamsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp)
}

// PostIntegrationCreateOpsgenieWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateOpsgenieResponse
func (c *ClientWithResponses) PostIntegrationCreateOpsgenieWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error) {
	rsp, err := c.PostIntegrationCreateOpsgenieWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateOpsgenieResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateOpsgenieWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error) {
	rsp, err := c.PostIntegrationCreateOpsgenie(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateOpsgenieResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateOpsgenieWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateOpsgenieFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateOpsgenieResponse, error) {
	rsp, err := c.PostIntegrationCreateOpsgenieWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateOpsgenieResponse(rsp)
}

// PostIntegrationCreatePagerdutyWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePagerdutyResponse
func (c *ClientWithResponses) PostIntegrationCreatePagerdutyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error) {
	rsp, err := c.PostIntegrationCreatePagerdutyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePagerdutyResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePagerdutyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error) {
	rsp, err := c.PostIntegrationCreatePagerduty(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePagerdutyResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePagerdutyWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePagerdutyFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePagerdutyResponse, error) {
	rsp, err := c.PostIntegrationCreatePagerdutyWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePagerdutyResponse(rsp)
}

// PostIntegrationCreatePushbulletWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePushbulletResponse
func (c *ClientWithResponses) PostIntegrationCreatePushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error) {
	rsp, err := c.PostIntegrationCreatePushbulletWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushbulletResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushbulletWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error) {
	rsp, err := c.PostIntegrationCreatePushbullet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushbulletResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushbulletWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePushbulletFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushbulletResponse, error) {
	rsp, err := c.PostIntegrationCreatePushbulletWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushbulletResponse(rsp)
}

// PostIntegrationCreatePushoverWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreatePushoverResponse
func (c *ClientWithResponses) PostIntegrationCreatePushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error) {
	rsp, err := c.PostIntegrationCreatePushoverWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushoverResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushoverWithResponse(ctx context.Context, body PostIntegrationCreatePushoverJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error) {
	rsp, err := c.PostIntegrationCreatePushover(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushoverResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreatePushoverWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreatePushoverFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreatePushoverResponse, error) {
	rsp, err := c.PostIntegrationCreatePushoverWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreatePushoverResponse(rsp)
}

// PostIntegrationCreateSlackWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateSlackResponse
func (c *ClientWithResponses) PostIntegrationCreateSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error) {
	rsp, err := c.PostIntegrationCreateSlackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSlackResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateSlackWithResponse(ctx context.Context, body PostIntegrationCreateSlackJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error) {
	rsp, err := c.PostIntegrationCreateSlack(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSlackResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateSlackWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateSlackFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateSlackResponse, error) {
	rsp, err := c.PostIntegrationCreateSlackWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateSlackResponse(rsp)
}

// PostIntegrationCreateStatusWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateStatusResponse
func (c *ClientWithResponses) PostIntegrationCreateStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error) {
	rsp, err := c.PostIntegrationCreateStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatusResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatusWithResponse(ctx context.Context, body PostIntegrationCreateStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error) {
	rsp, err := c.PostIntegrationCreateStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatusResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatusWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateStatusFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatusResponse, error) {
	rsp, err := c.PostIntegrationCreateStatusWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatusResponse(rsp)
}

// PostIntegrationCreateStatuspageWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateStatuspageResponse
func (c *ClientWithResponses) PostIntegrationCreateStatuspageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error) {
	rsp, err := c.PostIntegrationCreateStatuspageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatuspageResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatuspageWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error) {
	rsp, err := c.PostIntegrationCreateStatuspage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatuspageResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateStatuspageWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateStatuspageFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateStatuspageResponse, error) {
	rsp, err := c.PostIntegrationCreateStatuspageWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateStatuspageResponse(rsp)
}

// PostIntegrationCreateTwitterWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateTwitterResponse
func (c *ClientWithResponses) PostIntegrationCreateTwitterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error) {
	rsp, err := c.PostIntegrationCreateTwitterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateTwitterResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateTwitterWithResponse(ctx context.Context, body PostIntegrationCreateTwitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error) {
	rsp, err := c.PostIntegrationCreateTwitter(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateTwitterResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateTwitterWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateTwitterFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateTwitterResponse, error) {
	rsp, err := c.PostIntegrationCreateTwitterWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateTwitterResponse(rsp)
}

// PostIntegrationCreateVictoropsWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateVictoropsResponse
func (c *ClientWithResponses) PostIntegrationCreateVictoropsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error) {
	rsp, err := c.PostIntegrationCreateVictoropsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateVictoropsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateVictoropsWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error) {
	rsp, err := c.PostIntegrationCreateVictorops(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateVictoropsResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateVictoropsWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateVictoropsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateVictoropsResponse, error) {
	rsp, err := c.PostIntegrationCreateVictoropsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateVictoropsResponse(rsp)
}

// PostIntegrationCreateWavefrontWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateWavefrontResponse
func (c *ClientWithResponses) PostIntegrationCreateWavefrontWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error) {
	rsp, err := c.PostIntegrationCreateWavefrontWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWavefrontResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWavefrontWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error) {
	rsp, err := c.PostIntegrationCreateWavefront(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWavefrontResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWavefrontWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateWavefrontFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWavefrontResponse, error) {
	rsp, err := c.PostIntegrationCreateWavefrontWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWavefrontResponse(rsp)
}

// PostIntegrationCreateWebhookWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateWebhookResponse
func (c *ClientWithResponses) PostIntegrationCreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error) {
	rsp, err := c.PostIntegrationCreateWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWebhookWithResponse(ctx context.Context, body PostIntegrationCreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error) {
	rsp, err := c.PostIntegrationCreateWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateWebhookWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateWebhookFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateWebhookResponse, error) {
	rsp, err := c.PostIntegrationCreateWebhookWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateWebhookResponse(rsp)
}

// PostIntegrationCreateZapierWithBodyWithResponse request with arbitrary body returning *PostIntegrationCreateZapierResponse
func (c *ClientWithResponses) PostIntegrationCreateZapierWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error) {
	rsp, err := c.PostIntegrationCreateZapierWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateZapierResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateZapierWithResponse(ctx context.Context, body PostIntegrationCreateZapierJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error) {
	rsp, err := c.PostIntegrationCreateZapier(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateZapierResponse(rsp)
}

func (c *ClientWithResponses) PostIntegrationCreateZapierWithFormdataBodyWithResponse(ctx context.Context, body PostIntegrationCreateZapierFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIntegrationCreateZapierResponse, error) {
	rsp, err := c.PostIntegrationCreateZapierWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIntegrationCreateZapierResponse(rsp)
}

// DeleteIntegrationDetailWithResponse request returning *DeleteIntegrationDetailResponse
func (c *ClientWithResponses) DeleteIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteIntegrationDetailResponse, error) {
	rsp, err := c.DeleteIntegrationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIntegrationDetailResponse(rsp)
}

// GetIntegrationDetailWithResponse request returning *GetIntegrationDetailResponse
func (c *ClientWithResponses) GetIntegrationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetIntegrationDetailResponse, error) {
	rsp, err := c.GetIntegrationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIntegrationDetailResponse(rsp)
}

// PatchIntegrationDetailWithBodyWithResponse request with arbitrary body returning *PatchIntegrationDetailResponse
func (c *ClientWithResponses) PatchIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error) {
	rsp, err := c.PatchIntegrationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIntegrationDetailWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error) {
	rsp, err := c.PatchIntegrationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIntegrationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchIntegrationDetailResponse, error) {
	rsp, err := c.PatchIntegrationDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIntegrationDetailResponse(rsp)
}

// PutIntegrationDetailWithBodyWithResponse request with arbitrary body returning *PutIntegrationDetailResponse
func (c *ClientWithResponses) PutIntegrationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error) {
	rsp, err := c.PutIntegrationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIntegrationDetailWithResponse(ctx context.Context, pk string, body PutIntegrationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error) {
	rsp, err := c.PutIntegrationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIntegrationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIntegrationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutIntegrationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutIntegrationDetailResponse, error) {
	rsp, err := c.PutIntegrationDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIntegrationDetailResponse(rsp)
}

// GetOutagelistWithResponse request returning *GetOutagelistResponse
func (c *ClientWithResponses) GetOutagelistWithResponse(ctx context.Context, params *GetOutagelistParams, reqEditors ...RequestEditorFn) (*GetOutagelistResponse, error) {
	rsp, err := c.GetOutagelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutagelistResponse(rsp)
}

// GetOutageDetailWithResponse request returning *GetOutageDetailResponse
func (c *ClientWithResponses) GetOutageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetOutageDetailResponse, error) {
	rsp, err := c.GetOutageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOutageDetailResponse(rsp)
}

// GetMonitoringServerListWithResponse request returning *GetMonitoringServerListResponse
func (c *ClientWithResponses) GetMonitoringServerListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMonitoringServerListResponse, error) {
	rsp, err := c.GetMonitoringServerList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitoringServerListResponse(rsp)
}

// GetPushnotificationlistWithResponse request returning *GetPushnotificationlistResponse
func (c *ClientWithResponses) GetPushnotificationlistWithResponse(ctx context.Context, params *GetPushnotificationlistParams, reqEditors ...RequestEditorFn) (*GetPushnotificationlistResponse, error) {
	rsp, err := c.GetPushnotificationlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPushnotificationlistResponse(rsp)
}

// PostPushnotificationlistWithBodyWithResponse request with arbitrary body returning *PostPushnotificationlistResponse
func (c *ClientWithResponses) PostPushnotificationlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error) {
	rsp, err := c.PostPushnotificationlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushnotificationlistResponse(rsp)
}

func (c *ClientWithResponses) PostPushnotificationlistWithResponse(ctx context.Context, body PostPushnotificationlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error) {
	rsp, err := c.PostPushnotificationlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushnotificationlistResponse(rsp)
}

func (c *ClientWithResponses) PostPushnotificationlistWithFormdataBodyWithResponse(ctx context.Context, body PostPushnotificationlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPushnotificationlistResponse, error) {
	rsp, err := c.PostPushnotificationlistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPushnotificationlistResponse(rsp)
}

// DeletePushNotificationDetailWithResponse request returning *DeletePushNotificationDetailResponse
func (c *ClientWithResponses) DeletePushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeletePushNotificationDetailResponse, error) {
	rsp, err := c.DeletePushNotificationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePushNotificationDetailResponse(rsp)
}

// GetPushNotificationDetailWithResponse request returning *GetPushNotificationDetailResponse
func (c *ClientWithResponses) GetPushNotificationDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetPushNotificationDetailResponse, error) {
	rsp, err := c.GetPushNotificationDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPushNotificationDetailResponse(rsp)
}

// PatchPushNotificationDetailWithBodyWithResponse request with arbitrary body returning *PatchPushNotificationDetailResponse
func (c *ClientWithResponses) PatchPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error) {
	rsp, err := c.PatchPushNotificationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchPushNotificationDetailWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error) {
	rsp, err := c.PatchPushNotificationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchPushNotificationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchPushNotificationDetailResponse, error) {
	rsp, err := c.PatchPushNotificationDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPushNotificationDetailResponse(rsp)
}

// PutPushNotificationDetailWithBodyWithResponse request with arbitrary body returning *PutPushNotificationDetailResponse
func (c *ClientWithResponses) PutPushNotificationDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error) {
	rsp, err := c.PutPushNotificationDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutPushNotificationDetailWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error) {
	rsp, err := c.PutPushNotificationDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushNotificationDetailResponse(rsp)
}

func (c *ClientWithResponses) PutPushNotificationDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutPushNotificationDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutPushNotificationDetailResponse, error) {
	rsp, err := c.PutPushNotificationDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPushNotificationDetailResponse(rsp)
}

// GetScheduledreportlistWithResponse request returning *GetScheduledreportlistResponse
func (c *ClientWithResponses) GetScheduledreportlistWithResponse(ctx context.Context, params *GetScheduledreportlistParams, reqEditors ...RequestEditorFn) (*GetScheduledreportlistResponse, error) {
	rsp, err := c.GetScheduledreportlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduledreportlistResponse(rsp)
}

// PostScheduledreportlistWithBodyWithResponse request with arbitrary body returning *PostScheduledreportlistResponse
func (c *ClientWithResponses) PostScheduledreportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error) {
	rsp, err := c.PostScheduledreportlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScheduledreportlistResponse(rsp)
}

func (c *ClientWithResponses) PostScheduledreportlistWithResponse(ctx context.Context, body PostScheduledreportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error) {
	rsp, err := c.PostScheduledreportlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScheduledreportlistResponse(rsp)
}

func (c *ClientWithResponses) PostScheduledreportlistWithFormdataBodyWithResponse(ctx context.Context, body PostScheduledreportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostScheduledreportlistResponse, error) {
	rsp, err := c.PostScheduledreportlistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostScheduledreportlistResponse(rsp)
}

// DeleteScheduledReportDetailWithResponse request returning *DeleteScheduledReportDetailResponse
func (c *ClientWithResponses) DeleteScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteScheduledReportDetailResponse, error) {
	rsp, err := c.DeleteScheduledReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScheduledReportDetailResponse(rsp)
}

// GetScheduledReportDetailWithResponse request returning *GetScheduledReportDetailResponse
func (c *ClientWithResponses) GetScheduledReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetScheduledReportDetailResponse, error) {
	rsp, err := c.GetScheduledReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScheduledReportDetailResponse(rsp)
}

// PatchScheduledReportDetailWithBodyWithResponse request with arbitrary body returning *PatchScheduledReportDetailResponse
func (c *ClientWithResponses) PatchScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error) {
	rsp, err := c.PatchScheduledReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchScheduledReportDetailWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error) {
	rsp, err := c.PatchScheduledReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchScheduledReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchScheduledReportDetailResponse, error) {
	rsp, err := c.PatchScheduledReportDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScheduledReportDetailResponse(rsp)
}

// PutScheduledReportDetailWithBodyWithResponse request with arbitrary body returning *PutScheduledReportDetailResponse
func (c *ClientWithResponses) PutScheduledReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error) {
	rsp, err := c.PutScheduledReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutScheduledReportDetailWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error) {
	rsp, err := c.PutScheduledReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScheduledReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutScheduledReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutScheduledReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutScheduledReportDetailResponse, error) {
	rsp, err := c.PutScheduledReportDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutScheduledReportDetailResponse(rsp)
}

// GetSlareportlistWithResponse request returning *GetSlareportlistResponse
func (c *ClientWithResponses) GetSlareportlistWithResponse(ctx context.Context, params *GetSlareportlistParams, reqEditors ...RequestEditorFn) (*GetSlareportlistResponse, error) {
	rsp, err := c.GetSlareportlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlareportlistResponse(rsp)
}

// PostSlareportlistWithBodyWithResponse request with arbitrary body returning *PostSlareportlistResponse
func (c *ClientWithResponses) PostSlareportlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error) {
	rsp, err := c.PostSlareportlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSlareportlistResponse(rsp)
}

func (c *ClientWithResponses) PostSlareportlistWithResponse(ctx context.Context, body PostSlareportlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error) {
	rsp, err := c.PostSlareportlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSlareportlistResponse(rsp)
}

func (c *ClientWithResponses) PostSlareportlistWithFormdataBodyWithResponse(ctx context.Context, body PostSlareportlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSlareportlistResponse, error) {
	rsp, err := c.PostSlareportlistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSlareportlistResponse(rsp)
}

// DeleteSlaReportDetailWithResponse request returning *DeleteSlaReportDetailResponse
func (c *ClientWithResponses) DeleteSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteSlaReportDetailResponse, error) {
	rsp, err := c.DeleteSlaReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSlaReportDetailResponse(rsp)
}

// GetSlaReportDetailWithResponse request returning *GetSlaReportDetailResponse
func (c *ClientWithResponses) GetSlaReportDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetSlaReportDetailResponse, error) {
	rsp, err := c.GetSlaReportDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlaReportDetailResponse(rsp)
}

// PatchSlaReportDetailWithBodyWithResponse request with arbitrary body returning *PatchSlaReportDetailResponse
func (c *ClientWithResponses) PatchSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error) {
	rsp, err := c.PatchSlaReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchSlaReportDetailWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error) {
	rsp, err := c.PatchSlaReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchSlaReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchSlaReportDetailResponse, error) {
	rsp, err := c.PatchSlaReportDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSlaReportDetailResponse(rsp)
}

// PutSlaReportDetailWithBodyWithResponse request with arbitrary body returning *PutSlaReportDetailResponse
func (c *ClientWithResponses) PutSlaReportDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error) {
	rsp, err := c.PutSlaReportDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutSlaReportDetailWithResponse(ctx context.Context, pk string, body PutSlaReportDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error) {
	rsp, err := c.PutSlaReportDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlaReportDetailResponse(rsp)
}

func (c *ClientWithResponses) PutSlaReportDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutSlaReportDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutSlaReportDetailResponse, error) {
	rsp, err := c.PutSlaReportDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSlaReportDetailResponse(rsp)
}

// GetSlaReportStatsWithResponse request returning *GetSlaReportStatsResponse
func (c *ClientWithResponses) GetSlaReportStatsWithResponse(ctx context.Context, pk string, params *GetSlaReportStatsParams, reqEditors ...RequestEditorFn) (*GetSlaReportStatsResponse, error) {
	rsp, err := c.GetSlaReportStats(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSlaReportStatsResponse(rsp)
}

// GetStatuspagelistWithResponse request returning *GetStatuspagelistResponse
func (c *ClientWithResponses) GetStatuspagelistWithResponse(ctx context.Context, params *GetStatuspagelistParams, reqEditors ...RequestEditorFn) (*GetStatuspagelistResponse, error) {
	rsp, err := c.GetStatuspagelist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspagelistResponse(rsp)
}

// PostStatuspagelistWithBodyWithResponse request with arbitrary body returning *PostStatuspagelistResponse
func (c *ClientWithResponses) PostStatuspagelistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error) {
	rsp, err := c.PostStatuspagelistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatuspagelistResponse(rsp)
}

func (c *ClientWithResponses) PostStatuspagelistWithResponse(ctx context.Context, body PostStatuspagelistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error) {
	rsp, err := c.PostStatuspagelist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatuspagelistResponse(rsp)
}

func (c *ClientWithResponses) PostStatuspagelistWithFormdataBodyWithResponse(ctx context.Context, body PostStatuspagelistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostStatuspagelistResponse, error) {
	rsp, err := c.PostStatuspagelistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStatuspagelistResponse(rsp)
}

// DeleteStatuspageDetailWithResponse request returning *DeleteStatuspageDetailResponse
func (c *ClientWithResponses) DeleteStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteStatuspageDetailResponse, error) {
	rsp, err := c.DeleteStatuspageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStatuspageDetailResponse(rsp)
}

// GetStatuspageDetailWithResponse request returning *GetStatuspageDetailResponse
func (c *ClientWithResponses) GetStatuspageDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageDetailResponse, error) {
	rsp, err := c.GetStatuspageDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageDetailResponse(rsp)
}

// PatchStatuspageDetailWithBodyWithResponse request with arbitrary body returning *PatchStatuspageDetailResponse
func (c *ClientWithResponses) PatchStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error) {
	rsp, err := c.PatchStatuspageDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchStatuspageDetailWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error) {
	rsp, err := c.PatchStatuspageDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchStatuspageDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchStatuspageDetailResponse, error) {
	rsp, err := c.PatchStatuspageDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchStatuspageDetailResponse(rsp)
}

// PutStatuspageDetailWithBodyWithResponse request with arbitrary body returning *PutStatuspageDetailResponse
func (c *ClientWithResponses) PutStatuspageDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error) {
	rsp, err := c.PutStatuspageDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PutStatuspageDetailWithResponse(ctx context.Context, pk string, body PutStatuspageDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error) {
	rsp, err := c.PutStatuspageDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatuspageDetailResponse(rsp)
}

func (c *ClientWithResponses) PutStatuspageDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutStatuspageDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutStatuspageDetailResponse, error) {
	rsp, err := c.PutStatuspageDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStatuspageDetailResponse(rsp)
}

// GetStatuspageCurrentStatusWithResponse request returning *GetStatuspageCurrentStatusResponse
func (c *ClientWithResponses) GetStatuspageCurrentStatusWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetStatuspageCurrentStatusResponse, error) {
	rsp, err := c.GetStatuspageCurrentStatus(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageCurrentStatusResponse(rsp)
}

// GetStatuspageHistoryWithResponse request returning *GetStatuspageHistoryResponse
func (c *ClientWithResponses) GetStatuspageHistoryWithResponse(ctx context.Context, pk string, params *GetStatuspageHistoryParams, reqEditors ...RequestEditorFn) (*GetStatuspageHistoryResponse, error) {
	rsp, err := c.GetStatuspageHistory(ctx, pk, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatuspageHistoryResponse(rsp)
}

// GetComponentslistWithResponse request returning *GetComponentslistResponse
func (c *ClientWithResponses) GetComponentslistWithResponse(ctx context.Context, statuspageId string, params *GetComponentslistParams, reqEditors ...RequestEditorFn) (*GetComponentslistResponse, error) {
	rsp, err := c.GetComponentslist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentslistResponse(rsp)
}

// PostComponentslistWithBodyWithResponse request with arbitrary body returning *PostComponentslistResponse
func (c *ClientWithResponses) PostComponentslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error) {
	rsp, err := c.PostComponentslistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentslistResponse(rsp)
}

func (c *ClientWithResponses) PostComponentslistWithResponse(ctx context.Context, statuspageId string, body PostComponentslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error) {
	rsp, err := c.PostComponentslist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentslistResponse(rsp)
}

func (c *ClientWithResponses) PostComponentslistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostComponentslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostComponentslistResponse, error) {
	rsp, err := c.PostComponentslistWithFormdataBody(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComponentslistResponse(rsp)
}

// DeleteComponentDetailWithResponse request returning *DeleteComponentDetailResponse
func (c *ClientWithResponses) DeleteComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteComponentDetailResponse, error) {
	rsp, err := c.DeleteComponentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComponentDetailResponse(rsp)
}

// GetComponentDetailWithResponse request returning *GetComponentDetailResponse
func (c *ClientWithResponses) GetComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetComponentDetailResponse, error) {
	rsp, err := c.GetComponentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComponentDetailResponse(rsp)
}

// PatchComponentDetailWithBodyWithResponse request with arbitrary body returning *PatchComponentDetailResponse
func (c *ClientWithResponses) PatchComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error) {
	rsp, err := c.PatchComponentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error) {
	rsp, err := c.PatchComponentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchComponentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchComponentDetailResponse, error) {
	rsp, err := c.PatchComponentDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComponentDetailResponse(rsp)
}

// PutComponentDetailWithBodyWithResponse request with arbitrary body returning *PutComponentDetailResponse
func (c *ClientWithResponses) PutComponentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error) {
	rsp, err := c.PutComponentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutComponentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error) {
	rsp, err := c.PutComponentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutComponentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutComponentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutComponentDetailResponse, error) {
	rsp, err := c.PutComponentDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComponentDetailResponse(rsp)
}

// GetIncidentlistWithResponse request returning *GetIncidentlistResponse
func (c *ClientWithResponses) GetIncidentlistWithResponse(ctx context.Context, statuspageId string, params *GetIncidentlistParams, reqEditors ...RequestEditorFn) (*GetIncidentlistResponse, error) {
	rsp, err := c.GetIncidentlist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentlistResponse(rsp)
}

// PostIncidentlistWithBodyWithResponse request with arbitrary body returning *PostIncidentlistResponse
func (c *ClientWithResponses) PostIncidentlistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error) {
	rsp, err := c.PostIncidentlistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentlistResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentlistWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error) {
	rsp, err := c.PostIncidentlist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentlistResponse(rsp)
}

func (c *ClientWithResponses) PostIncidentlistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostIncidentlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostIncidentlistResponse, error) {
	rsp, err := c.PostIncidentlistWithFormdataBody(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIncidentlistResponse(rsp)
}

// DeleteIncidentDetailWithResponse request returning *DeleteIncidentDetailResponse
func (c *ClientWithResponses) DeleteIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteIncidentDetailResponse, error) {
	rsp, err := c.DeleteIncidentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncidentDetailResponse(rsp)
}

// GetIncidentDetailWithResponse request returning *GetIncidentDetailResponse
func (c *ClientWithResponses) GetIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetIncidentDetailResponse, error) {
	rsp, err := c.GetIncidentDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentDetailResponse(rsp)
}

// PatchIncidentDetailWithBodyWithResponse request with arbitrary body returning *PatchIncidentDetailResponse
func (c *ClientWithResponses) PatchIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error) {
	rsp, err := c.PatchIncidentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error) {
	rsp, err := c.PatchIncidentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchIncidentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchIncidentDetailResponse, error) {
	rsp, err := c.PatchIncidentDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchIncidentDetailResponse(rsp)
}

// PutIncidentDetailWithBodyWithResponse request with arbitrary body returning *PutIncidentDetailResponse
func (c *ClientWithResponses) PutIncidentDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error) {
	rsp, err := c.PutIncidentDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIncidentDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error) {
	rsp, err := c.PutIncidentDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIncidentDetailResponse(rsp)
}

func (c *ClientWithResponses) PutIncidentDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutIncidentDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutIncidentDetailResponse, error) {
	rsp, err := c.PutIncidentDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIncidentDetailResponse(rsp)
}

// GetMetricslistWithResponse request returning *GetMetricslistResponse
func (c *ClientWithResponses) GetMetricslistWithResponse(ctx context.Context, statuspageId string, params *GetMetricslistParams, reqEditors ...RequestEditorFn) (*GetMetricslistResponse, error) {
	rsp, err := c.GetMetricslist(ctx, statuspageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricslistResponse(rsp)
}

// PostMetricslistWithBodyWithResponse request with arbitrary body returning *PostMetricslistResponse
func (c *ClientWithResponses) PostMetricslistWithBodyWithResponse(ctx context.Context, statuspageId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error) {
	rsp, err := c.PostMetricslistWithBody(ctx, statuspageId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetricslistResponse(rsp)
}

func (c *ClientWithResponses) PostMetricslistWithResponse(ctx context.Context, statuspageId string, body PostMetricslistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error) {
	rsp, err := c.PostMetricslist(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetricslistResponse(rsp)
}

func (c *ClientWithResponses) PostMetricslistWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, body PostMetricslistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMetricslistResponse, error) {
	rsp, err := c.PostMetricslistWithFormdataBody(ctx, statuspageId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMetricslistResponse(rsp)
}

// DeleteMetricDetailWithResponse request returning *DeleteMetricDetailResponse
func (c *ClientWithResponses) DeleteMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*DeleteMetricDetailResponse, error) {
	rsp, err := c.DeleteMetricDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMetricDetailResponse(rsp)
}

// GetMetricDetailWithResponse request returning *GetMetricDetailResponse
func (c *ClientWithResponses) GetMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, reqEditors ...RequestEditorFn) (*GetMetricDetailResponse, error) {
	rsp, err := c.GetMetricDetail(ctx, statuspageId, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMetricDetailResponse(rsp)
}

// PatchMetricDetailWithBodyWithResponse request with arbitrary body returning *PatchMetricDetailResponse
func (c *ClientWithResponses) PatchMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error) {
	rsp, err := c.PatchMetricDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error) {
	rsp, err := c.PatchMetricDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchMetricDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PatchMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchMetricDetailResponse, error) {
	rsp, err := c.PatchMetricDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchMetricDetailResponse(rsp)
}

// PutMetricDetailWithBodyWithResponse request with arbitrary body returning *PutMetricDetailResponse
func (c *ClientWithResponses) PutMetricDetailWithBodyWithResponse(ctx context.Context, statuspageId string, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error) {
	rsp, err := c.PutMetricDetailWithBody(ctx, statuspageId, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PutMetricDetailWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error) {
	rsp, err := c.PutMetricDetail(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMetricDetailResponse(rsp)
}

func (c *ClientWithResponses) PutMetricDetailWithFormdataBodyWithResponse(ctx context.Context, statuspageId string, pk string, body PutMetricDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutMetricDetailResponse, error) {
	rsp, err := c.PutMetricDetailWithFormdataBody(ctx, statuspageId, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMetricDetailResponse(rsp)
}

// GetUserlistWithResponse request returning *GetUserlistResponse
func (c *ClientWithResponses) GetUserlistWithResponse(ctx context.Context, params *GetUserlistParams, reqEditors ...RequestEditorFn) (*GetUserlistResponse, error) {
	rsp, err := c.GetUserlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserlistResponse(rsp)
}

// PostUserlistWithBodyWithResponse request with arbitrary body returning *PostUserlistResponse
func (c *ClientWithResponses) PostUserlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error) {
	rsp, err := c.PostUserlistWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserlistResponse(rsp)
}

func (c *ClientWithResponses) PostUserlistWithResponse(ctx context.Context, body PostUserlistJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error) {
	rsp, err := c.PostUserlist(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserlistResponse(rsp)
}

func (c *ClientWithResponses) PostUserlistWithFormdataBodyWithResponse(ctx context.Context, body PostUserlistFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostUserlistResponse, error) {
	rsp, err := c.PostUserlistWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserlistResponse(rsp)
}

// DeleteUserDetailWithResponse request returning *DeleteUserDetailResponse
func (c *ClientWithResponses) DeleteUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*DeleteUserDetailResponse, error) {
	rsp, err := c.DeleteUserDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserDetailResponse(rsp)
}

// GetUserDetailWithResponse request returning *GetUserDetailResponse
func (c *ClientWithResponses) GetUserDetailWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*GetUserDetailResponse, error) {
	rsp, err := c.GetUserDetail(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDetailResponse(rsp)
}

// PatchUserDetailWithBodyWithResponse request with arbitrary body returning *PatchUserDetailResponse
func (c *ClientWithResponses) PatchUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error) {
	rsp, err := c.PatchUserDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchUserDetailWithResponse(ctx context.Context, pk string, body PatchUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error) {
	rsp, err := c.PatchUserDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PatchUserDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PatchUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PatchUserDetailResponse, error) {
	rsp, err := c.PatchUserDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUserDetailResponse(rsp)
}

// PutUserDetailWithBodyWithResponse request with arbitrary body returning *PutUserDetailResponse
func (c *ClientWithResponses) PutUserDetailWithBodyWithResponse(ctx context.Context, pk string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error) {
	rsp, err := c.PutUserDetailWithBody(ctx, pk, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PutUserDetailWithResponse(ctx context.Context, pk string, body PutUserDetailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error) {
	rsp, err := c.PutUserDetail(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDetailResponse(rsp)
}

func (c *ClientWithResponses) PutUserDetailWithFormdataBodyWithResponse(ctx context.Context, pk string, body PutUserDetailFormdataRequestBody, reqEditors ...RequestEditorFn) (*PutUserDetailResponse, error) {
	rsp, err := c.PutUserDetailWithFormdataBody(ctx, pk, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUserDetailResponse(rsp)
}

// PostUserDeactivateWithResponse request returning *PostUserDeactivateResponse
func (c *ClientWithResponses) PostUserDeactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserDeactivateResponse, error) {
	rsp, err := c.PostUserDeactivate(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserDeactivateResponse(rsp)
}

// PostUserReactivateWithResponse request returning *PostUserReactivateResponse
func (c *ClientWithResponses) PostUserReactivateWithResponse(ctx context.Context, pk string, reqEditors ...RequestEditorFn) (*PostUserReactivateResponse, error) {
	rsp, err := c.PostUserReactivate(ctx, pk, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserReactivateResponse(rsp)
}

// ParseGetAlertlistResponse parses an HTTP response from a GetAlertlistWithResponse call
func ParseGetAlertlistResponse(rsp *http.Response) (*GetAlertlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Incidents `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAlertAlertRootCauseResponse parses an HTTP response from a GetAlertAlertRootCauseWithResponse call
func ParseGetAlertAlertRootCauseResponse(rsp *http.Response) (*GetAlertAlertRootCauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertAlertRootCauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertDetailResponse parses an HTTP response from a GetAlertDetailWithResponse call
func ParseGetAlertDetailResponse(rsp *http.Response) (*GetAlertDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incidents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAlertIgnoreResponse parses an HTTP response from a PostAlertIgnoreWithResponse call
func ParsePostAlertIgnoreResponse(rsp *http.Response) (*PostAlertIgnoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAlertIgnoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthListResponse parses an HTTP response from a GetAuthListWithResponse call
func ParseGetAuthListResponse(rsp *http.Response) (*GetAuthListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthAccountUsageResponse parses an HTTP response from a GetAuthAccountUsageWithResponse call
func ParseGetAuthAccountUsageResponse(rsp *http.Response) (*GetAuthAccountUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthAccountUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthTokenWithTOTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRequestMagicLinkResponse parses an HTTP response from a GetRequestMagicLinkWithResponse call
func ParseGetRequestMagicLinkResponse(rsp *http.Response) (*GetRequestMagicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestMagicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthMeResponse parses an HTTP response from a GetAuthMeWithResponse call
func ParseGetAuthMeResponse(rsp *http.Response) (*GetAuthMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthResetPasswordResponse parses an HTTP response from a GetAuthResetPasswordWithResponse call
func ParseGetAuthResetPasswordResponse(rsp *http.Response) (*GetAuthResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PasswordReset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthResetPasswordResponse parses an HTTP response from a PostAuthResetPasswordWithResponse call
func ParsePostAuthResetPasswordResponse(rsp *http.Response) (*PostAuthResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PasswordReset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSendMagicLinkResponse parses an HTTP response from a PostSendMagicLinkWithResponse call
func ParsePostSendMagicLinkResponse(rsp *http.Response) (*PostSendMagicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSendMagicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MagicLink
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthSubaccountsResponse parses an HTTP response from a GetAuthSubaccountsWithResponse call
func ParseGetAuthSubaccountsResponse(rsp *http.Response) (*GetAuthSubaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSubaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthSubaccountsResponse parses an HTTP response from a PostAuthSubaccountsWithResponse call
func ParsePostAuthSubaccountsResponse(rsp *http.Response) (*PostAuthSubaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSubaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthSubaccountResponse parses an HTTP response from a GetAuthSubaccountWithResponse call
func ParseGetAuthSubaccountResponse(rsp *http.Response) (*GetAuthSubaccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthSubaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAuthSubaccountResponse parses an HTTP response from a PatchAuthSubaccountWithResponse call
func ParsePatchAuthSubaccountResponse(rsp *http.Response) (*PatchAuthSubaccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAuthSubaccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Subaccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAuthSubaccountPacksResponse parses an HTTP response from a PostAuthSubaccountPacksWithResponse call
func ParsePostAuthSubaccountPacksResponse(rsp *http.Response) (*PostAuthSubaccountPacksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSubaccountPacksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubaccountPacks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostValidateMagicLinkResponse parses an HTTP response from a PostValidateMagicLinkWithResponse call
func ParsePostValidateMagicLinkResponse(rsp *http.Response) (*PostValidateMagicLinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostValidateMagicLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServicetaglistResponse parses an HTTP response from a GetServicetaglistWithResponse call
func ParseGetServicetaglistResponse(rsp *http.Response) (*GetServicetaglistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicetaglistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int        `json:"count,omitempty"`
			Next     *string     `json:"next"`
			Previous *string     `json:"previous"`
			Results  *[]CheckTag `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServicetaglistResponse parses an HTTP response from a PostServicetaglistWithResponse call
func ParsePostServicetaglistResponse(rsp *http.Response) (*PostServicetaglistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicetaglistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceTagDetailResponse parses an HTTP response from a DeleteServiceTagDetailWithResponse call
func ParseDeleteServiceTagDetailResponse(rsp *http.Response) (*DeleteServiceTagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceTagDetailResponse parses an HTTP response from a GetServiceTagDetailWithResponse call
func ParseGetServiceTagDetailResponse(rsp *http.Response) (*GetServiceTagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceTagDetailResponse parses an HTTP response from a PatchServiceTagDetailWithResponse call
func ParsePatchServiceTagDetailResponse(rsp *http.Response) (*PatchServiceTagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceTagDetailResponse parses an HTTP response from a PutServiceTagDetailWithResponse call
func ParsePutServiceTagDetailResponse(rsp *http.Response) (*PutServiceTagDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceTagDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServicelistResponse parses an HTTP response from a GetServicelistWithResponse call
func ParseGetServicelistResponse(rsp *http.Response) (*GetServicelistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServicelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int      `json:"count,omitempty"`
			Next     *string   `json:"next"`
			Previous *string   `json:"previous"`
			Results  *[]Checks `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateApiResponse parses an HTTP response from a PostServiceCreateApiWithResponse call
func ParsePostServiceCreateApiResponse(rsp *http.Response) (*PostServiceCreateApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksAPI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateBlacklistResponse parses an HTTP response from a PostServiceCreateBlacklistWithResponse call
func ParsePostServiceCreateBlacklistResponse(rsp *http.Response) (*PostServiceCreateBlacklistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateBlacklistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBLACKLIST
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateDnsResponse parses an HTTP response from a PostServiceCreateDnsWithResponse call
func ParsePostServiceCreateDnsResponse(rsp *http.Response) (*PostServiceCreateDnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateDnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksDNS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateGroupResponse parses an HTTP response from a PostServiceCreateGroupWithResponse call
func ParsePostServiceCreateGroupResponse(rsp *http.Response) (*PostServiceCreateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksGROUP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateHeartbeatResponse parses an HTTP response from a PostServiceCreateHeartbeatWithResponse call
func ParsePostServiceCreateHeartbeatResponse(rsp *http.Response) (*PostServiceCreateHeartbeatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateHeartbeatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksHEARTBEAT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateHttpResponse parses an HTTP response from a PostServiceCreateHttpWithResponse call
func ParsePostServiceCreateHttpResponse(rsp *http.Response) (*PostServiceCreateHttpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateHttpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksHTTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateIcmpResponse parses an HTTP response from a PostServiceCreateIcmpWithResponse call
func ParsePostServiceCreateIcmpResponse(rsp *http.Response) (*PostServiceCreateIcmpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateIcmpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksICMP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateImapResponse parses an HTTP response from a PostServiceCreateImapWithResponse call
func ParsePostServiceCreateImapResponse(rsp *http.Response) (*PostServiceCreateImapResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateImapResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksIMAP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateMalwareResponse parses an HTTP response from a PostServiceCreateMalwareWithResponse call
func ParsePostServiceCreateMalwareResponse(rsp *http.Response) (*PostServiceCreateMalwareResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateMalwareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksMALWARE
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateNtpResponse parses an HTTP response from a PostServiceCreateNtpWithResponse call
func ParsePostServiceCreateNtpResponse(rsp *http.Response) (*PostServiceCreateNtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateNtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksNTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreatePopResponse parses an HTTP response from a PostServiceCreatePopWithResponse call
func ParsePostServiceCreatePopResponse(rsp *http.Response) (*PostServiceCreatePopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreatePopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksPOP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateRumResponse parses an HTTP response from a PostServiceCreateRumWithResponse call
func ParsePostServiceCreateRumResponse(rsp *http.Response) (*PostServiceCreateRumResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateRumResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksRUM
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateRum2Response parses an HTTP response from a PostServiceCreateRum2WithResponse call
func ParsePostServiceCreateRum2Response(rsp *http.Response) (*PostServiceCreateRum2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateRum2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksRUM2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSmtpResponse parses an HTTP response from a PostServiceCreateSmtpWithResponse call
func ParsePostServiceCreateSmtpResponse(rsp *http.Response) (*PostServiceCreateSmtpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSmtpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSMTP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSshResponse parses an HTTP response from a PostServiceCreateSshWithResponse call
func ParsePostServiceCreateSshResponse(rsp *http.Response) (*PostServiceCreateSshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSSH
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateSslCertResponse parses an HTTP response from a PostServiceCreateSslCertWithResponse call
func ParsePostServiceCreateSslCertResponse(rsp *http.Response) (*PostServiceCreateSslCertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateSslCertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksSSLCERT
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateTcpResponse parses an HTTP response from a PostServiceCreateTcpWithResponse call
func ParsePostServiceCreateTcpResponse(rsp *http.Response) (*PostServiceCreateTcpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateTcpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksTCP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateTransactionResponse parses an HTTP response from a PostServiceCreateTransactionWithResponse call
func ParsePostServiceCreateTransactionResponse(rsp *http.Response) (*PostServiceCreateTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksTRANSACTION
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateUdpResponse parses an HTTP response from a PostServiceCreateUdpWithResponse call
func ParsePostServiceCreateUdpResponse(rsp *http.Response) (*PostServiceCreateUdpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateUdpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksUDP
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateWebhookResponse parses an HTTP response from a PostServiceCreateWebhookWithResponse call
func ParsePostServiceCreateWebhookResponse(rsp *http.Response) (*PostServiceCreateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksWEBHOOK
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceCreateWhoisResponse parses an HTTP response from a PostServiceCreateWhoisWithResponse call
func ParsePostServiceCreateWhoisResponse(rsp *http.Response) (*PostServiceCreateWhoisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceCreateWhoisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksWHOIS
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkEscalationsResponse parses an HTTP response from a PatchServiceBulkEscalationsWithResponse call
func ParsePatchServiceBulkEscalationsResponse(rsp *http.Response) (*PatchServiceBulkEscalationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkEscalationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdateEscalations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkMaintenanceResponse parses an HTTP response from a PatchServiceBulkMaintenanceWithResponse call
func ParsePatchServiceBulkMaintenanceResponse(rsp *http.Response) (*PatchServiceBulkMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdateMaintenance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkPauseResponse parses an HTTP response from a PatchServiceBulkPauseWithResponse call
func ParsePatchServiceBulkPauseResponse(rsp *http.Response) (*PatchServiceBulkPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkChecksAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkResumeResponse parses an HTTP response from a PatchServiceBulkResumeWithResponse call
func ParsePatchServiceBulkResumeResponse(rsp *http.Response) (*PatchServiceBulkResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BulkChecksAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceBulkStatsResponse parses an HTTP response from a GetServiceBulkStatsWithResponse call
func ParseGetServiceBulkStatsResponse(rsp *http.Response) (*GetServiceBulkStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceBulkStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceBulkUpdateResponse parses an HTTP response from a PatchServiceBulkUpdateWithResponse call
func ParsePatchServiceBulkUpdateResponse(rsp *http.Response) (*PatchServiceBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChecksBulkUpdate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceShowServiceDefsResponse parses an HTTP response from a GetServiceShowServiceDefsWithResponse call
func ParseGetServiceShowServiceDefsResponse(rsp *http.Response) (*GetServiceShowServiceDefsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceShowServiceDefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceShowLocationsResponse parses an HTTP response from a GetServiceShowLocationsWithResponse call
func ParseGetServiceShowLocationsResponse(rsp *http.Response) (*GetServiceShowLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceShowLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteServiceDetailResponse parses an HTTP response from a DeleteServiceDetailWithResponse call
func ParseDeleteServiceDetailResponse(rsp *http.Response) (*DeleteServiceDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceDetailResponse parses an HTTP response from a GetServiceDetailWithResponse call
func ParseGetServiceDetailResponse(rsp *http.Response) (*GetServiceDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceDetailResponse parses an HTTP response from a PatchServiceDetailWithResponse call
func ParsePatchServiceDetailResponse(rsp *http.Response) (*PatchServiceDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutServiceDetailResponse parses an HTTP response from a PutServiceDetailWithResponse call
func ParsePutServiceDetailResponse(rsp *http.Response) (*PutServiceDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutServiceDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Checks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddContactGroupsResponse parses an HTTP response from a PatchServiceAddContactGroupsWithResponse call
func ParsePatchServiceAddContactGroupsResponse(rsp *http.Response) (*PatchServiceAddContactGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckContactGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddLocationsResponse parses an HTTP response from a PatchServiceAddLocationsWithResponse call
func ParsePatchServiceAddLocationsResponse(rsp *http.Response) (*PatchServiceAddLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceAddTagsResponse parses an HTTP response from a PatchServiceAddTagsWithResponse call
func ParsePatchServiceAddTagsResponse(rsp *http.Response) (*PatchServiceAddTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceAddTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceAnalysisResponse parses an HTTP response from a GetServiceAnalysisWithResponse call
func ParseGetServiceAnalysisResponse(rsp *http.Response) (*GetServiceAnalysisResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceAnalysisResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceCurrentStatusResponse parses an HTTP response from a GetServiceCurrentStatusWithResponse call
func ParseGetServiceCurrentStatusResponse(rsp *http.Response) (*GetServiceCurrentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceCurrentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchServiceSetEscalationsResponse parses an HTTP response from a PatchServiceSetEscalationsWithResponse call
func ParsePatchServiceSetEscalationsResponse(rsp *http.Response) (*PatchServiceSetEscalationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceSetEscalationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckEscalations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceSetMaintenanceResponse parses an HTTP response from a PatchServiceSetMaintenanceWithResponse call
func ParsePatchServiceSetMaintenanceResponse(rsp *http.Response) (*PatchServiceSetMaintenanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceSetMaintenanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckMaintenance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServicePauseResponse parses an HTTP response from a PostServicePauseWithResponse call
func ParsePostServicePauseResponse(rsp *http.Response) (*PostServicePauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServicePauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchServiceReplaceContactGroupsResponse parses an HTTP response from a PatchServiceReplaceContactGroupsWithResponse call
func ParsePatchServiceReplaceContactGroupsResponse(rsp *http.Response) (*PatchServiceReplaceContactGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceContactGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckContactGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceReplaceLocationsResponse parses an HTTP response from a PatchServiceReplaceLocationsWithResponse call
func ParsePatchServiceReplaceLocationsResponse(rsp *http.Response) (*PatchServiceReplaceLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckLocations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchServiceReplaceTagsResponse parses an HTTP response from a PatchServiceReplaceTagsWithResponse call
func ParsePatchServiceReplaceTagsResponse(rsp *http.Response) (*PatchServiceReplaceTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchServiceReplaceTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetServiceResponseTimeDatapointsResponse parses an HTTP response from a GetServiceResponseTimeDatapointsWithResponse call
func ParseGetServiceResponseTimeDatapointsResponse(rsp *http.Response) (*GetServiceResponseTimeDatapointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceResponseTimeDatapointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostServiceResumeResponse parses an HTTP response from a PostServiceResumeWithResponse call
func ParsePostServiceResumeResponse(rsp *http.Response) (*PostServiceResumeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostServiceResumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetServiceStatsResponse parses an HTTP response from a GetServiceStatsWithResponse call
func ParseGetServiceStatsResponse(rsp *http.Response) (*GetServiceStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetContactgrouplistResponse parses an HTTP response from a GetContactgrouplistWithResponse call
func ParseGetContactgrouplistResponse(rsp *http.Response) (*GetContactgrouplistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactgrouplistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int            `json:"count,omitempty"`
			Next     *string         `json:"next"`
			Previous *string         `json:"previous"`
			Results  *[]ContactGroup `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContactgrouplistResponse parses an HTTP response from a PostContactgrouplistWithResponse call
func ParsePostContactgrouplistResponse(rsp *http.Response) (*PostContactgrouplistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContactgrouplistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteContactGroupDetailResponse parses an HTTP response from a DeleteContactGroupDetailWithResponse call
func ParseDeleteContactGroupDetailResponse(rsp *http.Response) (*DeleteContactGroupDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContactGroupDetailResponse parses an HTTP response from a GetContactGroupDetailWithResponse call
func ParseGetContactGroupDetailResponse(rsp *http.Response) (*GetContactGroupDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchContactGroupDetailResponse parses an HTTP response from a PatchContactGroupDetailWithResponse call
func ParsePatchContactGroupDetailResponse(rsp *http.Response) (*PatchContactGroupDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutContactGroupDetailResponse parses an HTTP response from a PutContactGroupDetailWithResponse call
func ParsePutContactGroupDetailResponse(rsp *http.Response) (*PutContactGroupDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutContactGroupDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchContactGroupSetOnCallHoursResponse parses an HTTP response from a PatchContactGroupSetOnCallHoursWithResponse call
func ParsePatchContactGroupSetOnCallHoursResponse(rsp *http.Response) (*PatchContactGroupSetOnCallHoursResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchContactGroupSetOnCallHoursResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactGroupOnCallSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardlistResponse parses an HTTP response from a GetDashboardlistWithResponse call
func ParseGetDashboardlistResponse(rsp *http.Response) (*GetDashboardlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Dashboard `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDashboardlistResponse parses an HTTP response from a PostDashboardlistWithResponse call
func ParsePostDashboardlistResponse(rsp *http.Response) (*PostDashboardlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDashboardlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardDefaultResponse parses an HTTP response from a GetDashboardDefaultWithResponse call
func ParseGetDashboardDefaultResponse(rsp *http.Response) (*GetDashboardDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDashboardDetailResponse parses an HTTP response from a DeleteDashboardDetailWithResponse call
func ParseDeleteDashboardDetailResponse(rsp *http.Response) (*DeleteDashboardDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDashboardDetailResponse parses an HTTP response from a GetDashboardDetailWithResponse call
func ParseGetDashboardDetailResponse(rsp *http.Response) (*GetDashboardDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchDashboardDetailResponse parses an HTTP response from a PatchDashboardDetailWithResponse call
func ParsePatchDashboardDetailResponse(rsp *http.Response) (*PatchDashboardDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDashboardDetailResponse parses an HTTP response from a PutDashboardDetailWithResponse call
func ParsePutDashboardDetailResponse(rsp *http.Response) (*PutDashboardDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDashboardDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dashboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDashboardStatsResponse parses an HTTP response from a GetDashboardStatsWithResponse call
func ParseGetDashboardStatsResponse(rsp *http.Response) (*GetDashboardStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDashboardStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DashboardStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIntegrationlistResponse parses an HTTP response from a GetIntegrationlistWithResponse call
func ParseGetIntegrationlistResponse(rsp *http.Response) (*GetIntegrationlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int           `json:"count,omitempty"`
			Next     *string        `json:"next"`
			Previous *string        `json:"previous"`
			Results  *[]Integration `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateCachetResponse parses an HTTP response from a PostIntegrationCreateCachetWithResponse call
func ParsePostIntegrationCreateCachetResponse(rsp *http.Response) (*PostIntegrationCreateCachetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateCachetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationCachet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateDatadogResponse parses an HTTP response from a PostIntegrationCreateDatadogWithResponse call
func ParsePostIntegrationCreateDatadogResponse(rsp *http.Response) (*PostIntegrationCreateDatadogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateDatadogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationDatadog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateGeckoboardResponse parses an HTTP response from a PostIntegrationCreateGeckoboardWithResponse call
func ParsePostIntegrationCreateGeckoboardResponse(rsp *http.Response) (*PostIntegrationCreateGeckoboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateGeckoboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationGeckoboard
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateJiraservicedeskResponse parses an HTTP response from a PostIntegrationCreateJiraservicedeskWithResponse call
func ParsePostIntegrationCreateJiraservicedeskResponse(rsp *http.Response) (*PostIntegrationCreateJiraservicedeskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateJiraservicedeskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationJiraservicedesk
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateKlipfolioResponse parses an HTTP response from a PostIntegrationCreateKlipfolioWithResponse call
func ParsePostIntegrationCreateKlipfolioResponse(rsp *http.Response) (*PostIntegrationCreateKlipfolioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateKlipfolioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationKlipfolio
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateLibratoResponse parses an HTTP response from a PostIntegrationCreateLibratoWithResponse call
func ParsePostIntegrationCreateLibratoResponse(rsp *http.Response) (*PostIntegrationCreateLibratoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateLibratoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationLibrato
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateMicrosoftTeamsResponse parses an HTTP response from a PostIntegrationCreateMicrosoftTeamsWithResponse call
func ParsePostIntegrationCreateMicrosoftTeamsResponse(rsp *http.Response) (*PostIntegrationCreateMicrosoftTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateMicrosoftTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationMicrosoftTeams
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateOpsgenieResponse parses an HTTP response from a PostIntegrationCreateOpsgenieWithResponse call
func ParsePostIntegrationCreateOpsgenieResponse(rsp *http.Response) (*PostIntegrationCreateOpsgenieResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateOpsgenieResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationOpsgenie
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePagerdutyResponse parses an HTTP response from a PostIntegrationCreatePagerdutyWithResponse call
func ParsePostIntegrationCreatePagerdutyResponse(rsp *http.Response) (*PostIntegrationCreatePagerdutyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePagerdutyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPagerduty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePushbulletResponse parses an HTTP response from a PostIntegrationCreatePushbulletWithResponse call
func ParsePostIntegrationCreatePushbulletResponse(rsp *http.Response) (*PostIntegrationCreatePushbulletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePushbulletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPushbullet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreatePushoverResponse parses an HTTP response from a PostIntegrationCreatePushoverWithResponse call
func ParsePostIntegrationCreatePushoverResponse(rsp *http.Response) (*PostIntegrationCreatePushoverResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreatePushoverResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationPushover
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateSlackResponse parses an HTTP response from a PostIntegrationCreateSlackWithResponse call
func ParsePostIntegrationCreateSlackResponse(rsp *http.Response) (*PostIntegrationCreateSlackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateSlackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationSlack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateStatusResponse parses an HTTP response from a PostIntegrationCreateStatusWithResponse call
func ParsePostIntegrationCreateStatusResponse(rsp *http.Response) (*PostIntegrationCreateStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateStatuspageResponse parses an HTTP response from a PostIntegrationCreateStatuspageWithResponse call
func ParsePostIntegrationCreateStatuspageResponse(rsp *http.Response) (*PostIntegrationCreateStatuspageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateStatuspageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationStatuspage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateTwitterResponse parses an HTTP response from a PostIntegrationCreateTwitterWithResponse call
func ParsePostIntegrationCreateTwitterResponse(rsp *http.Response) (*PostIntegrationCreateTwitterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateTwitterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationTwitter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateVictoropsResponse parses an HTTP response from a PostIntegrationCreateVictoropsWithResponse call
func ParsePostIntegrationCreateVictoropsResponse(rsp *http.Response) (*PostIntegrationCreateVictoropsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateVictoropsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationVictorops
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateWavefrontResponse parses an HTTP response from a PostIntegrationCreateWavefrontWithResponse call
func ParsePostIntegrationCreateWavefrontResponse(rsp *http.Response) (*PostIntegrationCreateWavefrontResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateWavefrontResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationWavefront
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateWebhookResponse parses an HTTP response from a PostIntegrationCreateWebhookWithResponse call
func ParsePostIntegrationCreateWebhookResponse(rsp *http.Response) (*PostIntegrationCreateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationWebhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIntegrationCreateZapierResponse parses an HTTP response from a PostIntegrationCreateZapierWithResponse call
func ParsePostIntegrationCreateZapierResponse(rsp *http.Response) (*PostIntegrationCreateZapierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIntegrationCreateZapierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IntegrationZapier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIntegrationDetailResponse parses an HTTP response from a DeleteIntegrationDetailWithResponse call
func ParseDeleteIntegrationDetailResponse(rsp *http.Response) (*DeleteIntegrationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIntegrationDetailResponse parses an HTTP response from a GetIntegrationDetailWithResponse call
func ParseGetIntegrationDetailResponse(rsp *http.Response) (*GetIntegrationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchIntegrationDetailResponse parses an HTTP response from a PatchIntegrationDetailWithResponse call
func ParsePatchIntegrationDetailResponse(rsp *http.Response) (*PatchIntegrationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIntegrationDetailResponse parses an HTTP response from a PutIntegrationDetailWithResponse call
func ParsePutIntegrationDetailResponse(rsp *http.Response) (*PutIntegrationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIntegrationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Integration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutagelistResponse parses an HTTP response from a GetOutagelistWithResponse call
func ParseGetOutagelistResponse(rsp *http.Response) (*GetOutagelistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int       `json:"count,omitempty"`
			Next     *string    `json:"next"`
			Previous *string    `json:"previous"`
			Results  *[]Outages `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOutageDetailResponse parses an HTTP response from a GetOutageDetailWithResponse call
func ParseGetOutageDetailResponse(rsp *http.Response) (*GetOutageDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOutageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Outages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMonitoringServerListResponse parses an HTTP response from a GetMonitoringServerListWithResponse call
func ParseGetMonitoringServerListResponse(rsp *http.Response) (*GetMonitoringServerListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitoringServerListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPushnotificationlistResponse parses an HTTP response from a GetPushnotificationlistWithResponse call
func ParseGetPushnotificationlistResponse(rsp *http.Response) (*GetPushnotificationlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPushnotificationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int                             `json:"count,omitempty"`
			Next     *string                          `json:"next"`
			Previous *string                          `json:"previous"`
			Results  *[]PushNotificationProfileCreate `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPushnotificationlistResponse parses an HTTP response from a PostPushnotificationlistWithResponse call
func ParsePostPushnotificationlistResponse(rsp *http.Response) (*PostPushnotificationlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPushnotificationlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfileCreate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePushNotificationDetailResponse parses an HTTP response from a DeletePushNotificationDetailWithResponse call
func ParseDeletePushNotificationDetailResponse(rsp *http.Response) (*DeletePushNotificationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPushNotificationDetailResponse parses an HTTP response from a GetPushNotificationDetailWithResponse call
func ParseGetPushNotificationDetailResponse(rsp *http.Response) (*GetPushNotificationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchPushNotificationDetailResponse parses an HTTP response from a PatchPushNotificationDetailWithResponse call
func ParsePatchPushNotificationDetailResponse(rsp *http.Response) (*PatchPushNotificationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutPushNotificationDetailResponse parses an HTTP response from a PutPushNotificationDetailWithResponse call
func ParsePutPushNotificationDetailResponse(rsp *http.Response) (*PutPushNotificationDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPushNotificationDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PushNotificationProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetScheduledreportlistResponse parses an HTTP response from a GetScheduledreportlistWithResponse call
func ParseGetScheduledreportlistResponse(rsp *http.Response) (*GetScheduledreportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduledreportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int               `json:"count,omitempty"`
			Next     *string            `json:"next"`
			Previous *string            `json:"previous"`
			Results  *[]ScheduledReport `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostScheduledreportlistResponse parses an HTTP response from a PostScheduledreportlistWithResponse call
func ParsePostScheduledreportlistResponse(rsp *http.Response) (*PostScheduledreportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostScheduledreportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteScheduledReportDetailResponse parses an HTTP response from a DeleteScheduledReportDetailWithResponse call
func ParseDeleteScheduledReportDetailResponse(rsp *http.Response) (*DeleteScheduledReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScheduledReportDetailResponse parses an HTTP response from a GetScheduledReportDetailWithResponse call
func ParseGetScheduledReportDetailResponse(rsp *http.Response) (*GetScheduledReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchScheduledReportDetailResponse parses an HTTP response from a PatchScheduledReportDetailWithResponse call
func ParsePatchScheduledReportDetailResponse(rsp *http.Response) (*PatchScheduledReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutScheduledReportDetailResponse parses an HTTP response from a PutScheduledReportDetailWithResponse call
func ParsePutScheduledReportDetailResponse(rsp *http.Response) (*PutScheduledReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutScheduledReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSlareportlistResponse parses an HTTP response from a GetSlareportlistWithResponse call
func ParseGetSlareportlistResponse(rsp *http.Response) (*GetSlareportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlareportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]SLAReport `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSlareportlistResponse parses an HTTP response from a PostSlareportlistWithResponse call
func ParsePostSlareportlistResponse(rsp *http.Response) (*PostSlareportlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSlareportlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSlaReportDetailResponse parses an HTTP response from a DeleteSlaReportDetailWithResponse call
func ParseDeleteSlaReportDetailResponse(rsp *http.Response) (*DeleteSlaReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSlaReportDetailResponse parses an HTTP response from a GetSlaReportDetailWithResponse call
func ParseGetSlaReportDetailResponse(rsp *http.Response) (*GetSlaReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSlaReportDetailResponse parses an HTTP response from a PatchSlaReportDetailWithResponse call
func ParsePatchSlaReportDetailResponse(rsp *http.Response) (*PatchSlaReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSlaReportDetailResponse parses an HTTP response from a PutSlaReportDetailWithResponse call
func ParsePutSlaReportDetailResponse(rsp *http.Response) (*PutSlaReportDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSlaReportDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReport
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSlaReportStatsResponse parses an HTTP response from a GetSlaReportStatsWithResponse call
func ParseGetSlaReportStatsResponse(rsp *http.Response) (*GetSlaReportStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSlaReportStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SLAReportStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspagelistResponse parses an HTTP response from a GetStatuspagelistWithResponse call
func ParseGetStatuspagelistResponse(rsp *http.Response) (*GetStatuspagelistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int          `json:"count,omitempty"`
			Next     *string       `json:"next"`
			Previous *string       `json:"previous"`
			Results  *[]StatusPage `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStatuspagelistResponse parses an HTTP response from a PostStatuspagelistWithResponse call
func ParsePostStatuspagelistResponse(rsp *http.Response) (*PostStatuspagelistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStatuspagelistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteStatuspageDetailResponse parses an HTTP response from a DeleteStatuspageDetailWithResponse call
func ParseDeleteStatuspageDetailResponse(rsp *http.Response) (*DeleteStatuspageDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStatuspageDetailResponse parses an HTTP response from a GetStatuspageDetailWithResponse call
func ParseGetStatuspageDetailResponse(rsp *http.Response) (*GetStatuspageDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchStatuspageDetailResponse parses an HTTP response from a PatchStatuspageDetailWithResponse call
func ParsePatchStatuspageDetailResponse(rsp *http.Response) (*PatchStatuspageDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutStatuspageDetailResponse parses an HTTP response from a PutStatuspageDetailWithResponse call
func ParsePutStatuspageDetailResponse(rsp *http.Response) (*PutStatuspageDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStatuspageDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspageCurrentStatusResponse parses an HTTP response from a GetStatuspageCurrentStatusWithResponse call
func ParseGetStatuspageCurrentStatusResponse(rsp *http.Response) (*GetStatuspageCurrentStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageCurrentStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageCurrentStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStatuspageHistoryResponse parses an HTTP response from a GetStatuspageHistoryWithResponse call
func ParseGetStatuspageHistoryResponse(rsp *http.Response) (*GetStatuspageHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatuspageHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusPageHistory
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetComponentslistResponse parses an HTTP response from a GetComponentslistWithResponse call
func ParseGetComponentslistResponse(rsp *http.Response) (*GetComponentslistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int         `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Component `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostComponentslistResponse parses an HTTP response from a PostComponentslistWithResponse call
func ParsePostComponentslistResponse(rsp *http.Response) (*PostComponentslistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComponentslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteComponentDetailResponse parses an HTTP response from a DeleteComponentDetailWithResponse call
func ParseDeleteComponentDetailResponse(rsp *http.Response) (*DeleteComponentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetComponentDetailResponse parses an HTTP response from a GetComponentDetailWithResponse call
func ParseGetComponentDetailResponse(rsp *http.Response) (*GetComponentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchComponentDetailResponse parses an HTTP response from a PatchComponentDetailWithResponse call
func ParsePatchComponentDetailResponse(rsp *http.Response) (*PatchComponentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutComponentDetailResponse parses an HTTP response from a PutComponentDetailWithResponse call
func ParsePutComponentDetailResponse(rsp *http.Response) (*PutComponentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComponentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIncidentlistResponse parses an HTTP response from a GetIncidentlistWithResponse call
func ParseGetIncidentlistResponse(rsp *http.Response) (*GetIncidentlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int        `json:"count,omitempty"`
			Next     *string     `json:"next"`
			Previous *string     `json:"previous"`
			Results  *[]Incident `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIncidentlistResponse parses an HTTP response from a PostIncidentlistWithResponse call
func ParsePostIncidentlistResponse(rsp *http.Response) (*PostIncidentlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIncidentlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIncidentDetailResponse parses an HTTP response from a DeleteIncidentDetailWithResponse call
func ParseDeleteIncidentDetailResponse(rsp *http.Response) (*DeleteIncidentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIncidentDetailResponse parses an HTTP response from a GetIncidentDetailWithResponse call
func ParseGetIncidentDetailResponse(rsp *http.Response) (*GetIncidentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchIncidentDetailResponse parses an HTTP response from a PatchIncidentDetailWithResponse call
func ParsePatchIncidentDetailResponse(rsp *http.Response) (*PatchIncidentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIncidentDetailResponse parses an HTTP response from a PutIncidentDetailWithResponse call
func ParsePutIncidentDetailResponse(rsp *http.Response) (*PutIncidentDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIncidentDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Incident
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMetricslistResponse parses an HTTP response from a GetMetricslistWithResponse call
func ParseGetMetricslistResponse(rsp *http.Response) (*GetMetricslistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int      `json:"count,omitempty"`
			Next     *string   `json:"next"`
			Previous *string   `json:"previous"`
			Results  *[]Metric `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMetricslistResponse parses an HTTP response from a PostMetricslistWithResponse call
func ParsePostMetricslistResponse(rsp *http.Response) (*PostMetricslistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMetricslistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMetricDetailResponse parses an HTTP response from a DeleteMetricDetailWithResponse call
func ParseDeleteMetricDetailResponse(rsp *http.Response) (*DeleteMetricDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMetricDetailResponse parses an HTTP response from a GetMetricDetailWithResponse call
func ParseGetMetricDetailResponse(rsp *http.Response) (*GetMetricDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchMetricDetailResponse parses an HTTP response from a PatchMetricDetailWithResponse call
func ParsePatchMetricDetailResponse(rsp *http.Response) (*PatchMetricDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMetricDetailResponse parses an HTTP response from a PutMetricDetailWithResponse call
func ParsePutMetricDetailResponse(rsp *http.Response) (*PutMetricDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMetricDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Metric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserlistResponse parses an HTTP response from a GetUserlistWithResponse call
func ParseGetUserlistResponse(rsp *http.Response) (*GetUserlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *int    `json:"count,omitempty"`
			Next     *string `json:"next"`
			Previous *string `json:"previous"`
			Results  *[]User `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserlistResponse parses an HTTP response from a PostUserlistWithResponse call
func ParsePostUserlistResponse(rsp *http.Response) (*PostUserlistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserDetailResponse parses an HTTP response from a DeleteUserDetailWithResponse call
func ParseDeleteUserDetailResponse(rsp *http.Response) (*DeleteUserDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserDetailResponse parses an HTTP response from a GetUserDetailWithResponse call
func ParseGetUserDetailResponse(rsp *http.Response) (*GetUserDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUserDetailResponse parses an HTTP response from a PatchUserDetailWithResponse call
func ParsePatchUserDetailResponse(rsp *http.Response) (*PatchUserDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutUserDetailResponse parses an HTTP response from a PutUserDetailWithResponse call
func ParsePutUserDetailResponse(rsp *http.Response) (*PutUserDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUserDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUserDeactivateResponse parses an HTTP response from a PostUserDeactivateWithResponse call
func ParsePostUserDeactivateResponse(rsp *http.Response) (*PostUserDeactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserDeactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUserReactivateResponse parses an HTTP response from a PostUserReactivateWithResponse call
func ParsePostUserReactivateResponse(rsp *http.Response) (*PostUserReactivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserReactivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9i3LbOLou+irYnFW1kl6Sb+n0THvVVG9FVsfu+KKx5GQy7WwuiIRERBTABkA76p48",
	"zHmSXXVe6LzCKQC8gBIpUdbFdhpTNR2LBPHj8v1X/AD+cDw6iShBRHDn+A+HewGaQPVnKxZBn44R+YBF",
	"0L/qd+XDiNEIMYGRKuJRH8l/fcQ9hiOBKXGOnQ4RiIEpjRkQ97Q5hJ6gDMBYBIgI7EFZDLw4+rn1EsgK",
	"wJDRiS5ulKFsz2k4Yhoh59jBRKARYs7XhoMmEIclNOVjAH2fIc7BkDIQ0hEmRh1cMExGTsO5Z1igKxJO",
	"nWPBYvS14USQ83vKfFnt8tJCjoksyhD08zezhL5+bTgM/RZjhnzn+Nek4QaxT9kXdPAZeUL27k0cjtsB",
	"8sa85emezQ55NJb/xQJNuNFcY4Am8MuZfnv0+iAjARmD05LuzDQyGpc2SzWpTYmAnnjLaBzxMiyo1+4o",
	"e1+coRYBqhGADkFSFqiygMAJ4oAycHbCgaCAIwEoASLAHHiSstOY63A6yKt2cKaVlZ3tcA+GCqklXUXF",
	"lzP9BCHmQvbSKFbarf8GHCGAvsBJFCIAB/QO7ZldXTa+Ncfka8O5h1i4Ak8Us07gFzyJJ87xDwcHBwcN",
	"Z4KJ/n04z28zo5fX06gzkqtNjTmqlfNyTr2qWQnNV9XYS4slsBNUSg35z1bwljeqsksXUA43gcRD852S",
	"8tiPw0TKDmEcCuf410+NmQ72AwTSogARwTDSUnCSVw7uMfHpPV8NdlI4Z9AhcRjCgWxNqcRrONhfIBhN",
	"IUWJCHw4rRBhyVtXEi9A9tWhgdeDRTW7gq74JSUechHxXR8K1dshZRMonGNHPmgmsF86BKoaLiATa1a0",
	"oI46nwtaf9r0gz8cROTo/Op86HTenX90Gs7F1WX/VP11ddnuGBjOv71HaOzDKV+ilooiaYZL1MsHSBA1",
	"SKLEBGnHjCEigHotuV4EKBW6rXb/7H0HvIAhYoIDLssRObphOH3ZAL2bbve60+t1TsCLmPiowEPyffu0",
	"c3JzLl+XMBeAHPhoiAnyASaKbMqXL51GNsC6DU7DyanJH2nV8wO9VNDogagUMj0BRQl3wzuIFTTcgvRM",
	"51HRKOXlTLX49J6EFPrzc9BDQsvUCDI4gdImFBSk5QEk4J/nPW0KYILJSA+WbKdhtQ0oDREkpXNv8uq8",
	"OAwhF8CHU6V6A3qvqsZcYE9LRkzAWe8K/O2Hg0Pw4uPHjx+bFxfNk5P+6enxxcVxr/evl0DznGxNKQfP",
	"Sz/ihbGPXI2s+Wad6fdAvQc+FFC1BEEvADQWcIRSzESIYerXHId06kqmQPabIR5RwhGQzVYEeYQ8PMTI",
	"z5UhJeF0r6xPGS7ctB4lVhb0rkhP9jKimAg96jAMM6J15znyh6ujC3RPfgYMRZSJumTG9XRXUS7PA2+I",
	"2c6Rl1MoE8O5LFjGzYIKGPIF45BW9bVK0PThqMx2DSlzA/SlfMTaPSkHQsq0P5iIawFHDYBGe+Avr159",
	"//3r12X9rjtnQrdqnrQ0AjVBzCVFRzlQ54iMROAcHx4clBCNWbi6+6frzgfi04IBLBHUInlabdfKEjt1",
	"pVSTKrtRpmyUWHST4cuAHTOs3GIhEJOd+j8vfjr+FTZ/P2j+uPdfzU/fvTze35eP/s/tLT/+3/uf/uvF",
	"T8f5r+9e/vS/X/704qfjFz8dH/z76PWvB83Xn/599OtB8/tPt7f+vw9vb/2f5P///eth80f56KeXL346",
	"vr3dW+GDl3+8+vrv29tffz1o/gibw+O9T/91e/vp3y9kM//f/6f5//3f/3vQ/PFT0u7sQfPTHweNHw6/",
	"Fkupxiry/6v5crb8YeOHV19f/HQbHxy88v5X8+XL79KShcqbn/44kiX//YU0m8lYyY9f//j1pfH17e3e",
	"T/+W0jYMKBcvZR3Ht7f+H0eN119VM37d/+kvn9RQynG8vf3daSyDdcPxoDRoiupgAT+QeDLQTKgA6Ka2",
	"5nI6ywIKs9GEAvgh59TDUCAf3GMRPIgFZCMYknW4EqkVhvzSjsyEC5aWx9yNYMyRGY9KFZd+rexSd1J0",
	"HCvqNb5c5CHPuscbG8F6rcy/n1Bf2SZrDfmEEiyo/OVyxO6wh+rjbsIjNwkklnZQvveVPeRR5ruzvlPL",
	"aTitVkv+075sXUgj/+KfTsO57DkNp9u/lnb+lXzb/2dfFr38WOpWpVRk8xFLXNlULx29fl3xCSIem0ap",
	"NZi2SdLsnbv9814lLfQlQp5wk4dV/S6Umut6r399dvnWaTjXnbcd2eezy/ed617H1b+rSAcI+ohVD3Zq",
	"VmPijkI6gKE7QYIlts48yvUnArE7GBZCAEeH3//1+7+9+uH7vy4NIvDIJVSg6jaReOIypOIsxTDD4nia",
	"/tiMNy+e1TI7VdVAmSjG8l6/fvW6SLvC659tC6OCejQ05zEQInIaDp+ofyIavZIcP4Hy11A9+zKJ5D+Y",
	"eU7DCX0YVU5uxOiXaW34FpSKy0NYFAHIwxMYahstjWEW53IShwJHIboaOscHewcHhzUiJZKwloWV082l",
	"r7mENzgiHAt8h8V0DdhJSz7mbrqyUmvURMAQD2jo16JbDxdxVHcKDhfPwMFhRatjjlwcuXeI8XlxddZ9",
	"/73+54dKaMUcManza4+TQeoBs1NCqtw/WMGRFMj1AkhGa6o7XZM0DKJ6loAKs1hL/Jlb4hVOoeERbsUm",
	"fpD/O2PNF82sai+y1T2zjqR1JK0jaR3JZ+lILvRdsgXdqnGedWWyD143duLWZPSOGiu6OKWGfFbd940n",
	"YtSbBntpZ1cb3IIhntX36qCxHas8o3Cw9+OPjR0Z6RlRx1jPrGGxW/PZ2h/WfN6o+ZyphoK4qzam35y3",
	"2u/Oz3p9a1Jbk9qa1Nak/ibXZnZk4e7UFLPGk9U01njacezxTRxW5U16WYrLw3OtbPqimXe3sR0tTzNB",
	"b5XEurobchRAb6K0ozN5+xiFvk3Csoa+NfStoW+TsGwSlk3CsklYNgnLJmHZJCwbCLGWuA2ELA+E7MBZ",
	"n/d2G6nnWsftXXhKQ5UHbE9v2PnpDU8fSQsPYahCkj2cwR7OYA9nsIczPPRwhqcqFk8uezZwbAPHNnBs",
	"A8c2cLzTwHGt+K/NKS9LvDnaO9pRVvmO0saPnmnauA3RWZvHhui2meid6rdybVZt17+9vrrpWsveWvbW",
	"sn+IZa86rJrqUTLEo7LoTZGz1BeuHl+f3hPXo8THs4kB0ohsOP0PV/K/p9cdaXT+fHUjbc2fdSCi37lU",
	"UZ6O223301LJ37JI+rhzmf71oXPZ/2i8+vns5/7H5O/W+Xmp0Wq2NrG7F2QB6hRIfXi3msQQc7HSHJr0",
	"ykX0DC0FGEqQxNKEsix2xFGIPIkoVcvqTSgalh4MvVjjwp0kK8DpVF1eXcr5aF915ZS13neuW287CwZz",
	"puYCo6V1nvb7XTll163LXqvdP7uSc93qnjkN56x9IV+ddlrX/Tedlpy8D503p1dX72rT5JiMwoR02SmK",
	"apqBoMCj0XT2rEhGJ3WimZpuYmRGiHmICHMYzd7edN2Tqw+Xbq/f6nd6Cwex7IxB611/A1uaF/uLj5Z+",
	"Yr0k6yVZL+k5eknVLk+uOq3bY90e6/Y8wO0JEGRigKBw67GqNdLsuTOrrhFYm8/afFZ5Wpvv4ZHxBSZg",
	"v2+D3tb6s9afTWf5NtNZitsN8/PZ0t2GjT/DFsRvOO/lie1UXHcn4aNk7Ky6cXADWT1rbyLMj8u0B0hu",
	"YLfhmlNqnTdr+1rnbRdpTdWunFoPt66cdeWsK2dduW/RlbOp/WXW6eHzTe23B7Zbg9daCNbgfajBe9Gy",
	"Bq81eK3Baw3eP8PaxcbXKf60SwYbC/h/s5turWVuLXNryljL/IGW+UXr/EPrumONc2ucW+PcGuf2JiV7",
	"k5K1naymsQcIlxlLlzYD2xpK1lCyhpJdtrdhxockANiT/WwU01ri1pSxlvhmo5jdK2uYW8PcGubWMLfp",
	"BTa9wKYX2PQCa5hbU8Ya5o9umF/fXFjD3Brm1jC3hrmNmD/gEOHywOuhvVLFWmRWh1mLbPYOlVxcLDTJ",
	"jqxNZm0ya5NZm8zaZA+wyazJZE0mazJ9y3mevQub6GlNJGsiWRPJrifb9eTnecKtXZH+Bo5+tda/tZ6s",
	"9f+4S9i93qn1BawvYH0B6wvYcKlN/rSmtk3+tJaztTWs5VzDcj53251re2exNZ+t+WzNZ3u41JOwViNG",
	"BfVo0Vp3AiEiw8JKfvKJ+iei0Ss50xMofw3Vsy+TSP6Dmec0nNCHUWXE89s6PMAallYLW8NyizmsmXyq",
	"n9Lab9t0DWtjWhvT2pjfaLqGzbr4kwVyH+GeXxvstTa5tVqsTb4w2GtI3AXm+HXrstdq98+uLq1Zbs1y",
	"a5Zbs/xZmuX2Ftsyg/DVrqxgBcyiWfjrH7cOFyhyfTS8dY7BrdN2r7qdS/fm+vzWaYBb5w6GMeLy3R+3",
	"Uh3qUoEQET/e3791vn795Dzysbk/2Mi3tbKtEWKt7DkrOxF51Zb1zYkNdFuL2lrU1qK2gW4b6LaBbhvo",
	"tia4tVqsCb7VQPe8rCpTVtVG+4fOm9Orq3fWcLeGuzXcreH+Jw2FL7aRSw3SXZigNoJqzTdrvj1N863h",
	"3KNBQOnY3YS5t8BAO70661nzzJpn1jyz5tmfOK66ozCm3Q9mbTqr8GxIruZ+sKLsqrUpjE4iShARJTZd",
	"LKjLkawOipibp19O4GfKmjQWcIQU3pnAMMwf+GjEoI/8ZoSY4g2pIRqO0m1NU2uUBe43oZcL81kyIWoM",
	"XazE6nJBibke9HKlvXmplqi1us1Ly9f1FObnU067Mg0SGb/F2X0Q9NUQl8NX8cTbdHaKCN6IhTeBOHRD",
	"zMUCOaEKgYQXEQeCAoY8hO8Q0J6RKR2ydqivyjLsZsWFmmu21L4zitWRWnroVjP4NmHApfxS7MUlnCAl",
	"cottW8pUlHgwDF0uHZc4LKm4HyBASVOWAgGNGQdpWTCkbJbe0tZHASVIkVyCCQ+FoSoMtJvEFbk7ij0E",
	"VGM0MsCLOxhiX00eIwkTAvNDwIXkQDLSk/dfL1easrpCJ4p5IK1aPMTaS3AjRoc4RI+LOD7hDxvo3kVv",
	"RyO8PYl2RdowDHsGtIvyrQj6xHT/9VOjhAMyzCOi3BI1RvcBIkAEKHOzMU9Z5b8BRwigL3AShQjAAb1D",
	"e+aoFBsyZHSSBQuWxpK1XlsOyQklIvDh1JXVF5I5Xh0uTV5IvxV0xS8p8ZCLiO9KoVYp5ZZ2UlWjcLVm",
	"RYLWH9nUEU71+odO5935R6fhXFxd9k/VX1eX7U6pYr5HaOzDqZrPWfAbw1NE/wyqszqScmUAL1RQdra3",
	"csXm+f1DgESAmNStMUcAkkyqp9jeAx2sirTa/bP3HfAChvdwKiGtBO5LKZx67dPOyc155wS8kLX4aIgJ",
	"8rMqXu4ZSSa6Gqfh9G663etOr9c5kT/SGuZHcb43M+Oju1Y2KieQBwMK9XnopbHVIWWuVDvK2ygRyr2A",
	"3u8H2E9NDqAXn8IpgB6jnAM5VPrjBmBQj2WghjGcKnGgXwKOQuRJyY21cNCBXyDgwClzhJPmZateI0IZ",
	"8ufbd6YL7KMv6t+0lRPIxsgHkINbJ/n21klJJ2WkAtDju5Q8Q5yGdyvQFwEUADIECAUhJSPEgE/vyeot",
	"IPHElQ5TQO9LrButZ+gwI0uBLJmSOYcCcQFa+iVHnvoug+LrxuFB4/D1pwflcSXtk+TctOYF6KlsDpBi",
	"WGtyP0Nr2YBswuzG3I0wIWUTmQmCQkuk7tJfyLGVneDYRwPISpuYrMguZaoENCApr4fAZCRCBfgcc6Ep",
	"ppyTVLeI8irT0YsnE8im4CJpRTohUJMVNMos58UzU256S/vAxzwK4RT5yo7LLWOzvuW2OPNRGjWd6Y+e",
	"C5CWqCSwKri1eVvpE+eCQTL1cqGQiMD7AHuBkgpezBgiIpwqqVA6qHOkZsLiK1KcQBIrsZ1IRjlSZo21",
	"mpAvMjy4v0kVtchp5/vBpOJoMZmaolVRAB5k/px8baeqbUawft/4W+PwqHH4Q+Po4GHSNWtkxLBkUpcn",
	"mcfzPJaUAGrfnZrXjB2UEZ4KjdT+SFbjMq6Sdr0K9BhRv6YhbI3lpUbyrRnWloX10xByoRjCVbpBf9ss",
	"XfwrsxSzLnPkUeIv7nRWZnG3GwAP1c/iIGGuBStUWuMZDYxWBNUKJeGGXKUqJ3clzzgjJjXJ3JLtvD5R",
	"I5mWA7IcGDEYBdIs1lpJWsoIeoHBSYsZcxUlZnJnXUuiSEivVS3o3NH3AdCFQISYh4iAI7Ryp8rXBGYm",
	"TgUKKEFq8ChLQleGCaBqWWk+zQWlpfZR7aBDtafRkwRLgqaZKVTh7O8sSWBDZmSmCpcv6j18/X2Dq9I1",
	"kwzzXTnLIymp3bc8ulkzWljMQfShgBHFRBRg87VyfgqYr7V+u/56bbLQffR9UAurDwrqzXWnzNNfNibz",
	"OaMVX+RVhspdc/UCzSLWla5OsiCxgL83wHdpqkl5hkSRVxBzcXT3ff2iP9QsmqJ+3k+JRRSL0ld1GeDh",
	"8ncuDUlJxUVZKbrEAglT8UVl//XrKtdJv62riGqgZX51NtZrBtJ0qJk3pSJDiVVWt2lGKKrEFY4nbpYQ",
	"lXmHD/ZAa4lMFZlKRmrVjJQSifagJALTKs5wMIvCAoKWAbDY1NKRbZiSZ3WhWMZGZ8TDfnnewnCoTDDX",
	"S3MbFkq76gQI7JczSE1tOjPyuDwBYyZTYTmo12tU2er/Ftf7SxRkrOCVjXrZmFSsc2w0c3PVcU9lVq3C",
	"iPh8UeuWL5El6HazxZDlwEg/mV0EOrtsn510Lvvm2oV70Tq77HcuW1WrQYXa3CQ6WLcd1dtfVglJkiQj",
	"IG1KA6DRHoAgYnQQoon0vJRMjZOQztIbQlfIKmRivfmLI1+ZginMjRyqMtNUFl7TJFs5BapKkMxDLwUS",
	"JneICzyCyVKIKqbyQRzT/HJyXSeHykgpcIopw5+WAn8l4OlhXGWQZiV0seefahhvD1/7z6d9lnU/LdB2",
	"1qa3Nv3TtOm/AQv9T2Vxn+WpW2VG8Tr7c1Rg10wNwyohDI/04uxKUVHMXcRYCpIa+2AgF/qLujtSKpMG",
	"I0bvsK+XlkSAzB7tPTzP8SONGYgYGiLG5lZbZ0gULJofGjuQbLVS1AzotKEXILHEqyoOQJZxrjJ5lA7U",
	"0XR4B3EIBzjEYgq0vbTnbHzz2HMCp7Kb5zuo0wBmh6+4suNDAUtH70+CeEHHiFS0pdU9A+p96QAlvFL8",
	"7ppSAW6uz+XITGUdGvgAEy5gGGbttxuBnuZGoPUl3QkU0KejEvs7wu4YTUsFBoyiyndWx35bEoehUWJL",
	"pf7yTc9pOJ2bHWyDMXD6FnljWpVJugCqTweOUnVxJKpdHYvXJ20T/oIZTNwVH/FxOQz13qe5keiojVTJ",
	"4MYcMXAfUI5ylS2BNUCYjORbv1SBy+or1L+spq+qSbyyZJg1rQYwfvwnBxHk/J4yH7zgKBw2pbpBvkqX",
	"fvnEDVMv5oJO3CFGoe9i34WeR2OSs9RMuwigUbIt5uxEDQkEugog0BcBVD06U5oHNA79bHebSpHWlave",
	"GONiRh9mmlMMZWy0MTrJZ9WmlNp8G2nJzfX58oZw9zMvS6C6Jdrq8fEd8ELI+d9vHZ/RSHr4t456h24J",
	"AC3/DhIP+RJYQzxKVip0Tr9uryYDYi4555fe1SXQluoe6CFVhSYEQcDQ8O+3zl9uHcBoiP5+6wxiISi5",
	"dQD2DfIXiMTnmIxvHeVqNAUdjVTxvH0AMgybAeQRjeLo77eOFDC3jqQm/6feoi8RJD6SNQ9hyFHaq3Tj",
	"UXJFgWrcPtTv9vL2lg1Mc4JIDAYqORD4kI2bPIA+vb91ABdT1cZ77IvgGLz6K0OT/55pUQgHKAyRP5iW",
	"9jYddE0/Yih5oH561Ef5rPyh671NplpD7vDg4OBAX7SgGZ4DaKDp1mmUfXVU9pU6cqEZYoKMCvbAAI/U",
	"772Kul7ldR0dHB42D/7aPHzVP3x9fPT6WL4o/ej79KM/0sFKro+YbZTOf1PZjCApoL/4Wlrv65J6JfPO",
	"VqtEKoiwN0asTr0/pPX+mtb7R0WD1SjONxv85fDWSet+wNdHt85X/fEnVcnXFDL7Bkj0gxxEGa73fXxX",
	"RJr5xGmsbxN9xgy6PB74dAIxqdgToN5pf9ejkwiSqVSNKrkaeh7iHEhd3wBob7Rn3BwiP2jqj/egkOyJ",
	"IdkjSNw61kV+Li6yNJsHKCwzYyQYJpLVI8iUEaWAT4dAfwGgECpFVOJEZd6m61up1bUHJLxunRuVk7fn",
	"0cmtoz8GEmPG5mGtRAUccbVlINnQx5HYK2+xNfRLlj8YlVZ66vmV9lUWAGM0zeJbPW3AgxPEx2mBhtpS",
	"QQDVeyq6yWc9JAQmI65ll/xEQBxK83mE9kBHy4beRbd3/f6k03unhMDu/OF3IY6GNMT0ObvDLqcx85B1",
	"iZ+pS3yOBwyKCghmvuoTBuFCdz1Zw0y2dk1pDBgaYS4QS49/gAKkQ9DYPXjVckk171hwrwfuC+wxyulQ",
	"uH0Ey1MsbaT7z4ekuRNpreH/ra6NXUV8hAhGFaFe4qvNQfPoPcdJRFVxhFEhB/ugncSykF98I81KgAm4",
	"ivhbSdQuuz4jn9IwubcEhXmSsaBJPmqJ6okFnUCBPbXjPimW+6uUeGYwF3MwgN4YxNFe+cEXVtF9W0kk",
	"5aeDrhL/yM6Q2QMfaQwmcv7vEFPnBKmXv8UYifRgOu1Jq47FbCQRmBwXM5hKKzvdMn+V1vAP+fGp+lbA",
	"USn8RWqT1e2E/CABpjbo73EYgkG2dRwPspPz0q7t1KHvwhFifqyvOJs/sXRFVk/wY/nd8nt+kGoNDZXE",
	"x/6TA98IdzWK+knAwY55I+bBIA7D8pTMJx5MkGDSB6nGXJ8+psLFUuipkGTeuXTJuWD6VZ6mannjSYcP",
	"5LRKlWjjBt/+QgSmLLub1GxOV7/BiIMAj/ThbogAInk71AaIhAjDvjRDPBxhRMR/ctN4Mg5ubB41moeN",
	"g8Zh4+jTOvGLmGtUzk4K5sqOGyAtl1Saklo7YdlK9RhN9zbiWvdC6I3LDmmBhKDQJpZayWvDbX+2cFsv",
	"20s8H2zD/jLLtdU900uza8RnFtaxqb0/IKGJ05jQkEEuWOyJmCGwDy6oj4dTkNe5r9qVHEf21DM0JQFM",
	"yhRMO331SIP01Hc1gSIW00NRs74mFangoDrhPA2rnEABQU+tpEsybZUv9mfeJKUxJAdqXbmxNe+glzVx",
	"Yf7GooZfQCKh0ErSlPd3Ir0a6vx8TDQvqmjAAIX03u5o3AjvYwK68SDEnsH+HR+LlPn385zoK0WEf5N8",
	"nrDF5tD/6NGA/j2WdqoNBjxXTFIYi2BBTpPx3uXIY2hHZ3asCsT32BOU0cjms3z7OzdpLO3DclviWr9U",
	"AR4fCcQmmOgUeL06ppbLklU6SPxsLYnn62Y0FhVb1VZacEiybHMJvlND7AO8Q0NGSw/cq95wV2O/veWm",
	"P2m4KgWUW+/EhQyAIOEafR5cuukkpGSktj3vZRXvedq9s5GwbzUS9kGHPJ+yig4Q9BEracJVurc02aJ5",
	"2u93QVJa+je36krEY/Be7ztLN2zaFc6tLU9RLgawajew7KwUR1Mag3u12TfEY5QnwWR5ABwRAQZTPZ/d",
	"q17fiqBnlKC4wtqgG6IR9KZuBKchhSXxswuIVSRXb54UOAkQqdiG/hYEkPghYrwsv+gB8vBfMMLWebY2",
	"VsWS4PyYJApUSTbVaoZHo/xuHi3ZMAEaWFaSfXPG1AUcYe8ckxIbqtaeL0GlwvPBRNYDQkzGNZKylt6T",
	"qT8rbW8WQZ45q527d1jlpj7KJe3V7+ufy77qtTGrXvu+zlnFRm/LZuUqv3nEHk5sDye2F47YC0ee+PHH",
	"3eRsr2vEy5KlV9J92TlhDHn0DrHpDvRgN+bBpXG0fldf1r9x059qQzaKeQDMo/x1dDs97yqJfw8p21st",
	"C2YjF3kU9OzSWyCSKwXqK+YJ9dUlB2u1ctOWfZqburxgvPC6/QquNQd1LkS/Ah7baoLLlgyyg1GNCXt1",
	"pGSf+XMZwzQswC3A/ZK5mAF0CrjG6tC+TtJQ+sk9lzOagviun2B83r8OIRfAh9PsPmKpuTAX6i5xyqRr",
	"fda7An/74eAQvPj48ePH5sVF8+Skf3p6fHFx3Ov966UR961h65QxSN2LOvMeqwtwFvRqiNljd6vM0O2d",
	"t65RlNxEvHkXw0dDGId6XFwGyahwOU7/6qT10Wk4Hzu9fuda/33e6vXdv56kf706kH/2T8967odO5136",
	"OPlbPb+4uuyfpi/0j7LTg4c4FIgVr2B1eQjdO0z1YeQVVw0lH/KQ3iMuFpZJLsxcodZ7LAJlfqVAq3vb",
	"02Vy05OSxL3zFmB6Ghubc9dnhkqnv2bXVqeT+Oaje93pda8uex23f3bRcRryUe+89YSue36s64nnbpk2",
	"L34uuU65pHwIF5RN8ba00hyYFYVWu0g5WoaIm+5yKGw27SITZBVXND8tnfO14QSQu/NXAteL8Oexkfmu",
	"6HdJc1IMa+FwDH79zClpgMgfNsCXkH8yLohXx+k2nMgfOg3nS8jn56yWopzljvqX+D45DZohvZYBEHPE",
	"XR/icPrAaS1Vz16A/DhEfpWShqLi9nr9QZ5RpZZYodCSVCUHv1DhcvX3yxwHagtg41Xj+8brxg+Nvzb+",
	"1vixcXjQODxsHB41Dl81Dr9vHL5uHP7QOPxr4/BvjcMfG0cHjaPDxtFR4+jVp0YenHl19NcflsZlNmFj",
	"SJ9p7gLH7snPTsP553mv/MY87iICB2Fl3Gm5yuXpzKygeClx7xEa+7Akc+0DQmN1xkLJtKl0NnXx/zSf",
	"qMI0rTzw9W2AZOeoPn2+zFf0fZxkZegi+nTvgiuoWp+NU4lkSIlID6aERk8fFpyeM88rDhA3idTX0gx5",
	"MWMouba+SPiU3gM6FIhImeOjEN8hNkMoRdxJ6+xcGrDSNFV/KFNU/fWPm9Z1v3N9rm3dlvyj1DYKocsy",
	"Pi8dAUgMWy8LpqX4SDFZ67bNzWpftYGjW77lJAzpveszHIZZCHee5XSpyB8aQ1BViiPIvMDFxEdfZDMX",
	"FY0H2TBWWOIquTqNRy5f7yrTgqoKiczaS2ZeVWhiduKMxeJk9fP2tnl7u/fpv/7Dqaq3/rqAPqHavUcD",
	"jgWq2AZrNlF2xq5fP9VMnPz27hUgoIM5WfR+Lv5eQOj3ZVUo8Zne11ufsr7NwataUEsue6BU+smBmISL",
	"iukkwOpiaSAiwFxQNp0JSGS688eDZYpz2RXBxvusNcvvvpZD7UpP92EzoL8P6YjWHn39CUNROHX1Kbur",
	"kx3CO+xRUpvmiNJRiFxIYDiVVrvrUX9eXB6VkUrnrfayYrqloPYXK41ecj137fL1UyngqMSYvXlzftZ2",
	"GskfyqNuOGeX/c71Zeu81JbI6lnpOugVTiW5g6K+nonUvsPaxVXIAnoC3yEXm7c4V0Q38ivDE5jUKjvn",
	"ulZ8kUKPEziuU07AwYJSEeSiVqcSabq4Nh5PJpBNF18Xz8N4VAY+c9loseFxe3ufWB1/vGp8/Y9qT9n1",
	"YOjFOvA5B+M3H930Xv2eDg21Tzvtd701okMNR2UwqSRRN0R3+niX7DI5FYVyb3qda3Wt3D81w2QPEr76",
	"VDOhJ+fNxSZwW+vDyiMnSoBdkeUDh0MVesxRuzAnyNyGPZPqVZFxVXO9a/bS9/KMphnVuFxGr9eodC++",
	"OeMT+JmyJlWpVWrGmMAwzB/4aMSgj/xmhJjSd9Lrazgx8RFrLr5nf2YMEtrm5veyManwwza82LnauKeZ",
	"PfXsBOLzRa1b6mhmF/WrBJSVlPecBEnFh9Nweu3TzsnNeefEvWhJTXjZumx3yoM9Zm0rqUOsFwhcTNxR",
	"SAcwXCxny6NG/QDpDGc6zDY66m1YEESMDkI0AZTpwzVj9U1j+Xr1CqdVMLHe/OnTBQy9mXNdSbqTKrxm",
	"4uIygNcWJPPQS4GEyR3iAo/UUYmOrAERoRb0HTNJ0ckzwuRQGakOapIWiYtZ6isBTw/jKoM0K6GLPf9U",
	"I8VxnVTXdNpnWbcO3dUjFksVIYwFdTkyoboDBbEVYT7vQzEaR0kGdQXvmhzAdZbGoyR4L2/equnY8/Mp",
	"px3q8LNiyS3O7mYjpvOHW60eunlY3GUpwrSqw9w1B7cUQNv3yg2FW8HsdhfDY+5imIXx0w+MPI0QRxx5",
	"dILJyDWljnUErSNoHUHrCFpH0DqCfz5H8ElHfKvM4sZ8OLdCuRd819ywXRxKPs3XM2a452Fes7lAsoKv",
	"vXWXRPLFKk1bJgjMbM96omVeri9txM68n6e8zDi7mmUNWGvAWgPWGrDWgLUG7J/MgH0q2TOFfRSr7HP4",
	"k2RvzJkthTEzjMdS2zweJDepzUuEyrM8Hudk5rypXeiNSySYGui5XQ7xZKAP/IrkV0BQMEBAMEi4Pq/L",
	"mWv50jMZJKGyFt7wspPXoOchznNAlBxLhtgEc44pAapUfnqY2gKdJ+UfHjSvO60Tp+G8Omh+uD7rd5yG",
	"8/qg2Tq5OLssRW7l5A4ZQq5gGIYu+hJhhtZTRrVNdVnh75QULXXoSfm9f4H9e7UnJH1wiWNk/OzCEXXl",
	"f5yG05oghj243/Lh2ChySgkN4zA2Hl1DRgUlI2g868MAC+w0nJve/im8hxgbLy8g+y1GHHKTDPECyrSt",
	"mpZ7CycDrOYnLfVLTBCMjQcXSIRwDEUIjYeXVI1p+rOHxRjqprRCyMdm0Y9wHAt1bkr65ATe651t6YNz",
	"yt0WGaFQiflsqLDwIGZmwT7+HEOSUErKGa/fQ+LR+K7Qnw8BFiigjJvtfUNx4XcbTgYM+yPkvlGTlz0P",
	"cBDDIDb702aIi0LzdX/cNkNobD5GpNiUjj+hpPjpz5QJ9xKFxfE4RWxCOQ5DEyVnJL7DZv0X8Hc5K+aH",
	"V58xgSOztd2AIoK/JHPD8O80Hb4LyVQQm59/RGFI78cEDwuDBQMM3TdQ+jEFQL1BIf4dFVDBROCewDEV",
	"8m0cwqDqbRsRURicdoC9Ilu0KRfQvcaeifoO5MXvOqHbg+Ed9Ckr4DqEERxRs7lvYyjQBBZwfEZ8DAnc",
	"f0fol8LQEjgqzPoFFHBCWaHCC0ToBBOECs8Y9gsfoi/Yo24bCxNYF1R2n6Fp1fhconvZLzQxClxDTKbu",
	"NS6i6hqSMSbuGQmRyWTXaIQJLDxQTkCBbe/xULhJcqTJZmgUe3gEw6hsrPooDNP+3PTUTDIVd8tYDhOC",
	"IzQyZY/AYzouYPUNHVFRYCxIvJgUHkwnhU9OkGAUmy3tYBYTFKHiNE/hbzE2W3QK7yAp60vyb0RDbM7s",
	"2W8wjAuEfoETqJGYCS08MX++Q0TE3ni6f05jzO9wGKISeheQIVJAefadhAT2UJHpLyHnBWkscfGRMlMO",
	"XOIIjwryowsJLDSuC8mIYCZiMippVBcJxPggZubLLmWiCeNml2Edx8hwhKn7hklJayImUGGOGfHZp0wK",
	"PI0TzbmkhP57dFf4LHsuKROCeMm7D1h20SughUFvRuGNYhwW+L1FBC4ydovFg8JvHhMPF4bzDWQD6GvW",
	"lwJXYG//DWKTuMDob0JIvGYPDsLixxS67zGfQfokou5bJkWq+TjGsNCWdiy7ZI7ziRQ4RRy+DaE3q7fe",
	"Usrnnklybj8uYOctQwQWuvE2hj4KaTzDU9Mi/5zCEA+hKTLfMRgi4uPPZvXn0O3C3wua/h4xV2OKzwjc",
	"uPiA4REVxScCE/xbjIpy1CtqVMlGHDFWsDgkmF06dHtRUeHJ59R9j8LAHORujOTja+wVnxIB3ZYcMLOh",
	"PYmHouKSj6irpqr4XLhvIBMBCtFkWnz+DgvBi4/OYw/D4qN+QCdwpphmElHkxYLs6ctOhjNV/UIDUuAV",
	"JhVeUWMoxV/U9wV91FKX+2MC99/EiEgbTtrgpQXaUn1C5hW5YCq5u7w8ZT4t8IK0lGCIfoel5X+JP8fT",
	"0jfn0oSgn4u63EOYlpa+QMSnBRoXEnHhHMTQHfZRQVLH8bggcZnsMB7Qggr2iqZVTlhK1bcwDFHRZskL",
	"9GAoYMUb4v4SFxRl8eV5jGcRC1lhJntQOiWxVj2piOsJSEJUPqr92IsnFSRveBBDXPQWGCUBLFROYxG4",
	"bxFlI1x40fqdJiBKn7RhhNz3iBVkZc+TxQZTHhPp/raGuhED7H/WzUoeeB6D+c83cALH1PxNPseh8Run",
	"6jYnTiCb5iXakMOBlPRGrW1K4NgsdALHkBUcBDKBbMwDeGe0rRO6LYi1xZOS+xkyivIiPzOEhD4J8u1F",
	"32k4nVh6wPtvY8QIV3OTPDnjIZIS7kL1Pnn4C2KFQueYD6jRgnPtxaVvKfFpoTUX0EfYHL8LShi9w8aT",
	"SxrDsRdQIfJnVzEcQZ/GI1oYyms0HX+GiQ8zzHDXT1zJHHbuKQoRMYi0whFGjOdNbU2kLeHDifGI+JQV",
	"51qq/7zAGxSq9RnzCQuxMVxvGBSYh/DOrIXB33+HqTmXFYw5R6HRoDexDyOkDkPKnnBMRsgY7TaKFQcn",
	"Bdo0QiSAhSInNNb+SVLmJB4UWvgWD5iUAyz/5B0mPIDcaPJ56vckP/GAoZkOnH+OB+FnaI7xeQyJb5A+",
	"j7+gyYBqozB5dgF9hg12u4AhVAIuex+aPbygBHoGt136n+GkMLGXGE5MgF7x0KiuCxk2xrhL/RFl2OQ8",
	"pb+bl/TO/EpqMqOv1wWQS3kobQtCzWcMfkZmHb0xjT6bXwnqjQMaGnjrYwaJwar9mJiNfQ/9+Hfzp8Ce",
	"yZrvMSLEGKsPkHF4n//+FxwxNDB+xwx7ypvmGO63JhOzspYIkNbm8uUbhFlssKM0TMWUmfiNvQAyDde0",
	"UPw5ngxik4HaEDNjTNoB5pho6SjJnMAJ5F6ckf0ZTuAoTgxdXcNbOJCSH6VF3sLfjbenkEGWvTtFA0aN",
	"Pp2ikGMyxqaIE5AMtLiWX/yCWMxTF1lX+QtVN8qnvkzy4TsYYoKJ5H7jIUZ3JheNYIhNbhjEkwHkQeEZ",
	"h2NTGMIoFgX0M4wCOCFmEY5YbPwewAHMx+MSe5RjAwXXeGT86tGh+bIPwxATo/Y+w9JxzUvc/B6MKKO+",
	"CbOQ4NiQBh8w8QOq4lQZ0iLK6O/B1ABzy/cxd1uDxB1RkPOVoNL+l/SjIJGqEd8ZDN7iE8iMFre4YHAc",
	"aIWsoAlHga9mIfkZMG2QJ9W26YQyaipS5iLu9mAIoTHNJ5/xgMbCmJtfEicumU04iZI4T/IggEzQeGJO",
	"P6N3aTvexfdQeftJMy7glAphMMwFJnxsqsER9DEPYlPWcY/eG5JNMs8ApxT+AROhLX9c4yn0g6L8Eao1",
	"6QM8GSJGIxoacxtOIaF33Ji59zQc0QTVquI+Cpg52OOcWeMBxGYHA2T+ihkWOGfli5h70BiPaxQTbDJn",
	"DyYTrckOcIh51tePiKG7vBnvoMGzrd9ELkFavwk6yJihxYMRHGi3Tf0WU2ZIm5gHkOSl30lvPzC69A6x",
	"USztBrNfoY/vUNatqyRMJf9WPRhDko8d5ME4caR0L8ZQIIZJGheRD9s0pBNt0qtG0HAMBczbJIIJJH7e",
	"wXACddhPzwcjMB+KN1gSHBvgD1LFrTocJMJGCQp6RzkeYKZRqDozyf/+B5WiEWaU/jH9fRpS5uczFOBJ",
	"FGTt6lPj4xsWT37DJg96eSs+QpKElnQPyGhMC01mmIvEJ1VSnLrtALsXmAT5o7tskH+RhrExYAxyQqfQ",
	"6Jbs6Tj+nSCRP+sGhE7cLsrr7FLpdBOYFZHqVD7J8PGGxQRlkGwHOKfaDigewJDnED2lZOS+oySb5zM2",
	"jo0GvJNWmXseT6KY5c+8AOdfXEAvB+sFHEPOc4a/gARrcRRLiRjKHiAmsu70AkhGAcya28NkJKUyysGJ",
	"o7w3NyGEZABNkdKdUjKaQt2ejEgn9sKs2yc4xPk8TGEU5xz8LoDEnxaWl7owzDvUQzQHbp+OpzQHSDZS",
	"GdmWj0KItbuWPXzD1GW5pzgMC89PILvXMRmjKOaJmkxb0w60e53F92OtD7JvTukAqsO/8kfnmPhoks/y",
	"hfRKYJHUBQqljVugpYJFF9q9NB73II7yynpSr4UzDe9NfYIyLrzhonmJ8kF+H0If31EuaHG4zinz3VN6",
	"b7bhDY1HEJPUbM9WP4Z6PdwYBh+GHtR5r+nTd5QzaBa7pGxIw3HhSTxBhemmATEg1mPIJ2hMw6khKVoE",
	"+lNzlaUVe+NQy9D00c/4s7kO+XNM4DDR1FpETrwA6sXCrLn38DMMkRrLfP3yc6wMgazBMGZxYfWTwXuz",
	"lg9wjAo/Qx3SzxEERaBAk7U+wmYFP8MxpEOT5juYrNZlRCkZQQEjsyHvsNSdEyhwVd5DMXOgVp5Aei+Z",
	"y7OEgZIz+D6oq3uNIvmCO5jAKdCr9g1AGUCTSEzVmnwrDEGehsBXOwi+4kKJfnIK4H9yfeBgerdEQz71",
	"AZQNQ5iB7Dy2xsKjjQ5fH5QeKsm4cKvz4JIG6DNJEypLK8U8OdWmbHSRCJCRxACSMVMXx6mP5Mj6mOtj",
	"Kxs1TomV5CJsnnS5jGY+j+qsxVb3zKmoOGJ4Atm0TqVYV5b2h94TtaJY8x67DU/BJObCFffUHUJP1Lwg",
	"T2XLTd0IYt/F5I5iD/E6HZ85n5Kge5B9XtZf8wzCyu5mhYqdPfpbnXMK65/6qcTGzECl2Setdvvq5rLv",
	"nnR+bt2c952Gc935x83ZdcdpOCdX7uVV300ffFqS0LKdrasG85ooalTeDfNVJTkO1TFoAotQvrtRKXF7",
	"Hp2AqwiRVvcM9LwAqZXOO8S4nhl1rGuECIywc+y82jvYO9I3/AUKIvswwvt3h/v6Lox9+WiERPm95QCG",
	"YXJphtPIN7af+c6x8xaJlnyTHIEeQQYnah3VOf517kBWddE5IDqP6x6LAOvr0CM4wgQKdWQtj0MBOFJH",
	"IWP51W8xUkFlzW9Oclc61z0uyUn92qhOHNPVq9QxhkTMCIgQU61aRM7lOr9jFZotoM8CBQKxSVXlukhZ",
	"zTl+5m4aZj5iWUcGU83WQ4xCv4oMlZ9ozssJpTxTuNKpafwqU+OzjflZ3RUgW6Evl1SpsCCO9n16Typ7",
	"Xbjvaa7rxrHT1eTUyfjg7KSKhnE31RwBjb869csPFlNYcKvV3Eif9vtdKZJuLvR/JT+etS/ks17v1Gk4",
	"/bb8++ZE/vfksiefX6hPulfyv2cXLfnPpXr05rzVfnd+1pNC7sPp1ZksfdE6/9BSwq7XO3fbnWv5sn/d",
	"uuy12v2zq0tpfSrFedppXfffdFrq486b06urd07DeXt9daOotd52et1O52RFCAg40ln4LzxI1BHREfJU",
	"wjeYxKHAUYjUmd587+XCMRVwtBpL9ARkAvgSeiudtF4BzjzfdoU2dIi/oRZkSb6L6H/KD7hX4vzo4CC9",
	"HyzZnASjKEwS6ffVCfrHfxj1ze5qShJL0Rc4iaSSOTx6VaZ+CfpSLOcEQkTH+1Kb7CUP9ygb7ad29f5P",
	"UoD+/fv5u2aX5qFGDN1hmuw9WpHe0QPoJSK1sK/iPxgaOsfOX/bzzWH7ehD5/lmWpT3nIXwt1eNFwOhS",
	"6vqPX530bjv5bEYzq3/2/4jGX/cZpaLpwZijan39FunTyNMLzOkQQJJIZ+n3wJQrPZDesgdgSMlI3zIC",
	"yRRIMkCRAepAVK4OeFeBo3Ldr/5zTaloy4/mrQCFcml5GGp17JiWkZ6SleH+sBFVY7nSAAKOyShMLg6r",
	"HIYT9cUOu1+b22vC+OEgVUOqL8xUIxtRXnYJCB3JUVTXdauyib1gYHRucLuU69E9U188YXDFIqhGVVdf",
	"V86l56rvBBkhovpJRpljS8d6+XIeXrEIzrWBvWpLYxGUtDMRl82Yw9ECYXJC70lIoQ8gaPfeq6tNZHs1",
	"ayAfqM+B9E/kHE5pzECyzxpEIVQGYGlfWpr8Dde2/Gb6FNIRJgvQdy7fp1IuCdDcxgcHRz/kd35qv4Bh",
	"dIcUJI2JKUemnBhZbwI4xMUb6k83xpyy/r6k/gGLoH/V76qBMOv70ry/v29KXdeMWYiIR30dUVmHgDbX",
	"IBP7quL0npiHV/n16xYlWCnBxgMQpK49b4aYjKtZoqVu1/eRDkzq7T2SdtOjdIwlMwjEvECd316C/msN",
	"kvyi9k2hf7KAjXsBveezSk1FvmIRICLksCtuVuGvUo69qOLTjcyg2m31wEljiCPRTDl4wSAg4vOc87Uc",
	"AOrrnP9DPSWlQ6AuF+7mQa6tjUbxNuOaw9KokHoP73Yq3+b7vXk5N9vljcq4+crXkm9z0/P1qWFhlkU4",
	"In5zRrilaJmfc4mYonza/Hzn9W94rosVrzXPZlVbneMCoQfNb76OtTiQy1Uk11wpSy8NSx7cklvykcZq",
	"uYXnV1slyzz5h9qVJFNpzoIEILdkMAUq2xNAcNrvd4G++gRQBlSIA2iLG2QG/C0RNHFHp/pCy5zA2QmA",
	"0lAOQ3rPj2W79I00EUPqDxQIEfHj/f04i4anY+JDHgwoZP7+T3mFfz88eqVr2M+qkLVSVlK3F7MQNE/B",
	"rfPPZr5IeAxkHY5+ISUjZfh3NeHH2gYAX758+XLrgDpNK2uLfjZgQL9FVZrIWLfcph4yNpSvqYT0xeEc",
	"QLXUlE+K7HTVu3zndPrgXq3zJgeGcHUhagS9cfqcAx/5sboPNbmZFYEJxCT9fq9Sw82O5+blXWEoNyrw",
	"ZmpeS+IVJ/zrk4LWIpm3PKBjwCoxgZfz1nML5DyIXaHwgrIrOvW1+twcjBnekV/uaMAsPz5DfoRhGl9e",
	"FBFMDu/g+ZEepgaQYtwU4QASH9xhD4E7xDiU6uNsCEg8kdI/ohwrM0VXBVnhbJCSygrE9kBeE0EjKGu6",
	"JXlVRd1iNFI2Cfo+UsGjh+gcfQTKc+Qd3fKtMVBe/Ya4KK1wR6yUkXsIP93BEKtjWyr8tlmBLWJGeCFg",
	"CeKIEsBj9WgYh8nTpGKdxz6PzfcJ3Y1GqNS6blO+r5FoklxmP6ede3p9XcCRzTV5prkmSoA11X/1Ir/E",
	"RFmWgV3efvTl7bbk2T4cbWB1O2f/pT5i4gZqdJTFpmZkwDYUXN7zzWq2Qr1rqTSjpq3qMpNO/RkuF/yZ",
	"k+ajEImSzNkT9RzA0snXL5Pp78PRztfa68O70gnN0gjKOpgruMfo3SOipdIJ7eqDhcMp0EdfViBDOaI7",
	"GzorbZ4gfuIShrtZiJlYWMRY/ZTopzpOiS64QGpbn+T5+yTJdi35O/8z2aDRTPfxVCZ8N6tfbSjHfnlS",
	"uk1Hz0crgmrXnT5KvWrAMHd1uYftRBhSloiGNPFNmivEVzvWsqPLFxDXxwUWb2NZZ0dEsvVCJ1ZufQMG",
	"ByKAAgTwTmpaoxdAVurHYWUTAsjNXrtp+Qe3Z/3NB8u2HdiYxNOISfBNRSTKbQHo+035pDrYWohUtLpn",
	"mhcWxSv0F60IbzNiwaUw3YZJmFW8vk2YVLV9ozAltA4KBiH0xtKuq4uFE6rWft6k39UFRvbBVuGRq+it",
	"gKRY/QagYla4A8AUyK0DG5/w2oC57NXFyAnhW0WHNPC2gou04g0gQle1AywkhNZBgbrcvC4O3srCdZGg",
	"Cm8VC9ry3goa8qo3gIe0sh0gIiO1DiYCBJkYIFhboZymH9TFRvbBVvGR+2tbwUix+g3gxKxwB1gpkFsL",
	"L0LUFiHSm3/Re1kbKEJsV4ao6MJ24NHvb0yCJHXtAhT9/tryA3uT2ng4a190X3QxGdWGxJk32S4kVHBp",
	"K5DIat4AJJK6dgCJlNJakJjA+pC4aHVrg2ECtwyGi9a2wJDWvAkw6Lp2AYaE0jpgmMDwHi7cgV3Aw0VS",
	"/D1mMa8LjOSjrWIjDRxvBR5m5RtASF7dDkBiEFsHJ6S+WXHZry0yLrdsUVxuy6C43Jw9cbkrc+JyfWsi",
	"orVR0L2qjYIu3S4KuldbQkFa8QZQoKvaAQoSQuuggMWTuii4RjAENxwxcJEtM4IX52gEvWltK/NanT6+",
	"PXxc31xsBx9pxRvAh65qB/hICK2Jj6O1AFIfF0fbBsbR1pBxtEFoHO0MG0frgoNP6lsSvYv6pkRvsmVb",
	"QiUybAUMWc0bAENS1w7AkFJaCww8qI2F3mltKPBgu0jonW4JCEnFm8CBqmoXMNCE1kNB2PQQE/WhcA7a",
	"iCW3/qP6sAjb+riwbUIjyVraEj6M2jcCkqy+nSAlp7YOXIRXW4H027X1R9/brvrot7ekPdKKN4AHXdUO",
	"oJAQWgsFDBIOvSWbhYtoyD+pjYr8k+2iw0hx3A5KZghsAi2FKneBmiLBddAT+7VlyM1JbRly429Xhtyc",
	"bEmGpBVvABW6qh2gISG0Dgru0SCgdFx7MYR46mJi8EF/VxcWSfGtQiPNgd4KPMzKNwCRvLodwMQgthZU",
	"Aopr52h9UIWT1L7OlwizaW2syE+3ixSVar8dnGRVbwIlSWW7wEhK6qEIGcTheB9xD4aqEQlQyvcovonD",
	"MWh1z45Bst/M+E5tDshyz3Xlt+SWfPddTyVRqzO1wYtfeleXL4+/+06+AgCAP/Q/8n+3TjS+dY7Br4cN",
	"cNQArz41zHdqywuX741P9CujFer7mQK60D3EwhV4gmSR142yInJaoCdclcymq7p1TtAQxqG4dRrg1rkS",
	"AWK3zqfi11+N31/1n18XbtyU49jJG73dPNg4HOvZMiluJye2ktQm8mMrKt9FrmwV6bV4ztgPshLPFfad",
	"ICEwGT0m86ndNfLNrdNrn3ZObs47J7dOY65YsuOlmkHFNErq+dDpvDv/OFdJ0hRGJxkf3zoHr44PX1cU",
	"FdQoePi341cHFQXvERr7cKpZ/ocGONgEg18UdjntgsFNiltm8FlSG2XwYuU7ZfAZ0msxeJRdXbGUtbvq",
	"+onNMnBdnHaTWyy2gVBZf7JBRQciNgzL0vrXwmJJjVsFYBm9tVDHEI8nNWF3rco+Eu40cQu8bwV40hBY",
	"cLZAjjp1QqmAAnOBPZ5eSpF2VG1bLbNnFpxGIOvuSfIVx1rMbvKvda5Fttmy7BJIfdmlD6fqWMWA3ps9",
	"ko1/tJu5ZOtCuOXG1bq0a65pZ/os4+R6JiVZZGsQ9AJAY6EvV9EnRCCGaeUBB8mZyG52R+OCPdSfdmI8",
	"aPCty0H64J/VnIFHsfknPHLVzR93MJQFDg8aZUU4IuqMUiymstSruUL1He65T9PTVtOv3r651l+0bvpl",
	"5eUcJEWvCNJF+/d0vuje3t4DjH09HTuy87dt3G/eot+1Gb8OK+rDc3w0xATnEbEFlwzoI21SrQPgHcTq",
	"HAAt3O4Qm6pDTAAdVkRSc0XWC+h98ucJGnLnYYezlfcr45g6lyZkhWe6s1QVyx6cpx9vtP31T9QrH+XC",
	"mXpP7kC9uofpLUPQMz5LbwUFusopehWrF4YAf55Hom0piLsp4b8bkb8SZBYenFcBk1hYkPx5QFKhdaDv",
	"NxNbVZ90sHCVrOWrI/KV8QBDkHyoTqFLYFZipi+dotSGn727p2BC/3rw6e+p/azc6pnXh5/+ri3qGtfx",
	"1PAkVjDgv9a68ceUyi3fb+vq1REQ/LmxXrHx22DDeQrrs+RsndtnzzmKa7Nq0dKtx6W5wbsVNs2qlxwq",
	"fVXFnfnTw09/l47rhthyiXP8IF40jfpnxYd5w7fBg8Xa1+c/s77t816B2tp8l914UY/lZPHtcJusWTLa",
	"FUGa0dSDw09/79/TTfFYdUDpQezV19eAPLdDmfm2TmXmmzuWme/qXOYNcBGB4ZRjXudyY4Zg2FSLJelX",
	"GqzNTJclh8GqO5sY8hAROvTO1THIaakFwYRWUvETi5NUDF5yJG1T97rOEKa3t+vDZPXt/HKwQigQF8Cn",
	"90QNMLpD6SWgSwMwbV1nTzXieQxczey/HhJzCX/VsnvhusOSjL0l2XoPy9RLk3hWF889JIrZes9KSm87",
	"7W/zuX67TvDbUFaf4qWaWX2Sl8xEvntMfCmVVuOpvwBZz9wB3IDQ+xKmMzP1brrd606v1zm5dQyu0HX2",
	"Y0YAHQ7NKhdX12r3z953SqqSzbtHaBxOsyOy/frVlucTLs4lrJFHWDOHsFb+4OLcwYLIyUdkQokIHmdI",
	"Lq4u+6dbHxPVQR+qVd+/LhgOfRv1t9NfV1aqOl1dRFBZ4MelIKEENSUTPgJIri7bnZJeUnVyfZaWosse",
	"HRwdNQ8Pmgc/9NXoHB8c/Kvq2zRrZObLv/YPv8++LBmXZbq5mGj7rHTztjN2N5+mu+vc3A0l5CrdbCTk",
	"lm6E0lm4cPl+pzRl9hnY9gxFIfTQCssX1/oLfQ9QunZBiV27WMFjSMbQrl/Y9YsH8mutNQyTVfMFjK3w",
	"6jNfwEhGyi5i2EWMGsy3bCHD5Du1irEVlntuqxjJqNiVDLuSIVlJN1GtUFTH4tOb/Bm8n9kBkm0PSBhL",
	"/20qur0FUfjrpK4+nqATKGBEMRFbgaXdHvLA7SHbzCc1p38TUM521JX6jck2uhqOY7bn7Rl4jkv2c+lV",
	"tDhKViD9GfadgZS6tXRp9vuCLVyWR5/EFi456yVb9fLbJ7O1Z0rCaRVtY+n5AdvH5vWElu7lGmIRfe6m",
	"dakgL1/xOs7H2M/WKFtJUtyluAYKxCRkfHpPQgp9AAn453lPB3IwwWSk2qN4u6o56bcbbgjonvwMGIoo",
	"q77s2R8+8m6+NTbyJaGyOrdrJ0XLRGESTVBBKXvJ9vO/ZHvmPu1NXY2d5ZRnFxJT0vQkuNJFHg7UFjbk",
	"L7qTmBJXflTzPmJ7JfDjXwlsBBs3cTFwKonU/pjlp8Ml5UtN3BLJtRV/vTACG3bZZ+tez2sv1rZdx32G",
	"Vt1ZL1NgK2y0rICDLmC26UnttzRBX2PHZUUnc2X9OD18VNystAGzSmjIGnY4hFYWPW1ZtHSHZhWOYmFR",
	"ZFG0TKNRIk3dZUmZ0nWaNaXTMLSubq92YiYM7+GUp9Wtn0I52y6bPbn9UbAJk083YXK5RdFD4oq0YRie",
	"0pjxZ6oTdA96qYu+RQ1RQmlj+mKu7p1pj3nKD9AlPuTBgELm1wnw5YXLvIaT9K2N731z8T3js2b2d0ls",
	"z4bSHj2UlrHhBuJoBsPXjKRlX5TG0mZFxDZUjNH/zWqUYsVrKRCzqq3qiwKh+lNdriB8nURcZwdqUjSH",
	"Qxq111IKAT7lAk0WqpEkZ9l5LsNTP744Myq4dLuyLm2MxtOJNM6IheWxxlodLs79c4w6PhBOqwQda42k",
	"8hd2NZZWgj9FCb4s6FgPR7GwKLJ2QKmiq5VGVzzPoyx3Lqt2b6E+2FoK3U7UQb3sm6qRV34Oq3PGrXLS",
	"zeJlY3qWv7eO+jfnqE9oku/STP5aLQHHAA+IGL3DPmJVLcxIzbfPg16AJLTus3sWpWD0qezOCHljmvqI",
	"nzGDXKfJ+ojLguMQR0MaYuo0nBAPGBTyrwn2GOV0KFyB4EQDm48QwTrreISYHwvZuCjmwSAOQ0Ve/qB3",
	"iMlGhlAl6d5hT1BG1b5Fnh5mo/9IUCrusRDqm3t4h4aMElnV7zDCiK04nPcBEgFKRJ05tgHkgAsaRcgH",
	"fowkthFjlFUmL2LuqgLIt7lMTzwAYwjYDYRgCuK8Wi+oo1wV19W9EbOtSpuoLA3ZGL3Rn7dT3t6G0WZS",
	"03Q2bLyVE1jLiCurcqvGXCnBTYEokdN1UXSii68Oo5NMH2wZRymh7QHJpLApJOV17gpKBsVNYSnX9HXh",
	"9Db7YnVEvTXtii2DyqC1PVzNENkUtArV7gpdRaKbAtiM9VgXZb9gBkGyOQucID5eHWy/zNmtW0bcLMHt",
	"wa6M0qawN1/3rgBYQnlTKMw8lrr4e5d+sDru3hne0ZYRl5PaHtaKNDaFMrPWXeGrQHNTyEr837q4OtfF",
	"V0fVeeZnbxlTKaHtIcqksCk85XXuCk0GxU1hKYugNFUEpS6mLtLPQF9+tjq2sgr6SeBmyxDL6Lma4Pag",
	"VkZpU5Cbr3tX0CuhvCkIpiG7uti7ivhbWX510F3lwcEtwy2jtD2cFUhsCmBGpbtClklyU5DKQr91MdWV",
	"H5zEYro6qLpGmHnLqMpJbQ9WRRqbwpVZ666AVaC5MWRlCwm1oZV98QBsmcsW2wZXTmuL6CoS2Ri8zGp3",
	"hq8C0U0CjN4htgq8ZPmHgStZBtsBtBSl7QIrI7FJWCWV7hJUKclNQUotctbFU08WXh1MvWQhdctI0mS2",
	"B6O8/k1hKK1xVwDK6G0MPfkFM3Xgo0rvPSSIlV0is20MaTpbBFFOYGMoSqvcGYwygpvFkbTMV8OSNOPW",
	"wFOSvrETTCla28ZVRmSz2Eqq3S2+UqKbwliSpFMXYH1dfHVo9bNkoC3jKiW0PVCZFDaFqLzOXcHJoLgp",
	"LGUpYbXFVRTGZAyuSLM9k3FZD1TvjRy0LcMqJ7U9YBVpbApaZq27AleB5qbglWUR1oXXh/SD1ZH1wchY",
	"3DKyclLbQ1aRxqaQZda6K2QVaG4MWTq7tnbGX8wFnQAJnIF0/W6uz8GLD7qOlw/AWpbbu22kJYS2iDOD",
	"wsZQltW5M4zlFDeFMJ31XBdg/1KlV0eS/m77QErobA9HBoFNwSirclcoygluAkS1N8WShbDRpcxsxSe0",
	"HXZmKOpsiF3U1+Ienee5E7aQA78aklbYDVvAzC25JT2E1N6kO8gwjTnoXvX6YIJEQP3kGO38mna1+4YD",
	"eAexyv/Pz7g2N2rIQdsr32C7u0naqlDcojjcqCDcoQh8AGQXbbZ9PJjGwoLUgnROQ+tD/OtsJk1Klumo",
	"K/XKbiF9pltIN3Viu7rD6Oykqg3qvavkyVxnNSDq1J+Kt2oKE0qwoLK9bpLl7SoqZV0/7fe7TsO5vrnQ",
	"/z1yGs5Z+0I+6/VOnYbTb8u/b07kf08ue/L5hfqkeyX/e3bRkv9cqkdvzlvtd+dnvb7TcD6cXp3J0het",
	"8w+t646q79xtd67ly/5167LXavfPri6dhtPqnjkN57TTuu6/6bTUx503p1dX75yG8/b66kZRa73t9Lqd",
	"zsmKcyLgCMjBAS88SMAAGdeYaDkX6jtG+N7LhWMq4GjFW1QE1BeGoMe7ZKZD/A214GE3yXzItvyi7LIU",
	"DigZUUxG4IVUpS8BVZxMwzvkgxdDGHL0spKJ9Zd21+8T3/V7lWjK9Xf8pjq3VGVn/nSlj6mP35KmHpeq",
	"L3M5dQ3Vmvx5OprZsD9kUCNGB6gp9QVidawhVR4k5ctG8iLTQj1V6Dw95m6leEKhWTMtjnnQJFTgIfZq",
	"nwjC0AhzgRjygfwemN8DH0llyW8JJL7CDuScelhZZcXrWNS3+i4naUiJoPz8tm7MA5OCtRCf/yEjPuZR",
	"CKduetjIzO9VbEmrqh5dVUkOvTQ4tMvoEIdIx+I3oMDmhdSC00OvE+GUnh+qxJEKcszJKq5PqL+86neO",
	"QV+Cu9U909ZVODUiJFo4gRt1h+OeRydgQgc4RABG0d53392SjOaUxiwleYeh+iwvq65/xALc4zAEMBZ0",
	"AgX2VAQSRhGC7JYkYkrKuL28deDo+LvvdAsR8dUtfroSeofYPcMqKDQF6AvmQlqFuYC+JUlrpAzUB2VK",
	"Q/7m5uykAfBQtkZ9VXJJbJfyKtm7jeDMEhBtNlyznNhaAZxl1W81pLOU+Oq8tthgqH9OaQ3DIQf9d9+B",
	"jzQGEzgF2EdE4KE+6VULDamPuu+k4yOxXLG+MzsUVSZpsbkpVe3lTgEE/xON/0eS+p84xv7/ZMpvx8tC",
	"FWJw+eLQ7oY9Mdee2Zhvk+0erNxqrllp70yJeBWioazU4NY3s2x59tUq1pOf/52prh0pra2pq0dSVA/m",
	"mAVLZrNcIg2xx2OTWFgmsUzyCExi2HHpPUd+U181XSfuk32TXE9dGrJK74/xdRkbrflT381sozOPHp3J",
	"GPJaMeQG4jFzsqPuZS6zAqQ05lAuQLahkuZGZrOqqKz6tVTQfIVbVT0l5FaGxUKNUz9wsBQ4uuRMi59S",
	"Tmc5zyz33Zf23FS5j9TtJ4O2VS4+WS6LZFW7HVor4p6hiFt2M8pyoMXCwszCbAVNGsIVvLbeeWuhvxZC",
	"66lZT816ak/AUztvbc5Hy2VEXe8sFxTlftmMoNiKHslHYMMapFDxerrDqGq7WsMktMJkV2iKFXbOLUBC",
	"4miF8Am6WDOQX+5cLein1ozP2qF6IHxW2i+3SGYo/2lHY2hF0ZMURUs3si3CTywseqwiq1BkS66LfIuI",
	"xBJKr4yUXyaXRJrbV9Q1khFimPoLNcDWrouccw76AQJDzLgAPpxKL4cH9H72pstH2wwjWxfCLTfuYftk",
	"+np/TBSLpHrpLeaTfwx+laBtgMgfNsCXkH+qcrVUHaWOlkJ9w4n8odNwvoR8G25ULT6qd/9nNTNlJ6jV",
	"WvVVpZWLXR5AyGqzEYRvLoLAw1h+0kz+9dLX+o862wg1PNQx6bKld5jjAQ6xmIIQ3aGwqr15OVeVK233",
	"Tbd/dtFxb3qd657TcDr/7HeuL1vn2YPuzZvzs7aNdjzNaEd2Rucmwh25SFse7lBL0blUK492zEq1rViJ",
	"xhBs2Ews1ryenWjWtV1DsUBphQmvUG4rLDAvgEMS8sjqfVIxjxnc11hQXtDTgjZ/plGPh0JopbXjRcJD",
	"hT12NYpWJj1ZmbR0XXgRiGJhIWQhtEiteTFjiAjzkP1K4Z+UTSGnd/HX1QNt/XF2xv4zVQfFbmxuHgLM",
	"BWXTxROQFFpx5E/1VzuJOy0/auWxDljZSLhoNxhLJ2wz6Mp/uNj/alJeKWgD8g/L4NbO3paHb0qwVmjY",
	"erCz4aANhIPyk5rus8OCMM/nHQxQSMlI9XHEaBylu8ExB2p/UllDVEE9vw86aKuiKZgDqBtRQRdzN31t",
	"Dyh6yvGbTHDsOnwDZwM4ObxKQzk7lXBbMqmNwd6sRV2seC2D2qxqq/Z0gdBWFe2DAkgL4KiLZ+1fwbNb",
	"S+c+u8jUgiE0TZZnP36Pyg4PjHgtkrayvuc6O1ZoP0mhvUIYbREyY2FxaXG5e2MCE0+dELGq0559V36d",
	"g35pPfZn77Gn8wyS06VLXeKkTPUJ1GeX7bOTzmXfaTi99mnn5Oa8c+JetM4u+53L1mW7UzdT45FCgOtT",
	"fljO2BbzaNRQ8GTnTf7DpqI8xVBGKk8fP5KRsnrFPVc7E/tbu4EjHehNX79h1Lvm3RtZTVu+eCOns02r",
	"Y4UIxrwXXonG9Pos/dqGMarCGJUDaBhxNoixBj/UiGGsNjHJTVzPcmqsvH6K+FwcvVgFmrGwwLTA3Kkh",
	"MUGCYW/V4EXyVemNFvqVjVx8W7kGesYB5nqDhz4039z6IR8Lqm45qVj1Tz606/5P3FnWHPz4rrKGXKmj",
	"vDshsyX1lo7xZpWbUetaqi2rZ6uKLaeyPbX2sPX9CuTpsrrZ1iWucokrBi8zDaw7/GDwP3RBv0qSysqe",
	"5aRYgfyUMFl7+b4Kh7GwKLQo3JBZEPN6dzOqcmVq6oYjZk86eP4nHYSQi+wCQvOHOn4le1P4hSZaADX1",
	"H6tdo6y+AdD3GeK8ciE7ofAglxx6HuJ88cEKusyCQxUOD5rXndaJ03BeHTQ/XJ/1O07DeX3QbJ1cnF2u",
	"2GXFRPq2zwDeobSB6kI9zAGPB4kDu+DG77zQ+pEKpFqkNiF4At9V8gHmri6wOBpRk2ZyqyAi0g/3k2OI",
	"MFdtWdSCCLvJN2s3A5M7ij3EAWQIcJVvQpc3Qt0fMnUjiH03rcHGZ554fEbqpw1EZ7T+qxmXkYVLIzGG",
	"styGQaT7ullzKKtzLWMoqWWrplBKo9Y8zplAS2MfXcQmUFIMp8BP4yClM60jH7I5T+lsjBzByyMUpd1K",
	"jL3neRDGSuBYJXJQzuvy8x0MlhUhj4uShb58OTJiYXHxZ1QtPlImNBRIaZlyK+IkK1SJn8SKyEs+Le1S",
	"3nlWp/PXtTt//VQ7//Xr/x8AAP//JnfsqWqeAwA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
